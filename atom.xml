<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>liuxuan的博客</title>
  <icon>https://www.gravatar.com/avatar/19bc11b7d38a5520912b73217b1993fc</icon>
  <subtitle>苍山如海, 残阳如血</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="//blog.liuxuan.site/"/>
  <updated>2018-07-25T15:24:24.000Z</updated>
  <id>//blog.liuxuan.site/</id>
  
  <author>
    <name>liuxuan</name>
    <email>619962351@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript数据结构02 - 栈</title>
    <link href="//blog.liuxuan.site/2018/07/25/javascript_data_structure_02_stack/"/>
    <id>//blog.liuxuan.site/2018/07/25/javascript_data_structure_02_stack/</id>
    <published>2018-07-25T14:36:00.000Z</published>
    <updated>2018-07-25T15:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://image.liuxuan.site/blog/20180725/stack.jpg?imageView2/1/w/1000/h/400" alt="stack"></p><h2 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h2><h3 id="1-1-背景"><a href="#1-1-背景" class="headerlink" title="1.1 背景"></a>1.1 背景</h3><p>通过前面一节<a href="https://blog.liuxuan.site/2018/07/25/javascript_data_structure_01_array/" target="_blank" rel="noopener">《JavaScript数据结构01 - 数组》</a>我们知道，可以在数组的任意位置上删除或添加元素。然而，有时候我们还需要一种在添加或删除元素时有更多控制的数据结构。</p><p>有两种数据结构类似于数组，但在添加和删除元素时更为可控。</p><p>它们就是<strong>栈和队列</strong>。</p><h3 id="1-2-概念"><a href="#1-2-概念" class="headerlink" title="1.2 概念"></a>1.2 概念</h3><p><strong>栈</strong>是一种遵循后进先出（LIFO）原则的有序集合。新添加的或待删除的元素都保存在栈的末尾，称作<strong>栈顶</strong>，另一端就叫<strong>栈底</strong>。</p><p>在栈里，新元素都靠近栈顶，旧元素都接近栈底。</p><p>栈也被用在编程语言的编译器和内存中保存变量、方法调用等，比如函数的调用栈。</p><a id="more"></a><h2 id="二、栈的实现"><a href="#二、栈的实现" class="headerlink" title="二、栈的实现"></a>二、栈的实现</h2><h3 id="2-1-创建一个类来表示栈"><a href="#2-1-创建一个类来表示栈" class="headerlink" title="2.1 创建一个类来表示栈"></a>2.1 创建一个类来表示栈</h3><p>这里我还是用构造函数的形式来书写，大家有兴趣可以用ES6的Class来重写一遍。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Stack类</span></span><br><span class="line">function Stack () &#123;</span><br><span class="line">  <span class="keyword">this</span>.items = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.push = push;</span><br><span class="line">  <span class="keyword">this</span>.pop = pop;</span><br><span class="line">  <span class="keyword">this</span>.<span class="built_in">peek</span> = <span class="built_in">peek</span>;</span><br><span class="line">  <span class="keyword">this</span>.isEmpty = isEmpty;</span><br><span class="line">  <span class="keyword">this</span>.<span class="built_in">clear</span> = <span class="built_in">clear</span>;</span><br><span class="line">  <span class="keyword">this</span>.<span class="built_in">size</span> = <span class="built_in">size</span>;</span><br><span class="line">  <span class="keyword">this</span>.<span class="built_in">print</span> = <span class="built_in">print</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>栈里面有一些声明的方法：</p><ul><li>push(element)：添加一个（或几个）新元素到栈顶</li><li>pop()：移除栈顶的元素，同时返回被移除的元素</li><li>peek()：返回栈顶的元素，不对栈做任何修改</li><li>isEmpty()：如果栈里没有任何元素就返回true，否则返回false</li><li>clear()：移除栈里的所有元素</li><li>size()：返回栈里的元素个数</li></ul><h3 id="2-2-实现栈中的辅助方法"><a href="#2-2-实现栈中的辅助方法" class="headerlink" title="2.2 实现栈中的辅助方法"></a>2.2 实现栈中的辅助方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加新元素到栈顶</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.items.push(element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除栈顶元素，同时返回被移除的元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pop</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.items.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看栈顶元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">peek</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.items.length - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为空栈</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmpty</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.items.length === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空栈</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clear</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.items = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询栈的长度</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">size</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.items.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印栈里的元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.items.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-创建实例进行测试"><a href="#2-3-创建实例进行测试" class="headerlink" title="2.3 创建实例进行测试"></a>2.3 创建实例进行测试</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Stack实例</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">stack</span> = new <span class="keyword">Stack</span>();</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">stack</span>.isEmpty());     <span class="comment">// true</span></span><br><span class="line"><span class="keyword">stack</span>.push(5);                    <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">stack</span>.push(8);                    <span class="comment">// undefined</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">stack</span>.peek());        <span class="comment">// 8</span></span><br><span class="line"><span class="keyword">stack</span>.push(11);                   <span class="comment">// undefined</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">stack</span>.size());        <span class="comment">// 3</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">stack</span>.isEmpty());     <span class="comment">// false</span></span><br><span class="line"><span class="keyword">stack</span>.push(15);                   <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">stack</span>.pop();                      <span class="comment">// 15</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">stack</span>.size());        <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">stack</span>.<span class="keyword">print</span>();                    <span class="comment">// 5,8,11</span></span><br><span class="line"><span class="keyword">stack</span>.<span class="keyword">clear</span>();                    <span class="comment">// undefined</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">stack</span>.size());        <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h2 id="三、结束"><a href="#三、结束" class="headerlink" title="三、结束"></a>三、结束</h2><p>本文会同步到我的<a href="https://blog.liuxuan.site" target="_blank" rel="noopener">个人博客</a>，完整代码可以到我的<a href="https://github.com/leocoder351/data-structure" target="_blank" rel="noopener">github仓库查看</a>，如果对你有帮助的话欢迎点一个Star~~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.liuxuan.site/blog/20180725/stack.jpg?imageView2/1/w/1000/h/400&quot; alt=&quot;stack&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、定义&quot;&gt;&lt;a href=&quot;#一、定义&quot; class=&quot;headerlink&quot; title=&quot;一、定义&quot;&gt;&lt;/a&gt;一、定义&lt;/h2&gt;&lt;h3 id=&quot;1-1-背景&quot;&gt;&lt;a href=&quot;#1-1-背景&quot; class=&quot;headerlink&quot; title=&quot;1.1 背景&quot;&gt;&lt;/a&gt;1.1 背景&lt;/h3&gt;&lt;p&gt;通过前面一节&lt;a href=&quot;https://blog.liuxuan.site/2018/07/25/javascript_data_structure_01_array/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《JavaScript数据结构01 - 数组》&lt;/a&gt;我们知道，可以在数组的任意位置上删除或添加元素。然而，有时候我们还需要一种在添加或删除元素时有更多控制的数据结构。&lt;/p&gt;
&lt;p&gt;有两种数据结构类似于数组，但在添加和删除元素时更为可控。&lt;/p&gt;
&lt;p&gt;它们就是&lt;strong&gt;栈和队列&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;1-2-概念&quot;&gt;&lt;a href=&quot;#1-2-概念&quot; class=&quot;headerlink&quot; title=&quot;1.2 概念&quot;&gt;&lt;/a&gt;1.2 概念&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;栈&lt;/strong&gt;是一种遵循后进先出（LIFO）原则的有序集合。新添加的或待删除的元素都保存在栈的末尾，称作&lt;strong&gt;栈顶&lt;/strong&gt;，另一端就叫&lt;strong&gt;栈底&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在栈里，新元素都靠近栈顶，旧元素都接近栈底。&lt;/p&gt;
&lt;p&gt;栈也被用在编程语言的编译器和内存中保存变量、方法调用等，比如函数的调用栈。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="//blog.liuxuan.site/categories/JavaScript/"/>
    
    
      <category term="Javascript" scheme="//blog.liuxuan.site/tags/Javascript/"/>
    
      <category term="数据结构" scheme="//blog.liuxuan.site/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="//blog.liuxuan.site/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="栈" scheme="//blog.liuxuan.site/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript数据结构01 - 数组</title>
    <link href="//blog.liuxuan.site/2018/07/25/javascript_data_structure_01_array/"/>
    <id>//blog.liuxuan.site/2018/07/25/javascript_data_structure_01_array/</id>
    <published>2018-07-25T08:36:00.000Z</published>
    <updated>2018-07-25T15:24:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://image.liuxuan.site/blog/20180725/array.jpg?imageView2/1/w/1000/h/400" alt="array"></p><h2 id="一、创建数组"><a href="#一、创建数组" class="headerlink" title="一、创建数组"></a>一、创建数组</h2><h4 id="1-1-使用Array构造函数"><a href="#1-1-使用Array构造函数" class="headerlink" title="1.1 使用Array构造函数"></a>1.1 使用Array构造函数</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="type">Array</span>(); <span class="comment">// 创建一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="type">Array</span>(<span class="number">10</span>);   <span class="comment">// 创建一个包含20项的数组</span></span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="type">Array</span>(<span class="string">'liu'</span>, <span class="string">'wang'</span>, <span class="string">'li'</span>);  <span class="comment">// 创建一个包含3个字符串的数组</span></span><br></pre></td></tr></table></figure><h4 id="1-2-使用数组字面量表示法"><a href="#1-2-使用数组字面量表示法" class="headerlink" title="1.2 使用数组字面量表示法"></a>1.2 使用数组字面量表示法</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [];  <span class="comment">// 创建一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">10</span>];    <span class="comment">// 创建一个包含1项的数组</span></span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="string">'liu'</span>, <span class="string">'wang'</span>, <span class="string">'li'</span>];   <span class="comment">// 创建一个包含3个字符串的数组</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="二、常用数组方法"><a href="#二、常用数组方法" class="headerlink" title="二、常用数组方法"></a>二、常用数组方法</h2><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>join</td><td>把数组的所有元素放入一个字符串，元素通过指定的分隔符进行分隔</td></tr><tr><td>pop</td><td>删除并返回数组的最后一个元素</td></tr><tr><td>push</td><td>向数组的末尾添加一个或更多元素，并返回新的长度</td></tr><tr><td>shift</td><td>删除并返回数组的第一个元素</td></tr><tr><td>unshift</td><td>向数组的开头添加一个或更多元素，并返回新的长度</td></tr><tr><td>slice</td><td>从某个已有的数组返回指定的元素</td></tr><tr><td>indexOf</td><td>返回第一个与给定参数相等的数组元素的索引，没有找到则返回-1</td></tr><tr><td>lastIndexOf</td><td>返回在数组中搜索到的与给定参数相等的元素的索引里的最大的值，没有找到则返回-1</td></tr><tr><td>sort</td><td>对数组的元素进行排序</td></tr><tr><td>splice</td><td>删除元素，并向数组添加新元素</td></tr><tr><td>toString</td><td>把数组转换为字符串，并返回结果</td></tr><tr><td>toLocaleString</td><td>把数组转换为本地字符串，并返回结果</td></tr><tr><td>valueOf</td><td>返回数组对象的原始值</td></tr><tr><td>forEach</td><td>对数组中的每一项运行指定函数，这个方法没有返回值</td></tr><tr><td>concat</td><td>连接2个或更多数组，并返回结果</td></tr><tr><td>every</td><td>对数组中的每一项运行指定函数，如果该函数对每一项都返回true，则返回true</td></tr><tr><td>some</td><td>对数组中的每一项运行指定函数，如果任一项返回true，则返回true</td></tr><tr><td>filter</td><td>对数组中的每一项运行指定函数，返回该函数会返回true的项组成的数组</td></tr><tr><td>reverse</td><td>颠倒数组中元素的顺序</td></tr><tr><td>map</td><td>对数组中的每一项运行指定函数，返回每次函数调用的结果组成的数组</td></tr><tr><td>reduce</td><td>接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值</td></tr><tr><td>reduceRight</td><td>接收一个函数作为累加器，数组中的每个值（从右到左）开始缩减，最终计算为一个值</td></tr></tbody></table><p><strong>PS：原始值是指固定而简单的值，存放在栈中的简单数据段，它们的值直接存储在变量访问的位置。</strong></p><p>JavaScript中有五种原始类型，也叫基本类型： <br><br><strong>Number、String、Boolean、Undefined、Null</strong></p><h2 id="三、演示实例"><a href="#三、演示实例" class="headerlink" title="三、演示实例"></a>三、演示实例</h2><h4 id="3-1-join"><a href="#3-1-join" class="headerlink" title="3.1 join"></a>3.1 join</h4><p><strong>定义和用法</strong> <br></p><p>join()方法用于把数组中的所有元素放入一个字符串。<br><br>元素是通过指定的分隔符进行分隔的。</p><p><strong>语法</strong> <br></p><blockquote><p>arrayObject.join(separator)</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>seperator</td><td>可选。指定要使用的分隔符，如果省略该参数，则使用逗号作为分隔符</td></tr></tbody></table><p><strong>返回值</strong> <br></p><p>返回一个字符串。该字符串是通过把 arrayObject 的每个元素转换为字符串，然后把这些字符串连接起来，在两个元素之间插入 separator 字符串而生成的。<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"Geroge"</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">"John"</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">"Thomas"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str1 = arr.join();</span><br><span class="line"><span class="keyword">var</span> str2 = arr.join(<span class="string">''</span>);</span><br><span class="line"><span class="keyword">var</span> str3 = arr.join(<span class="string">' '</span>);</span><br><span class="line"><span class="keyword">var</span> str4 = arr.join(<span class="string">'-'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str1);  <span class="comment">// "Geroge,John,Thomas"</span></span><br><span class="line"><span class="built_in">console</span>.log(str2);  <span class="comment">// "GerogeJohnThomas"</span></span><br><span class="line"><span class="built_in">console</span>.log(str3);  <span class="comment">// "Geroge John Thomas"</span></span><br><span class="line"><span class="built_in">console</span>.log(str4);  <span class="comment">// "Geroge-John-Thomas"</span></span><br></pre></td></tr></table></figure><h4 id="3-2-pop"><a href="#3-2-pop" class="headerlink" title="3.2 pop"></a>3.2 pop</h4><p><strong>定义和用法</strong> <br></p><p>pop()方法用于删除并返回数组的最后一个元素。</p><p><strong>语法</strong> <br></p><blockquote><p>arrayObject.pop()</p></blockquote><p><strong>返回值</strong> <br></p><p>arrayObject 的最后一个元素。<br></p><p><strong>说明</strong> <br></p><p>pop() 方法将删除 arrayObject 的最后一个元素，把数组长度减 1，并且返回它删除的元素的值。如果数组已经为空，则 pop() 不改变数组，并返回 undefined 值。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> arr = <span class="built_in">new</span> Array(<span class="number">3</span>);</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"Geroge"</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">"John"</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">"Thomas"</span>;</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(arr);           // [<span class="string">"Geroge"</span>, <span class="string">"John"</span>, <span class="string">"Thomas"</span>]</span><br><span class="line">console.<span class="built_in">log</span>(arr.<span class="built_in">pop</span>());     // <span class="string">"Thomas"</span></span><br><span class="line">console.<span class="built_in">log</span>(arr);           // [<span class="string">"Geroge"</span>, <span class="string">"Thomas"</span>]</span><br></pre></td></tr></table></figure><h4 id="3-3-push"><a href="#3-3-push" class="headerlink" title="3.3 push"></a>3.3 push</h4><p><strong>定义和用法</strong> <br></p><p>push()方法可向数组的末尾添加一个或多个元素，并返回新的长度。</p><p><strong>语法</strong> <br></p><blockquote><p>arrayObject.push(newElement1, newElement2, …, newElementX)</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>newElement1</td><td>必需。要添加到数组末尾的第一个元素</td></tr><tr><td>newElement2</td><td>可选。要添加到数组末尾的第二个元素</td></tr><tr><td>newElementX</td><td>可选。可添加多个元素</td></tr></tbody></table><p><strong>返回值</strong> <br></p><p>把指定的值添加到数组后的新长度。<br></p><p><strong>说明</strong> <br></p><p>push() 方法可把它的参数顺序添加到 arrayObject 的尾部。它直接修改 arrayObject，而不是创建一个新的数组。push() 方法和 pop() 方法使用数组提供的先进后出栈的功能。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> arr = <span class="built_in">new</span> Array(<span class="number">3</span>);</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"Geroge"</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">"John"</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">"Thomas"</span>;</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(arr);                           // [<span class="string">"Geroge"</span>, <span class="string">"John"</span>, <span class="string">"Thomas"</span>]</span><br><span class="line">console.<span class="built_in">log</span>(arr.<span class="built_in">push</span>(<span class="string">"James"</span>));             // <span class="number">4</span></span><br><span class="line">console.<span class="built_in">log</span>(arr);                           // [<span class="string">"Geroge"</span>, <span class="string">"John"</span>, <span class="string">"Thomas"</span>, <span class="string">"James"</span>]</span><br><span class="line">console.<span class="built_in">log</span>(arr.<span class="built_in">push</span>(<span class="string">"Peter"</span>, <span class="string">"Sara"</span>));     // <span class="number">6</span></span><br><span class="line">console.<span class="built_in">log</span>(arr);                           // [<span class="string">"Geroge"</span>, <span class="string">"John"</span>, <span class="string">"Thomas"</span>, <span class="string">"James"</span>, <span class="string">"Peter"</span>, <span class="string">"Sara"</span>]</span><br></pre></td></tr></table></figure><h4 id="3-4-shift"><a href="#3-4-shift" class="headerlink" title="3.4 shift"></a>3.4 shift</h4><p><strong>定义和用法</strong> <br></p><p>shift()方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。</p><p><strong>语法</strong> <br></p><blockquote><p>arrayObject.shift()</p></blockquote><p><strong>返回值</strong> <br></p><p>数组原来的第一个元素的值。<br></p><p><strong>说明</strong> <br></p><p>如果数组是空的，那么 shift() 方法将不进行任何操作，返回 undefined 值。请注意，该方法不创建新数组，而是直接修改原有的 arrayObject。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> arr = <span class="built_in">new</span> Array(<span class="number">3</span>);</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"Geroge"</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">"John"</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">"Thomas"</span>;</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(arr);           // [<span class="string">"Geroge"</span>, <span class="string">"John"</span>, <span class="string">"Thomas"</span>]</span><br><span class="line">console.<span class="built_in">log</span>(arr.shift());   // <span class="string">"Geroge"</span></span><br><span class="line">console.<span class="built_in">log</span>(arr);           // [<span class="string">"John"</span>, <span class="string">"Thomas"</span>]</span><br></pre></td></tr></table></figure><h4 id="3-5-unshift"><a href="#3-5-unshift" class="headerlink" title="3.5 unshift"></a>3.5 unshift</h4><p><strong>定义和用法</strong> <br></p><p>unshift()方法可向数组的开头添加一个或多个元素，并返回新的长度。</p><p><strong>语法</strong> <br></p><blockquote><p>arrayObject.unshift(newElement1, newElement2, …, newElementX)</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>newElement1</td><td>必需。要添加到数组开头的第一个元素</td></tr><tr><td>newElement2</td><td>可选。要添加到数组开头的第二个元素</td></tr><tr><td>newElementX</td><td>可选。可添加多个元素</td></tr></tbody></table><p><strong>返回值</strong> <br></p><p>arrayObject 的新长度。<br></p><p><strong>说明</strong> <br></p><p>unshift() 方法将把它的参数插入 arrayObject 的头部，并将已经存在的元素顺次地移到较高的下标处，以便留出空间。该方法的第一个参数将成为数组的新元素 0，如果还有第二个参数，它将成为新的元素 1，以此类推。</p><p>请注意，unshift() 方法不创建新的创建，而是直接修改原有的数组。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> arr = <span class="built_in">new</span> Array(<span class="number">3</span>);</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"Geroge"</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">"John"</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">"Thomas"</span>;</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(arr);                               // [<span class="string">"Geroge"</span>, <span class="string">"John"</span>, <span class="string">"Thomas"</span>]</span><br><span class="line">console.<span class="built_in">log</span>(arr.unshift(<span class="string">"James"</span>));              // <span class="number">4</span></span><br><span class="line">console.<span class="built_in">log</span>(arr);                               // [<span class="string">"James"</span>, <span class="string">"Geroge"</span>, <span class="string">"John"</span>, <span class="string">"Thomas"</span>]</span><br><span class="line">console.<span class="built_in">log</span>(arr.unshift(<span class="string">"Peter"</span>, <span class="string">"Sara"</span>));      // <span class="number">6</span></span><br><span class="line">console.<span class="built_in">log</span>(arr);                               // [<span class="string">"Peter"</span>, <span class="string">"Sara"</span>, <span class="string">"James"</span>, <span class="string">"Geroge"</span>, <span class="string">"John"</span>, <span class="string">"Thomas"</span>]</span><br></pre></td></tr></table></figure><h4 id="3-6-slice"><a href="#3-6-slice" class="headerlink" title="3.6 slice"></a>3.6 slice</h4><p><strong>定义和用法</strong> <br></p><p>slice()方法可从已有的数组中返回选定的元素。slice()方法不改变原数组。</p><p><strong>语法</strong> <br></p><blockquote><p>arrayObject.slice(start, end)</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>start</td><td>必需。规定从何处开始选取。<br>如果是负数，那么它规定从数组尾部开始算起的位置。<br>也就是说，-1指最后一个元素，-2指倒数第二个元素，以此类推。</td></tr><tr><td>end</td><td>可选。规定从何处结束选取。<br>该参数是数组片断结束处的数组下标。<br>如果没有指定该参数，那么切分的数组包含从start到数组结束的所有元素。<br>如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。</td></tr></tbody></table><p><strong>返回值</strong> <br></p><p>返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。<br></p><p><strong>说明</strong> <br></p><p>请注意，该方法并不会修改数组，而是返回一个子数组。如果想删除数组中的一段元素，应该使用方法 Array.splice()。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var arr = new <span class="symbol">Array</span>(<span class="number">6</span>);</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"George"</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">"John"</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">"Thomas"</span>;</span><br><span class="line">arr[<span class="number">3</span>] = <span class="string">"James"</span>;</span><br><span class="line">arr[<span class="number">4</span>] = <span class="string">"Adrew"</span>;</span><br><span class="line">arr[<span class="number">5</span>] = <span class="string">"Martin"</span>;</span><br><span class="line"></span><br><span class="line">console.log(arr);                   // [<span class="string">"Geroge"</span>, <span class="string">"John"</span>, <span class="string">"Thomas"</span>, <span class="string">"James"</span>, <span class="string">"Adrew"</span>, <span class="string">"Martin"</span>]</span><br><span class="line">console.log(arr.slice(<span class="number">0</span>));          // [<span class="string">"Geroge"</span>, <span class="string">"John"</span>, <span class="string">"Thomas"</span>, <span class="string">"James"</span>, <span class="string">"Adrew"</span>, <span class="string">"Martin"</span>]</span><br><span class="line">console.log(arr.slice(<span class="number">1</span>));          // [<span class="string">"John"</span>, <span class="string">"Thomas"</span>, <span class="string">"James"</span>, <span class="string">"Adrew"</span>, <span class="string">"Martin"</span>]</span><br><span class="line">console.log(arr.slice(<span class="number">1</span>, <span class="number">3</span>));       // [<span class="string">"John"</span>, <span class="string">"Thomas"</span>]</span><br><span class="line">console.log(arr.slice(<span class="number">1</span>, <span class="number">-2</span>));      // [<span class="string">"John"</span>, <span class="string">"Thomas"</span>, <span class="string">"James"</span>]</span><br><span class="line">console.log(arr.slice(<span class="number">-1</span>, <span class="number">-2</span>));     // []</span><br><span class="line">console.log(arr.slice(<span class="number">-2</span>, <span class="number">-1</span>));     // [<span class="string">"Adrew"</span>]</span><br><span class="line">console.log(arr);                   // [<span class="string">"Geroge"</span>, <span class="string">"John"</span>, <span class="string">"Thomas"</span>, <span class="string">"James"</span>, <span class="string">"Adrew"</span>, <span class="string">"Martin"</span>]</span><br></pre></td></tr></table></figure><h4 id="3-7-indexOf"><a href="#3-7-indexOf" class="headerlink" title="3.7 indexOf"></a>3.7 indexOf</h4><p><strong>定义和用法</strong> <br></p><p>indexOf()方法可返回某个指定的值在数组中首次出现的位置。从左往右找，找不到返回-1。</p><p><strong>语法</strong> <br></p><blockquote><p>arrayObject.indexOf(searchValue, fromIndex)</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>searchValue</td><td>必需。规定需检索的值。</td></tr><tr><td>fromIndex</td><td>可选的整数参数，开始查找的位置。<br>如果该索引值大于或等于数组长度，意味着不会在数组里查找，返回-1。<br>如果参数中提供的索引值是一个负值，则将其作为数组末尾的一个抵消，<br>即-1表示从最后一个元素开始查找，-2表示从倒数第二个元素开始查找 ，以此类推。 <br>注意：如果参数中提供的索引值是一个负值，并不改变其查找顺序，<br>查找顺序仍然是从前向后查询数组。如果抵消后的索引值仍小于0，<br>则整个数组都将会被查询。其默认值为0</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">6</span>);</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"George"</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">"John"</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">"Thomas"</span>;</span><br><span class="line">arr[<span class="number">3</span>] = <span class="string">"James"</span>;</span><br><span class="line">arr[<span class="number">4</span>] = <span class="string">"Adrew"</span>;</span><br><span class="line">arr[<span class="number">5</span>] = <span class="string">"Martin"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="string">'Thomas'</span>));             <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="string">'Thomas'</span>, <span class="number">2</span>));          <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="string">'Thomas'</span>, <span class="number">3</span>));          <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="string">'Thomas'</span>, <span class="number">-4</span>));         <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="string">'Thomas'</span>, <span class="number">-3</span>));         <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="string">'Peter'</span>));              <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><h4 id="3-8-lastIndexOf"><a href="#3-8-lastIndexOf" class="headerlink" title="3.8 lastIndexOf"></a>3.8 lastIndexOf</h4><p><strong>定义和用法</strong> <br></p><p>lastIndexOf()方法可返回某个指定的值在数组中首次出现的位置。从右往左找，找不到返回-1。</p><p><strong>语法</strong> <br></p><blockquote><p>arrayObject.indexOf(searchValue, fromIndex)</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>searchValue</td><td>必需。规定需检索的值。</td></tr><tr><td>fromIndex</td><td>可选的整数参数，从此位置开始逆向查找。<br>默认为数组的长度减 1，即整个数组都被查找。<br>如果该值大于或等于数组的长度，则整个数组会被查找。<br>如果为负值，将其视为从数组末尾向前的偏移。<br>即使该值为负，数组仍然会被从后向前查找。<br>如果该值为负时，其绝对值大于数组长度，则方法返回 -1，即数组不会被查找</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">6</span>);</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"George"</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">"John"</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">"Thomas"</span>;</span><br><span class="line">arr[<span class="number">3</span>] = <span class="string">"James"</span>;</span><br><span class="line">arr[<span class="number">4</span>] = <span class="string">"Adrew"</span>;</span><br><span class="line">arr[<span class="number">5</span>] = <span class="string">"Martin"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="string">'Thomas'</span>));             <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="string">'Thomas'</span>, <span class="number">2</span>));          <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="string">'Thomas'</span>, <span class="number">3</span>));          <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="string">'Thomas'</span>, <span class="number">1</span>));          <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="string">'Thomas'</span>, <span class="number">-4</span>));         <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="string">'Thomas'</span>, <span class="number">-3</span>));         <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="string">'Peter'</span>));              <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><h4 id="3-9-sort"><a href="#3-9-sort" class="headerlink" title="3.9 sort"></a>3.9 sort</h4><p><strong>定义和用法</strong> <br></p><p>sort()方法用于对数组的元素进行排序。</p><p><strong>语法</strong> <br></p><blockquote><p>arrayObject.sort(sortby)</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>sortby</td><td>可选。规定排序顺序。必须是函数。</td></tr></tbody></table><p><strong>返回值</strong> <br></p><p>对数组的引用。请注意，数组在原数组上进行排序，不生成副本。<br></p><p><strong>说明</strong> <br></p><p>如果调用该方法时没有使用参数，将按字母顺序对数组中的元素进行排序，说的更精确点，是按照字符编码的顺序进行排序。要实现这一点，首先应把数组的元素都转换成字符串（如有必要），以方便比较。</p><p>如果想按照其他标准进行排序，就需要提供比较函数，该函数要比较两个值，然后返回一个用于说明这两个值的相对顺序的数字。比较函数应该具有两个参数a和b，其返回值如下：</p><ul><li>若a小于b，在排序后的数组中a应该出现在b之前，则返回一个小于0的值。</li><li>若a等于b，则返回0。</li><li>若a大于b，则返回一个大于0的值。</li></ul><p>即顺序 return a - b; 倒序 return b - a;</p><p>a在b前返回负数，a在b后返回正数</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var arr = new <span class="symbol">Array</span>(<span class="number">6</span>);</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"10"</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">"5"</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">"40"</span>;</span><br><span class="line">arr[<span class="number">3</span>] = <span class="string">"25"</span>;</span><br><span class="line">arr[<span class="number">4</span>] = <span class="string">"1000"</span>;</span><br><span class="line">arr[<span class="number">5</span>] = <span class="string">"1"</span>;</span><br><span class="line"></span><br><span class="line">console.log(arr);           // [<span class="string">"10"</span>, <span class="string">"5"</span>, <span class="string">"40"</span>, <span class="string">"25"</span>, <span class="string">"1000"</span>, <span class="string">"1"</span>]</span><br><span class="line">console.log(arr.sort());    // [<span class="string">"1"</span>, <span class="string">"10"</span>, <span class="string">"1000"</span>, <span class="string">"25"</span>, <span class="string">"40"</span>, <span class="string">"5"</span>]</span><br><span class="line">console.log(arr);           // [<span class="string">"1"</span>, <span class="string">"10"</span>, <span class="string">"1000"</span>, <span class="string">"25"</span>, <span class="string">"40"</span>, <span class="string">"5"</span>]</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var arr = new Array(<span class="number">6</span>);</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"10"</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">"5"</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">"40"</span>;</span><br><span class="line">arr[<span class="number">3</span>] = <span class="string">"25"</span>;</span><br><span class="line">arr[<span class="number">4</span>] = <span class="string">"1000"</span>;</span><br><span class="line">arr[<span class="number">5</span>] = <span class="string">"1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">orderNumber</span> <span class="params">(a, b)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">descOrderNumber</span> <span class="params">(a, b)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> b - a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(arr);                           // [<span class="string">"10"</span>, <span class="string">"5"</span>, <span class="string">"40"</span>, <span class="string">"25"</span>, <span class="string">"1000"</span>, <span class="string">"1"</span>]</span><br><span class="line">console.<span class="built_in">log</span>(arr.<span class="built_in">sort</span>(orderNumber));         // [<span class="string">"1"</span>, <span class="string">"5"</span>, <span class="string">"10"</span>, <span class="string">"25"</span>, <span class="string">"40"</span>, <span class="string">"1000"</span>]</span><br><span class="line">console.<span class="built_in">log</span>(arr.<span class="built_in">sort</span>(descOrderNumber));     // [<span class="string">"1000"</span>, <span class="string">"40"</span>, <span class="string">"25"</span>, <span class="string">"10"</span>, <span class="string">"5"</span>, <span class="string">"1"</span>]</span><br><span class="line">console.<span class="built_in">log</span>(arr);                           // [<span class="string">"1000"</span>, <span class="string">"40"</span>, <span class="string">"25"</span>, <span class="string">"10"</span>, <span class="string">"5"</span>, <span class="string">"1"</span>]</span><br></pre></td></tr></table></figure><h4 id="3-10-splice"><a href="#3-10-splice" class="headerlink" title="3.10 splice"></a>3.10 splice</h4><p><strong>定义和用法</strong> <br></p><p>splice()方法向/从数组中添加/删除项目，然后返回被删除的项目。该方法会改变原始数组。</p><p><strong>语法</strong> <br></p><blockquote><p>arrayObject.splice(index, howmany, item1, ……, itemX)</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>index</td><td>必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。</td></tr><tr><td>howmany</td><td>必需。要删除的项目数量。如果设置为0，则不会删除项目。</td></tr><tr><td>item1,……,itemX</td><td>可选。向数组添加的新项目。</td></tr></tbody></table><p><strong>返回值</strong> <br></p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Array</td><td>包含被删除项目的新数组，如果有的话。</td></tr></tbody></table><p><strong>说明</strong> <br></p><p>splice()方法可删除从index处开始的0个或多个元素，并且用参数列表中声明的一个或多个值来替换那些被删除的元素。如果从arrayObject中删除了元素，则返回的是含有被删除的元素的数组。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var arr = new <span class="symbol">Array</span>(<span class="number">6</span>);</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"George"</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">"John"</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">"Thomas"</span>;</span><br><span class="line">arr[<span class="number">3</span>] = <span class="string">"James"</span>;</span><br><span class="line">arr[<span class="number">4</span>] = <span class="string">"Adrew"</span>;</span><br><span class="line">arr[<span class="number">5</span>] = <span class="string">"Martin"</span>;</span><br><span class="line"></span><br><span class="line">console.log(arr);                                   // [<span class="string">"Geroge"</span>, <span class="string">"John"</span>, <span class="string">"Thomas"</span>, <span class="string">"James"</span>, <span class="string">"Adrew"</span>, <span class="string">"Martin"</span>]  </span><br><span class="line">console.log(arr.splice(<span class="number">1</span>, <span class="number">1</span>, <span class="string">'Peter'</span>, <span class="string">'Sara'</span>));     // [<span class="string">"John"</span>]</span><br><span class="line">console.log(arr);                                   // [<span class="string">"Geroge"</span>, <span class="string">"Peter"</span>, <span class="string">"Sara"</span>, <span class="string">"Thomas"</span>, <span class="string">"James"</span>, <span class="string">"Adrew"</span>, <span class="string">"Martin"</span>]</span><br><span class="line">console.log(arr.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">'Ella'</span>));              // []</span><br><span class="line">console.log(arr);                                   // [<span class="string">"Geroge"</span>, <span class="string">"Ella"</span>, <span class="string">"Peter"</span>, <span class="string">"Sara"</span>, <span class="string">"Thomas"</span>, <span class="string">"James"</span>, <span class="string">"Adrew"</span>, <span class="string">"Martin"</span>]</span><br></pre></td></tr></table></figure><h4 id="3-11-toString"><a href="#3-11-toString" class="headerlink" title="3.11 toString"></a>3.11 toString</h4><p><strong>定义和用法</strong> <br></p><p>toString()方法可把数组转换为字符串，并返回结果。</p><p><strong>语法</strong> <br></p><blockquote><p>arrayObject.toString()</p></blockquote><p><strong>返回值</strong> <br></p><p>arrayObject的字符串表示。返回值与没有参数的join()方法返回的字符串相同。</p><p><strong>说明</strong> <br></p><p>当数组用于字符串环境时，JavaScript会调用这一方法将数组自动转换成字符串。但是在某些情况下，需要显式地调用该方法。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var arr = new Array(<span class="number">4</span>);</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"Geroge"</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">"John"</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">"Thomas"</span>;</span><br><span class="line">arr[<span class="number">3</span>] = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">console.log(arr.toString());    <span class="comment">// "Geroge,John,Thomas,20"</span></span><br></pre></td></tr></table></figure><h4 id="3-12-toLocaleString"><a href="#3-12-toLocaleString" class="headerlink" title="3.12 toLocaleString"></a>3.12 toLocaleString</h4><p><strong>定义和用法</strong> <br></p><p>toLocaleString()方法可把数组转换为本地字符串，并返回结果。</p><p><strong>语法</strong> <br></p><blockquote><p>arrayObject.toLocaleString()</p></blockquote><p><strong>返回值</strong> <br></p><p>arrayObject的本地字符串表示。</p><p><strong>说明</strong> <br></p><p>首先调用每个数组元素的 toLocaleString() 方法，然后使用地区特定的分隔符把生成的字符串连接起来，形成一个字符串。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var arr = new Array(<span class="number">4</span>);</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"Geroge"</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">"John"</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">"Thomas"</span>;</span><br><span class="line">arr[<span class="number">3</span>] = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">console.log(arr.toLocaleString());    <span class="comment">// "Geroge,John,Thomas,20"</span></span><br></pre></td></tr></table></figure><h4 id="3-13-valueOf"><a href="#3-13-valueOf" class="headerlink" title="3.13 valueOf"></a>3.13 valueOf</h4><p><strong>定义和用法</strong> <br></p><p>valueOf()方法返回Array对象的原始值。该原始值由Array对象派生的所有对象继承。valueOf(）方法通常由JavaScript在后台自动调用，并不显式地出现在代码中。</p><p><strong>语法</strong> <br></p><blockquote><p>arrayObject.valueOf()</p></blockquote><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var arr = new <span class="symbol">Array</span>(<span class="number">4</span>);</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"Geroge"</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">"John"</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">"Thomas"</span>;</span><br><span class="line">arr[<span class="number">3</span>] = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">console.log(arr.valueOf());    // [<span class="string">"Geroge"</span>, <span class="string">"John"</span>, <span class="string">"Thomas"</span>, <span class="number">20</span>]</span><br></pre></td></tr></table></figure><h4 id="3-14-forEach"><a href="#3-14-forEach" class="headerlink" title="3.14 forEach"></a>3.14 forEach</h4><p><strong>定义和用法</strong> <br></p><p>forEach()方法用于调用数组的每个元素，并将元素传递给回调函数。forEach()对于空数组是不会执行回调函数的。</p><p><strong>语法</strong> <br></p><blockquote><p>arrayObject.forEach(function (value, index, arr) {}, thisValue)</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>function(currentValue, index, arr)</td><td>必需。数组中每个元素需要调用的函数。<br>currentValue: 必需。当前元素。<br>index: 可选。当前元素的索引值。<br>arr: 可选。当前元素所属的数组对象。</td></tr><tr><td>thisValue</td><td>可选。传递给函数的值一般用’this’值。<br>如果这个参数为空，严格模式下把’undefined’会传递给’this’值，普通模式下传入’window’。</td></tr></tbody></table><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var arr = new Array(<span class="number">3</span>);</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"Geroge"</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">"John"</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">"Thomas"</span>;</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span> <span class="params">(value, index, arr)</span></span> &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(value);     // <span class="string">"Geroge"</span> <span class="string">"John"</span> <span class="string">"Thomas"</span></span><br><span class="line">    console.<span class="built_in">log</span>(index);     // <span class="number">0</span>        <span class="number">1</span>      <span class="number">2</span></span><br><span class="line">    console.<span class="built_in">log</span>(arr);       // [<span class="string">"Geroge"</span>, <span class="string">"John"</span>, <span class="string">"Thomas"</span>]</span><br><span class="line">    console.<span class="built_in">log</span>(this);      // window</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span> <span class="params">(value, index, arr)</span></span> &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(value);     // <span class="string">"Geroge"</span> <span class="string">"John"</span> <span class="string">"Thomas"</span></span><br><span class="line">    console.<span class="built_in">log</span>(index);     // <span class="number">0</span>        <span class="number">1</span>      <span class="number">2</span></span><br><span class="line">    console.<span class="built_in">log</span>(arr);       // [<span class="string">"Geroge"</span>, <span class="string">"John"</span>, <span class="string">"Thomas"</span>]</span><br><span class="line">    console.<span class="built_in">log</span>(this);      // [<span class="string">"Geroge"</span>, <span class="string">"John"</span>, <span class="string">"Thomas"</span>]</span><br><span class="line">&#125;, arr);</span><br></pre></td></tr></table></figure><h4 id="3-15-concat"><a href="#3-15-concat" class="headerlink" title="3.15 concat"></a>3.15 concat</h4><p><strong>定义和用法</strong> <br></p><p>concat()方法用于连接两个或多个数组。该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。</p><p><strong>语法</strong> <br></p><blockquote><p>arrayObject.concat(arrayX,arrayX,……,arrayX)</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>arrayX</td><td>必需。该参数可以是具体的值，也可以是数组对象。可以是任意多个。</td></tr></tbody></table><p><strong>返回值</strong> <br></p><p>返回一个新的数组。该数组是通过把所有arrayX参数添加到arrayObject中生成的。如果要进行concat()操作的参数是数组，那么添加的是数组中的元素，而不是数组。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">console.log(a.concat(<span class="number">4</span>, <span class="number">5</span>, [<span class="number">6</span>, <span class="number">7</span>], <span class="number">8</span>, <span class="number">9</span>));  <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure><h4 id="3-16-every"><a href="#3-16-every" class="headerlink" title="3.16 every"></a>3.16 every</h4><p><strong>定义和用法</strong> <br></p><p>every()方法用于检测数组所有元素是否都符合指定条件（通过函数提供）。<br>every()方法使用指定函数检测数组中的所有元素：</p><ul><li>如果数组中检测到有一个元素不满足，则整个表达式返回false，且剩余的元素不会再进行检测。</li><li>如果所有元素都满足条件，则返回true。</li></ul><p>注意：every()不会对空数组进行检测。<br>注意：every()不会改变原始数组。</p><p><strong>语法</strong> <br></p><blockquote><p>arrayObject.every(function (currentValue, index, arr) {}, thisValue)</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>function (currentValue, index, arr)</td><td>必需。函数，数组中的每个元素都会执行这个函数。<br>currentValue: 必需。当前元素。<br>index: 可选。当前元素的索引值。<br>arr: 可选。当前元素所属的数组对象。</td></tr><tr><td>thisValue</td><td>可选。对象作为该执行回调时使用，传递给函数。<br></td></tr></tbody></table><p><strong>说明</strong> <br></p><p>有一个返回false，则整个every()返回值为false，并且不会执行后续其他项的回调函数。<br>空数组的every()直接返回true。</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ages = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">24</span>, <span class="number">32</span>, <span class="number">40</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">result</span> = ages.every(<span class="function"><span class="keyword">function</span> <span class="params">(value, <span class="keyword">index</span>, arr)</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    return value &gt; 25;</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span>);</span></span><br><span class="line"></span><br><span class="line">console.log(<span class="keyword">result</span>);    <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">ages = [];</span><br><span class="line"><span class="keyword">result</span> = ages.every(<span class="function"><span class="keyword">function</span> <span class="params">(value, <span class="keyword">index</span>, arr)</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    return value &gt; 25;</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span>);</span></span><br><span class="line"></span><br><span class="line">console.log(<span class="keyword">result</span>);    <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="3-17-some"><a href="#3-17-some" class="headerlink" title="3.17 some"></a>3.17 some</h4><p><strong>定义和用法</strong> <br></p><p>some()方法用于检测数组所有元素是否满足指定条件（通过函数提供）。<br>every()方法会依次执行数组的每个元素：</p><ul><li>如果有一个元素满足条件，则表达式返回true，剩余的元素不会再执行检测。</li><li>如果没有满足条件的元素，则返回false。</li></ul><p>注意：some()不会对空数组进行检测。<br>注意：some()不会改变原始数组。</p><p><strong>语法</strong> <br></p><blockquote><p>arrayObject.some(function (currentValue, index, arr) {}, thisValue)</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>function (currentValue, index, arr)</td><td>必需。函数，数组中的每个元素都会执行这个函数。<br>currentValue: 必需。当前元素。<br>index: 可选。当前元素的索引值。<br>arr: 可选。当前元素所属的数组对象。</td></tr><tr><td>thisValue</td><td>可选。对象作为该执行回调时使用，传递给函数。<br></td></tr></tbody></table><p><strong>说明</strong> <br></p><p>有一个返回true，则整个some()返回值为true，并且不会执行后续其他项的回调函数。<br>空数组的some()直接返回false。</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ages = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">24</span>, <span class="number">32</span>, <span class="number">40</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">result</span> = ages.some(<span class="function"><span class="keyword">function</span> <span class="params">(value, <span class="keyword">index</span>, arr)</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    return value &gt; 25;</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span>);</span></span><br><span class="line"></span><br><span class="line">console.log(<span class="keyword">result</span>);    <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">ages = [];</span><br><span class="line"><span class="keyword">result</span> = ages.some(<span class="function"><span class="keyword">function</span> <span class="params">(value, <span class="keyword">index</span>, arr)</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    return value &gt; 25;</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span>);</span></span><br><span class="line"></span><br><span class="line">console.log(<span class="keyword">result</span>);    <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="3-18-filter"><a href="#3-18-filter" class="headerlink" title="3.18 filter"></a>3.18 filter</h4><p><strong>定义和用法</strong> <br></p><p>filter()方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p><p>注意：filter()不会对空数组进行检测。<br>注意：filter()不会改变原始数组。</p><p><strong>语法</strong> <br></p><blockquote><p>arrayObject.filter(function (currentValue, index, arr) {}, thisValue)</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>function (currentValue, index, arr)</td><td>必需。函数，数组中的每个元素都会执行这个函数。<br>currentValue: 必需。当前元素。<br>index: 可选。当前元素的索引值。<br>arr: 可选。当前元素所属的数组对象。</td></tr><tr><td>thisValue</td><td>可选。对象作为该执行回调时使用，传递给函数。<br></td></tr></tbody></table><p><strong>说明</strong> <br></p><p>将所有返回true的数组项取出来组成一个新的数组。</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ages = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">24</span>, <span class="number">32</span>, <span class="number">40</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">result</span> = ages.filter(<span class="function"><span class="keyword">function</span> <span class="params">(value, <span class="keyword">index</span>, arr)</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    return value &gt; 25;</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span>);</span></span><br><span class="line"></span><br><span class="line">console.log(<span class="keyword">result</span>);    <span class="comment">// [32, 40]</span></span><br><span class="line">console.log(ages);      <span class="comment">// [10, 20, 24, 32, 40]</span></span><br><span class="line"></span><br><span class="line">ages = [];</span><br><span class="line"><span class="keyword">result</span> = ages.filter(<span class="function"><span class="keyword">function</span> <span class="params">(value, <span class="keyword">index</span>, arr)</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    return value &gt; 25;</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span>);</span></span><br><span class="line"></span><br><span class="line">console.log(<span class="keyword">result</span>);    <span class="comment">// []</span></span><br></pre></td></tr></table></figure><h4 id="3-19-reverse"><a href="#3-19-reverse" class="headerlink" title="3.19 reverse"></a>3.19 reverse</h4><p><strong>定义和用法</strong> <br></p><p>reverse()方法用于颠倒数组中元素的顺序。会改变原数组。</p><p><strong>语法</strong> <br></p><blockquote><p>arrayObject.reverse()</p></blockquote><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> arr = <span class="built_in">new</span> Array(<span class="number">3</span>);</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"George"</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">"John"</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">"Thomas"</span>;</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(arr);               // [<span class="string">"Geroge"</span>, <span class="string">"John"</span>, <span class="string">"Thomas"</span>]</span><br><span class="line">console.<span class="built_in">log</span>(arr.<span class="built_in">reverse</span>());     // [<span class="string">"Thomas"</span>, <span class="string">"John"</span>, <span class="string">"Geroge"</span>]</span><br><span class="line">console.<span class="built_in">log</span>(arr);               // [<span class="string">"Thomas"</span>, <span class="string">"John"</span>, <span class="string">"Geroge"</span>]</span><br></pre></td></tr></table></figure><h4 id="3-20-map"><a href="#3-20-map" class="headerlink" title="3.20 map"></a>3.20 map</h4><p><strong>定义和用法</strong> <br></p><p>map()方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。map()方法按照原始数组元素顺序依次处理元素。</p><p>注意：map()不会对空数组进行检测。<br>注意：map()不会改变原始数组。</p><p><strong>语法</strong> <br></p><blockquote><p>arrayObject.map(function (currentValue, index, arr) {}, thisValue)</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>function (currentValue, index, arr)</td><td>必需。函数，数组中的每个元素都会执行这个函数。<br>currentValue: 必需。当前元素。<br>index: 可选。当前元素的索引值。<br>arr: 可选。当前元素所属的数组对象。</td></tr><tr><td>thisValue</td><td>可选。对象作为该执行回调时使用，传递给函数。<br></td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">65</span>, <span class="number">20</span>, <span class="number">11</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = numbers.map(<span class="function"><span class="keyword">function</span> (<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(numbers);   <span class="comment">// [65, 20, 11, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);       <span class="comment">// [130, 40, 22, 10]</span></span><br></pre></td></tr></table></figure><h4 id="3-21-reduce"><a href="#3-21-reduce" class="headerlink" title="3.21 reduce"></a>3.21 reduce</h4><p><strong>定义和用法</strong> <br></p><p>reduce()方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</p><p>注意：reduce()对于空数组是不会执行回调函数的。</p><p><strong>语法</strong> <br></p><blockquote><p>arrayObject.reduce(function (total, currentValue, currentIndex, arr) {}, initialValue)</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>function (total, currentValue, currentIndex, arr)</td><td>必需。函数，数组中的每个元素都会执行这个函数。<br>total: 必需。初始值，或者计算结束后的返回值。<br>currentValue: 必需。当前元素。<br>currentIndex: 可选。当前元素的索引。<br>arr: 可选。当前元素所属的数组对象。</td></tr><tr><td>initialValue</td><td>可选。传递给函数的初始值。<br></td></tr></tbody></table><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [15, 2, 1, 7];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">total</span> = numbers.reduce(function (<span class="keyword">total</span>, currentValue) &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="keyword">total</span>);             <span class="comment">// 15 17 18 25</span></span><br><span class="line">    console.<span class="built_in">log</span>(currentValue);      <span class="comment">// 2  1  7</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">total</span> + currentValue;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">total</span>);                 <span class="comment">// 25</span></span><br><span class="line">console.<span class="built_in">log</span>(numbers);               <span class="comment">// [15, 2, 1, 7]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">total</span> = numbers.reduce(function (<span class="keyword">total</span>, currentValue) &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="keyword">total</span>);             <span class="comment">// 20 35 37 38 45</span></span><br><span class="line">    console.<span class="built_in">log</span>(currentValue);      <span class="comment">// 15 2  1  7</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">total</span> + currentValue;</span><br><span class="line">&#125;, 20);</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">total</span>);                 <span class="comment">// 45</span></span><br><span class="line">console.<span class="built_in">log</span>(numbers);               <span class="comment">// [15, 2, 1, 7]</span></span><br></pre></td></tr></table></figure><h4 id="3-22-reduceRight"><a href="#3-22-reduceRight" class="headerlink" title="3.22 reduceRight"></a>3.22 reduceRight</h4><p><strong>定义和用法</strong> <br></p><p>reduceRight()方法的功能和reduce()功能是一样的，不同的是reduceRight()从数组的末尾向前将数组中的数组项做累加。</p><p>注意：reduceRight()对于空数组是不会执行回调函数的。</p><p><strong>语法</strong> <br></p><blockquote><p>arrayObject.reduceRight(function (total, currentValue, currentIndex, arr) {}, initialValue)</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>function (total, currentValue, currentIndex, arr)</td><td>必需。函数，数组中的每个元素都会执行这个函数。<br>total: 必需。初始值，或者计算结束后的返回值。<br>currentValue: 必需。当前元素。<br>currentIndex: 可选。当前元素的索引。<br>arr: 可选。当前元素所属的数组对象。</td></tr><tr><td>initialValue</td><td>可选。传递给函数的初始值。<br></td></tr></tbody></table><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [15, 2, 1, 7];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">total</span> = numbers.reduceRight(function (<span class="keyword">total</span>, currentValue) &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="keyword">total</span>);             <span class="comment">// 7 8 10 25</span></span><br><span class="line">    console.<span class="built_in">log</span>(currentValue);      <span class="comment">// 1 2 15</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">total</span> + currentValue;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">total</span>);                 <span class="comment">// 25</span></span><br><span class="line">console.<span class="built_in">log</span>(numbers);               <span class="comment">// [15, 2, 1, 7]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">total</span> = numbers.reduceRight(function (<span class="keyword">total</span>, currentValue) &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="keyword">total</span>);             <span class="comment">// 20 27 28 30 45</span></span><br><span class="line">    console.<span class="built_in">log</span>(currentValue);      <span class="comment">// 7  1  2  15</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">total</span> + currentValue;</span><br><span class="line">&#125;, 20);</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">total</span>);                 <span class="comment">// 45</span></span><br><span class="line">console.<span class="built_in">log</span>(numbers);               <span class="comment">// [15, 2, 1, 7]</span></span><br></pre></td></tr></table></figure><h2 id="三、结束"><a href="#三、结束" class="headerlink" title="三、结束"></a>三、结束</h2><p>本文会同步到我的<a href="https://blog.liuxuan.site" target="_blank" rel="noopener">个人博客</a>，完整代码可以到我的<a href="https://github.com/leocoder351/data-structure" target="_blank" rel="noopener">github仓库查看</a>，如果对你有帮助的话欢迎点一个Star~~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.liuxuan.site/blog/20180725/array.jpg?imageView2/1/w/1000/h/400&quot; alt=&quot;array&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、创建数组&quot;&gt;&lt;a href=&quot;#一、创建数组&quot; class=&quot;headerlink&quot; title=&quot;一、创建数组&quot;&gt;&lt;/a&gt;一、创建数组&lt;/h2&gt;&lt;h4 id=&quot;1-1-使用Array构造函数&quot;&gt;&lt;a href=&quot;#1-1-使用Array构造函数&quot; class=&quot;headerlink&quot; title=&quot;1.1 使用Array构造函数&quot;&gt;&lt;/a&gt;1.1 使用Array构造函数&lt;/h4&gt;&lt;figure class=&quot;highlight haxe&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Array&lt;/span&gt;(); &lt;span class=&quot;comment&quot;&gt;// 创建一个空数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);   &lt;span class=&quot;comment&quot;&gt;// 创建一个包含20项的数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr3 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;liu&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;wang&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;li&#39;&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;// 创建一个包含3个字符串的数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;1-2-使用数组字面量表示法&quot;&gt;&lt;a href=&quot;#1-2-使用数组字面量表示法&quot; class=&quot;headerlink&quot; title=&quot;1.2 使用数组字面量表示法&quot;&gt;&lt;/a&gt;1.2 使用数组字面量表示法&lt;/h4&gt;&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr1 = [];  &lt;span class=&quot;comment&quot;&gt;// 创建一个空数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr2 = [&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];    &lt;span class=&quot;comment&quot;&gt;// 创建一个包含1项的数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr3 = [&lt;span class=&quot;string&quot;&gt;&#39;liu&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;wang&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;li&#39;&lt;/span&gt;];   &lt;span class=&quot;comment&quot;&gt;// 创建一个包含3个字符串的数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="//blog.liuxuan.site/categories/JavaScript/"/>
    
    
      <category term="Javascript" scheme="//blog.liuxuan.site/tags/Javascript/"/>
    
      <category term="数据结构" scheme="//blog.liuxuan.site/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="//blog.liuxuan.site/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数组" scheme="//blog.liuxuan.site/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript异步编程</title>
    <link href="//blog.liuxuan.site/2018/07/20/javascript_asynchronous_programming/"/>
    <id>//blog.liuxuan.site/2018/07/20/javascript_asynchronous_programming/</id>
    <published>2018-07-20T12:36:00.000Z</published>
    <updated>2018-07-25T15:13:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://image.liuxuan.site/blog/20180720/async_logo.jpeg?imageView2/1/w/1000/h/400" alt="JavaScript异步编程"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从我们一开始学习JavaScript的时候就听到过一段话：<strong>JS是单线程的，天生异步，适合IO密集型，不适合CPU密集型</strong>。但是，多数JavaScript开发者从来没有认真思考过自己程序中的异步到底是怎么出现的，以及为什么会出现，也没有探索过处理异步的其他方法。到目前为止，还有很多人坚持认为回调函数就完全够用了。</p><p>但是，随着JavaScript面临的需求越来越多，它可以运行在浏览器、服务器、甚至是嵌入式设备上，为了满足这些需求，JavaScript的规模和复杂性也在持续增长，使用回调函数来管理异步也越来越让人痛苦，这一切，都需要更强大、更合理的异步方法，通过这篇文章，我想对目前已有JavaScript异步的处理方式做一个总结，同时试着去解释为什么会出现这些技术，让大家对JavaScript异步编程有一个更宏观的理解，让知识变得更体系化一些。</p><p>本文也会同步到我的<a href="http://blog.liuxuan.site" target="_blank" rel="noopener">个人网站</a>。</p><a id="more"></a><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Step1-回调函数"><a href="#Step1-回调函数" class="headerlink" title="Step1 - 回调函数"></a>Step1 - 回调函数</h2><p>回调函数大家肯定都不陌生，从我们写一段最简单的定时器开始：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Time out'</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></p><p>定时器里面的匿名函数就是一个回调函数，因为在JS中函数是一等公民，所以它可以像其他变量一样作为参数进行传递。这样看来，通过回调函数来处理异步挺好的，写着也顺手，为什么要用别的方法呢？</p><p>我们来看这样一个需求：</p><p><img src="http://image.liuxuan.site/blog/20180720/wxlogin.png" alt="http-1"></p><p>上面是微信小程序的登录时序图，我们的需求和它类似但又有些差别，想要获取一段业务数据，整个过程分为3步：</p><ol><li>调用秘钥接口，获取key</li><li>携带key调用登录接口，获取token和userId</li><li>携带token和userId调用业务接口，获取数据</li></ol><p>可能上述步骤和实际业务中的有些出入，但是却可以用来说明问题，请大家谅解。</p><p><strong>我们写一段代码来实现上述需求：</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">let key, token, userId;</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    <span class="built_in">type</span>: <span class="string">'get'</span>,</span><br><span class="line">    url: <span class="string">'http://localhost:3000/apiKey'</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span></span> &#123;</span><br><span class="line">        key = data;</span><br><span class="line">        </span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            <span class="built_in">type</span>: <span class="string">'get'</span>,</span><br><span class="line">            url: <span class="string">'http://localhost:3000/getToken'</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                key: key</span><br><span class="line">            &#125;,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span></span> &#123;</span><br><span class="line">                token = data.token;</span><br><span class="line">                userId = data.userId;</span><br><span class="line">                </span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    <span class="built_in">type</span>: <span class="string">'get'</span>,</span><br><span class="line">                    url: <span class="string">'http://localhost:3000/getData'</span>,</span><br><span class="line">                    data: &#123;</span><br><span class="line">                        token: token,</span><br><span class="line">                        userId: userId</span><br><span class="line">                    &#125;,</span><br><span class="line">                    success: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span></span> &#123;</span><br><span class="line">                        console.<span class="built_in">log</span>(<span class="string">'业务数据：'</span>, data);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="built_in">error</span>: <span class="function"><span class="keyword">function</span> <span class="params">(err)</span></span> &#123;</span><br><span class="line">                        console.<span class="built_in">log</span>(err);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="built_in">error</span>: <span class="function"><span class="keyword">function</span> <span class="params">(err)</span></span> &#123;</span><br><span class="line">                console.<span class="built_in">log</span>(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">error</span>: <span class="function"><span class="keyword">function</span> <span class="params">(err)</span></span> &#123;</span><br><span class="line">        console.<span class="built_in">log</span>(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以看到，整段代码充满了回调嵌套，代码不仅在纵向扩展，横向也在扩展。我相信，对于任何人来说，调试起来都会很困难，我们不得不从一个函数跳到下一个，再跳到下一个，在整个代码中跳来跳去以查看流程，而最终的结果藏在整段代码的中间位置。真实的JavaScript程序代码可能要混乱的多，使得这种追踪难度会成倍增加。这就是我们常说的<strong>回调地狱（Callback Hell）</strong>。</p><p>为什么会出现这种现象？</p><p><strong>如果某个业务，依赖于上层业务的数据，上层业务又依赖于更上一层的数据，我们还采用回调的方式来处理异步的话，就会出现回调地狱</strong>。</p><p>大脑对于事情的计划方式是线性的、阻塞的、单线程的语义，但是回调表达异步流程的方式是非线性的、非顺序的，这使得正确推导这样的代码的难度很大，很容易产生Bug。</p><p>这里我们引出了回调函数解决异步的<strong>第1个问题：回调地狱</strong>。</p><p>回调函数还会存在别的问题吗？<br>让我们再深入思考一下回调的概念：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    ...</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> <span class="params">(<span class="rest_arg">...) &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="rest_arg">        // C</span></span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;)</span></span>;</span><br><span class="line"><span class="comment">// B</span></span><br></pre></td></tr></table></figure></p><p>A和B发生于现在，在JavaScript主程序的直接控制之下，而C会延迟到将来发生，并且是在第三方的控制下，在本例中就是函数$.ajax(…)。从根本上来说，这种控制的转移通常不会给程序带来很多问题。</p><p>但是，请不要被这个小概率迷惑而认为这种控制切换不是什么大问题。实际上，这是回调驱动设计最严重（也是最微妙）的问题。它以这样一个思路为中心：有时候ajax(…)，也就是你交付回调函数的第三方不是你编写的代码，也不在你的直接控制之下，它是某个第三方提供的工具。</p><p>这种情况称为<strong>控制反转</strong>，也就是把自己程序一部分的执行控制交给某个第三方，在你的代码和第三方工具直接有一份并没有明确表达的契约。</p><p>既然是无法控制的第三方在执行你的回调函数，那么就有可能存在以下问题，当然通常情况下是不会发生的：</p><ol><li>调用回调过早</li><li>调用回调过晚</li><li>调用回调次数太多或者太少</li><li>未能把所需的参数成功传给你的回调函数</li><li>吞掉可能出现的错误或异常</li><li>……</li></ol><p>这种控制反转会导致信任链的完全断裂，如果你没有采取行动来解决这些控制反转导致的信任问题，那么你的代码已经有了隐藏的Bug，尽管我们大多数人都没有这样做。</p><p>这里，我们引出了回调函数处理异步的<strong>第二个问题：控制反转</strong>。</p><p>综上，回调函数处理异步流程存在2个问题：</p><p><strong>1. 缺乏顺序性： 回调地狱导致的调试困难，和大脑的思维方式不符</strong><br><strong>2. 缺乏可信任性： 控制反转导致的一系列信任问题</strong></p><p>那么如何来解决这两个问题，先驱者们开始了探索之路……</p><h2 id="Step2-Promise"><a href="#Step2-Promise" class="headerlink" title="Step2 - Promise"></a>Step2 - Promise</h2><p><strong>开门见山，Promise解决的是回调函数处理异步的第2个问题：控制反转</strong>。</p><p>至于Promise是什么，大家肯定都有所了解，这里是<a href="https://promisesaplus.com/" target="_blank" rel="noopener">PromiseA+规范</a>，ES6的Promise也好，jQuery的Promise也好，不同的库有不同的实现，但是大家遵循的都是同一套规范，所以，Promise并不指特定的某个实现，<strong>它是一种规范，是一套处理JavaScript异步的机制</strong>。</p><p>我们把上面那个多层回调嵌套的例子用Promise的方式重构：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> getKeyPromise = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Promsie(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">'get'</span>,</span><br><span class="line">            url: <span class="string">'http://localhost:3000/apiKey'</span>,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">               <span class="keyword">let</span> key = data;</span><br><span class="line">               resolve(key);         </span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> getTokenPromise = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Promsie(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">'get'</span>,</span><br><span class="line">            url: <span class="string">'http://localhost:3000/getToken'</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                key: key</span><br><span class="line">            &#125;,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                resolve(data);         </span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> getDataPromise = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> token = data.token;</span><br><span class="line">    <span class="keyword">let</span> userId = data.userId;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Promsie(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">'get'</span>,</span><br><span class="line">            url: <span class="string">'http://localhost:3000/getData'</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                token: token,</span><br><span class="line">                userId: userId</span><br><span class="line">            &#125;,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                resolve(data);         </span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">getKeyPromise()</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getTokenPromise(key);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getDataPromise(data);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'业务数据：'</span>, data);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p><p>可以看到，Promise在一定程度上其实改善了回调函数的书写方式，最明显的一点就是去除了横向扩展，无论有再多的业务依赖，通过多个then(…)来获取数据，让代码只在纵向进行扩展；另外一点就是逻辑性更明显了，将异步业务提取成单个函数，整个流程可以看到是一步步向下执行的，依赖层级也很清晰，最后需要的数据是在整个代码的最后一步获得。</p><p>所以，Promise在一定程度上解决了回调函数的书写结构问题，但回调函数依然在主流程上存在，只不过都放到了then(…)里面，和我们大脑顺序线性的思维逻辑还是有出入的。</p><p>这里我想主要讨论的是，<strong>Promise是如何解决控制反转带来的信任缺失问题。</strong></p><p>首先明确一点，Promise可以保证以下情况，引用自<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises" target="_blank" rel="noopener">JavaScript | MDN</a>：</p><blockquote><ol><li>在JavaScript事件队列的当前运行完成之前，回调函数永远不会被调用</li><li>通过 .then 形式添加的回调函数，甚至都在异步操作完成之后才被添加的函数，都会被调用</li><li>通过多次调用 .then，可以添加多个回调函数，它们会按照插入顺序并且独立运行 </li></ol></blockquote><p>下面我们针对前面提过的回调函数处理异步导致的一系列信任问题来讨论，如果是用Promise来处理，是否还会存在这些问题，当然前提是实现的Promise完全遵循<strong><a href="https://promisesaplus.com/" target="_blank" rel="noopener">PromiseA+规范</a></strong>。</p><h3 id="调用过早"><a href="#调用过早" class="headerlink" title="调用过早"></a>调用过早</h3><p>当使用回调函数的时候，我们无法保证或者不知道第三方对于回调函数的调用是何种形式的，如果它在某种情况下是立即完成以同步的方式来调用，那可能就会导致我们代码中的逻辑错误。</p><p>但是，根据<a href="https://promisesaplus.com/" target="_blank" rel="noopener">PromiseA+规范</a>，Promise就不必担心这种问题，因为即使是立即完成的Promise（类似于new Promise(function (resolve, reject) {resolve(2);})），也无法被同步观察到。</p><p>也就是说，对一个Promise调用then(…)的时候，即使这个Promise已经决议，提供给then(…)的回调也总会在JavaScript事件队列的当前运行完成后，再被调用，即异步调用。</p><h3 id="调用过晚"><a href="#调用过晚" class="headerlink" title="调用过晚"></a>调用过晚</h3><p>当Promise创建对象调用resolve(…)或reject(…)时，这个Promise通过then(…)注册的回调函数就会在下一个异步时间点上被触发。</p><p>并且，这个Promise上的多个通过then(…)注册的回调都会在下一个异步时间点上被依次调用，这些回调中的任意一个都无法影响或延误对其他回调的调用。</p><p>举例如下：<br><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">p.<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">()</span> &#123;</span></span><br><span class="line">    p.<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">()</span> &#123;</span></span><br><span class="line">        console.<span class="built_in">log</span>(<span class="string">'C'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">'A'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>(funtion () &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">'B'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印 A B C</span></span><br></pre></td></tr></table></figure></p><p>通过这个例子可以看到，C无法打断或抢占B，所以Promise没有调用过晚的现象，只要你注册了then(…)，就肯定会按顺序依次调用，因为这就是Promise的运作方式。</p><h3 id="回调未调用"><a href="#回调未调用" class="headerlink" title="回调未调用"></a>回调未调用</h3><p>没有任何东西（甚至JavaScript错误）能阻止Promise向你通知它的决议（如果它决议了的话）。如果你对一个Promise注册了一个成功回调和拒绝回调，那么Promise在决议的时候总会调用其中一个。</p><p>当然，如果你的回调函数本身包含JavaScript错误，那可能就会看不到你期望的结果，但实际上回调还是被调用了。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p.<span class="keyword">then</span>(<span class="keyword">function</span> <span class="title"></span>(data) &#123;</span><br><span class="line">    console.log(data);</span><br><span class="line">    foo.bar();       // 这里没有定义foo，所以这里会报<span class="keyword">Type</span> <span class="type">Error, </span>foo <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line">&#125;, <span class="keyword">function</span> <span class="title"></span>(err) &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="调用次数太多或者太少"><a href="#调用次数太多或者太少" class="headerlink" title="调用次数太多或者太少"></a>调用次数太多或者太少</h3><p>根据<a href="https://promisesaplus.com/" target="_blank" rel="noopener">PromiseA+规范</a>，回调被调用的正确次数应该是1次。“太少”就是不调用，前面已经解释过了。</p><p>“太多”的情况很容易解释，Promise的定义方式使得它只能被决议一次。如果处于多种原因，Promise创建代码试图调用多次resolve(…)或reject(…)，或者试图两者都调用，那么这个Promise将只会接受第一次决议，并默默忽略任何后续调用。</p><p>由于Promise只能被决议一次，所以任何通过then(…)注册的回调就只会被调用一次。</p><h3 id="未能传递参数值"><a href="#未能传递参数值" class="headerlink" title="未能传递参数值"></a>未能传递参数值</h3><p>如果你没有把任何值传递给resolve(…)或reject(…)，那么这个值就是<strong>undefined</strong>。但不管这个值是什么，它都会被传给所有注册在then(…)中的回调函数。</p><p>如果使用多个参数调用resolve(…)或reject(…)，那么第一个参数之后的所有参数都会被忽略。如果要传递多个值，你就必须把它们封装在单个值中进行传递，比如一个数组或对象。</p><h3 id="吞掉可能出现的错误或异常"><a href="#吞掉可能出现的错误或异常" class="headerlink" title="吞掉可能出现的错误或异常"></a>吞掉可能出现的错误或异常</h3><p>如果在Promise的创建过程中或在查看其决议结果的过程中的任何时间点上，出现了一个JavaScript异常错误，比如一个TypeError或ReferenceError，这个异常都会被捕捉，并且会使这个Promise被拒绝。</p><p>举例如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    foo.bar();    <span class="comment">// foo未定义</span></span><br><span class="line">    resolve(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);    <span class="comment">// 永远也不会到达这里</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);    <span class="comment">// err将会是一个TypeError异常对象来自foo.bar()这一行</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>foo.bar()中发生的JavaScript异常导致了Promise的拒绝，你可以捕捉并对其作出响应。</p><h3 id="不是所有的thenable都可以信任"><a href="#不是所有的thenable都可以信任" class="headerlink" title="不是所有的thenable都可以信任"></a>不是所有的thenable都可以信任</h3><p>到目前为止，我们讨论了使用Promise可以避免上述多种由控制反转导致的信任问题。但是，你肯定也注意到了，Promise并没有完全摆脱回调，它只是改变了传递回调的位置。我们并不是把回调传递给foo(…)让第三方去执行，而是从foo(…)得到某个东西（Promise对象），然后把回调传递给这个东西。</p><p>但是，为什么这就比单纯使用回调更值得信任呢？如何能够确定返回的这个东西实际上就是一个可信任的Promise呢？</p><p>Promise对于这个问题已经有了解决方案，ES6实现的Promise的解决方案就是<strong>Promise.resolve(…)</strong>。</p><p>如果向Promise.resolve(…)传递一个非Promise，非thenable得立即值，就会得到一个用这个值填充的Promise。</p><p>举例如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    resolve(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="built_in">Promise</span>.resolve(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里p1和p2的效果是一样的</span></span><br></pre></td></tr></table></figure></p><p>而如果向Promise.resolve(…)传递一个真正的Promise，就只会返回同一个Promise。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">Promise</span>.resolve(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="built_in">Promise</span>.resolve(p1);</span><br><span class="line"></span><br><span class="line">p1 === p2;    <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>更重要的是，如果向Promise.resolve(…)传递了一个非Promise的thenable值，前者就会试图展开这个值，而且展开过程中会持续到提取出一个具体的非类Promise的最终值。</p><p>举例如下：<br><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var p = &#123;</span><br><span class="line">    <span class="keyword">then</span>: <span class="function"><span class="keyword">function</span> <span class="params">(cb, errCb)</span> &#123;</span></span><br><span class="line">        cb(<span class="number">2</span>);</span><br><span class="line">        errCb(<span class="string">'haha'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这可以工作，因为函数是一等公民，可以当做参数进行传递</span></span><br><span class="line">p.<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">(data)</span> &#123;</span></span><br><span class="line">    console.<span class="built_in">log</span>(data);    <span class="comment">// 2</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> <span class="params">(err)</span> &#123;</span></span><br><span class="line">    console.<span class="built_in">log</span>(err);    <span class="comment">// haha</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>这个p是一个thenable，但不是一个真正的Promise，其行为和Promise并不完全一致，它同时触发了成功回调和拒绝回调，它是不可信任的。</p><p>尽管如此，我们还是都可以把这样的p传给Promise.resolve(…)，然后就会得到期望中的规范化后的安全结果：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(p)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);    <span class="comment">// 2</span></span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);    <span class="comment">// 永远不会到达这里</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p><p>因为前面讨论过，一个Promise只接受一次决议，如果多次调用resolve(…)或reject(…)，后面的会被自动忽略。</p><p>Promise.resolve(…)可以接受任何thenable，将其解封为它的非thenable值。从Promise.resolve(…)得到的是一个真正的Promise，是一个可以信任的值。如果你传入的已经是真正的Promise，那么你得到的就是它本身，所以通过Promise.resolve(…)过滤来获得可信任性完全没有坏处。</p><p><strong>综上，我们明确了，使用Promise处理异步可以解决回调函数控制反转带来的一系列信任问题</strong>。<br><strong>很好，我们又向前迈了一步</strong>。</p><h2 id="Step3-生成器Gererator"><a href="#Step3-生成器Gererator" class="headerlink" title="Step3 - 生成器Gererator"></a>Step3 - 生成器Gererator</h2><p>在Step1中，我们确定了用回调表达异步流程的两个关键问题：</p><ol><li>基于回调的异步不符合大脑对任务步骤的规范方式</li><li>由于控制反转，回调并不是可信任的</li></ol><p>在Step2中，我们详细介绍了Promise是如何把回调的控制反转又反转过来，恢复了可信任性。</p><p>现在，我们把注意力转移到一种顺序、看似同步的异步流程控制表达风格，这就是<strong>ES6中的生成器（Gererator）</strong>。</p><h3 id="可迭代协议和迭代器协议"><a href="#可迭代协议和迭代器协议" class="headerlink" title="可迭代协议和迭代器协议"></a>可迭代协议和迭代器协议</h3><p>了解Generator之前，必须先了解ES6新增的两个协议：<strong>可迭代协议</strong>和<strong>迭代器协议</strong>。</p><h4 id="可迭代协议"><a href="#可迭代协议" class="headerlink" title="可迭代协议"></a>可迭代协议</h4><p><strong>可迭代协议</strong>运行JavaScript对象去定义或定制它们的迭代行为，例如（定义）在一个for…of结构中什么值可以被循环（得到）。以下内置类型都是内置的可迭代对象并且有默认的迭代行为：</p><ol><li>Array</li><li>Map</li><li>Set</li><li>String</li><li>TypedArray</li><li>函数的Arguments对象</li><li>NodeList对象</li></ol><p><strong>注意，Object不符合可迭代协议</strong>。</p><p>为了变成可迭代对象，一个对象必须实现@@iterator方法，意思是这个对象（或者它原型链prototype chain上的某个对象）必须有一个名字是Symbol.iterator的属性：</p><table><thead><tr><th>属性</th><th>值</th></tr></thead><tbody><tr><td>[Symbol.iterator]</td><td>返回一个对象的无参函数，被返回对象符合迭代器协议</td></tr></tbody></table><p>当一个对象需要被迭代的时候（比如开始用于一个for…of循环中），它的@@iterator方法被调用并且无参数，然后返回一个用于在迭代中获得值的迭代器。</p><h4 id="迭代器协议"><a href="#迭代器协议" class="headerlink" title="迭代器协议"></a>迭代器协议</h4><p><strong>迭代器协议</strong>定义了一种标准的方式来产生一个有限或无限序列的值。<br>当一个对象被认为是一个迭代器时，它实现了一个next()的方法并且拥有以下含义：<br>| 属性 | 值 |<br>|——|—|<br>| next | 返回一个对象的无参函数，被返回对象拥有两个属性：<br> <strong>1. done（boolean）</strong><br> - 如果迭代器已经经过了被迭代序列时为true。这时value可能描述了该迭代器的返回值 <br> - 如果迭代器可以产生序列中的下一个值，则为false。这等效于连同done属性也不指定。 <br> <strong>2. value</strong> - 迭代器返回的任何JavaScript值。done为true时可以忽略。 |</p><p>使用可迭代协议和迭代器协议的例子：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">'hello'</span>;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 可迭代协议使用<span class="keyword">for</span>...of访问</span><br><span class="line">typeof str[Symbol.iterator];    <span class="regexp">//</span> <span class="string">'function'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (var s of str) &#123;</span><br><span class="line">    console.log(s);    <span class="regexp">//</span> 分别打印 <span class="string">'h'</span>、<span class="string">'e'</span>、<span class="string">'l'</span>、<span class="string">'l'</span>、<span class="string">'o'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 迭代器协议<span class="keyword">next</span>方法</span><br><span class="line">var iterator = str[Symbol.iterator]();</span><br><span class="line"></span><br><span class="line">iterator.<span class="keyword">next</span>();    <span class="regexp">//</span> &#123;value: <span class="string">"h"</span>, done: false&#125;</span><br><span class="line">iterator.<span class="keyword">next</span>();    <span class="regexp">//</span> &#123;value: <span class="string">"e"</span>, done: false&#125;</span><br><span class="line">iterator.<span class="keyword">next</span>();    <span class="regexp">//</span> &#123;value: <span class="string">"l"</span>, done: false&#125;</span><br><span class="line">iterator.<span class="keyword">next</span>();    <span class="regexp">//</span> &#123;value: <span class="string">"l"</span>, done: false&#125;</span><br><span class="line">iterator.<span class="keyword">next</span>();    <span class="regexp">//</span> &#123;value: <span class="string">"o"</span>, done: false&#125;</span><br><span class="line">iterator.<span class="keyword">next</span>();    <span class="regexp">//</span> &#123;value: undefined, done: true&#125;</span><br></pre></td></tr></table></figure></p><p>我们自己实现一个对象，让其符合<strong>可迭代协议</strong>和<strong>迭代器协议</strong>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> something = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nextVal;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">// 可迭代协议，供for...of消费</span></span><br><span class="line">        [<span class="built_in">Symbol</span>.iterator]: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 迭代器协议，实现next()方法</span></span><br><span class="line">        next: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (nextVal === <span class="literal">undefined</span>) &#123;</span><br><span class="line">                nextVal = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nextVal = (<span class="number">3</span> * nextVal) + <span class="number">6</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">value</span>: nextVal, <span class="attr">done</span>: <span class="literal">false</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">something.next().value;    <span class="comment">// 1</span></span><br><span class="line">something.next().value;    <span class="comment">// 9</span></span><br><span class="line">something.next().value;    <span class="comment">// 33</span></span><br><span class="line">something.next().value;    <span class="comment">// 105</span></span><br></pre></td></tr></table></figure></p><h3 id="用Generator实现异步"><a href="#用Generator实现异步" class="headerlink" title="用Generator实现异步"></a>用Generator实现异步</h3><p>如果我们用Generator改写上面回调嵌套的例子会是什么样的呢？见代码：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getKey</span> <span class="params">()</span></span> &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="built_in">type</span>: <span class="string">'get'</span>,</span><br><span class="line">        url: <span class="string">'http://localhost:3000/apiKey'</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span></span> &#123;</span><br><span class="line">            key = data;</span><br><span class="line">            it.<span class="built_in">next</span>(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">error</span>: <span class="function"><span class="keyword">function</span> <span class="params">(err)</span></span> &#123;</span><br><span class="line">            console.<span class="built_in">log</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getToken</span> <span class="params">(key)</span></span> &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="built_in">type</span>: <span class="string">'get'</span>,</span><br><span class="line">        url: <span class="string">'http://localhost:3000/getToken'</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            key: key</span><br><span class="line">        &#125;,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span></span> &#123;</span><br><span class="line">            loginData = data;</span><br><span class="line">            it.<span class="built_in">next</span>(loginData);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">error</span>: <span class="function"><span class="keyword">function</span> <span class="params">(err)</span></span> &#123;</span><br><span class="line">            console.<span class="built_in">log</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span> <span class="params">(loginData)</span></span> &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="built_in">type</span>: <span class="string">'get'</span>,</span><br><span class="line">        url: <span class="string">'http://localhost:3000/getData'</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            token: loginData.token,</span><br><span class="line">            userId: loginData.userId</span><br><span class="line">        &#125;,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> <span class="params">(busiData)</span></span> &#123;</span><br><span class="line">            it.<span class="built_in">next</span>(busiData);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">error</span>: <span class="function"><span class="keyword">function</span> <span class="params">(err)</span></span> &#123;</span><br><span class="line">            console.<span class="built_in">log</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">main</span> <span class="params">()</span></span> &#123;</span><br><span class="line">    let key = <span class="built_in">yield</span> getKey();</span><br><span class="line">    let LoginData = <span class="built_in">yield</span> getToken(key);</span><br><span class="line">    let busiData = <span class="built_in">yield</span> getData(loginData);</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">'业务数据：'</span>, busiData);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 生成迭代器实例</span><br><span class="line">var it = main();</span><br><span class="line"></span><br><span class="line">// 运行第一步</span><br><span class="line">it.<span class="built_in">next</span>();</span><br><span class="line">console.<span class="built_in">log</span>(<span class="string">'不影响主线程执行'</span>);</span><br></pre></td></tr></table></figure></p><p>我们注意*main()生成器内部的代码，不看yield关键字的话，是完全符合大脑思维习惯的同步书写形式，把异步的流程封装到外面，在成功的回调函数里面调用it.next()，将传回的数据放到任务队列里进行排队，当JavaScript主线程空闲的时候会从任务队列里依次取出回调任务执行。</p><p>如果我们一直占用JavaScript主线程的话，是没有时间去执行任务队列中的任务：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> 运行第一步</span><br><span class="line">it.<span class="keyword">next</span>();</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 持续占用JavaScript主线程</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;&#125;;    <span class="regexp">//</span> 这里是拿不到异步数据的，因为没有机会去任务队列里取任务执行</span><br></pre></td></tr></table></figure></p><p>综上，生成器Generator解决了回调函数处理异步流程的<strong>第一个问题：不符合大脑顺序、线性的思维方式。</strong>。</p><h2 id="Step4-Async-Await"><a href="#Step4-Async-Await" class="headerlink" title="Step4 - Async/Await"></a>Step4 - Async/Await</h2><p>上面我们介绍了Promise和Generator，把这两者结合起来，就是Async/Await。</p><p>Generator的缺点是还需要我们手动控制next()执行，使用Async/Await的时候，只要await后面跟着一个Promise，它会自动等到Promise决议以后的返回值，resolve(…)或者reject(…)都可以。</p><p>我们把最开始的例子用Async/Await的方式改写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> getKeyPromise = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Promsie(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">'get'</span>,</span><br><span class="line">            url: <span class="string">'http://localhost:3000/apiKey'</span>,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">               <span class="keyword">let</span> key = data;</span><br><span class="line">               resolve(key);         </span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> getTokenPromise = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Promsie(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">'get'</span>,</span><br><span class="line">            url: <span class="string">'http://localhost:3000/getToken'</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                key: key</span><br><span class="line">            &#125;,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                resolve(data);         </span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> getDataPromise = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> token = data.token;</span><br><span class="line">    <span class="keyword">let</span> userId = data.userId;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Promsie(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">'get'</span>,</span><br><span class="line">            url: <span class="string">'http://localhost:3000/getData'</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                token: token,</span><br><span class="line">                userId: userId</span><br><span class="line">            &#125;,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                resolve(data);         </span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> key = <span class="keyword">await</span> getKeyPromise();</span><br><span class="line">    <span class="keyword">let</span> loginData = <span class="keyword">await</span> getTokenPromise(key);</span><br><span class="line">    <span class="keyword">let</span> busiData = <span class="keyword">await</span> getDataPromise(loginData);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'业务数据：'</span>, busiData);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'不影响主线程执行'</span>);</span><br></pre></td></tr></table></figure><p>可以看到，使用Async/Await，完全就是同步的书写方式，逻辑和数据依赖都非常清楚，只需要把异步的东西用Promise封装出去，然后使用await调用就可以了，也不需要像Generator一样需要手动控制next()执行。</p><p><strong>Async/Await是Generator和Promise的组合，完全解决了基于回调的异步流程存在的两个问题，可能是现在最好的JavaScript处理异步的方式了。</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文通过四个阶段来讲述JavaScript异步编程的发展历程：</p><ol><li><strong>第一个阶段 - 回调函数</strong>，但会导致两个问题:<ul><li>缺乏顺序性： 回调地狱导致的调试困难，和大脑的思维方式不符</li><li>缺乏可信任性： 控制反转导致的一系列信任问题 </li></ul></li><li><strong>第二个阶段 - Promise</strong>，Promise是基于PromiseA+规范的实现，它很好的解决了控制反转导致的信任问题，将代码执行的主动权重新拿了回来。</li><li><strong>第三个阶段 - 生成器函数Generator</strong>，使用Generator，可以让我们用同步的方式来书写代码，解决了顺序性的问题，但是需要手动去控制next(…)，将回调成功返回的数据送回JavaScript主流程中。</li><li><strong>第四个阶段 - Async/Await</strong>，Async/Await结合了Promise和Generator，在await后面跟一个Promise，它会自动等待Promise的决议值，解决了Generator需要手动控制next(…)执行的问题，真正实现了<strong>用同步的方式书写异步代码</strong>。</li></ol><p>我们可以看到，每项技术的突破都是为了解决现有技术存在的一些问题，它是循序渐进的，我们在学习的过程中，要真正去理解这项技术解决了哪些痛点，它为什么会存在，这样会有益于我们构建体系化的知识，同时也会更好的去理解这门技术。</p><p><strong>最后，希望大家可以通过这篇文章对JavaScript异步编程有一个更宏观的体系化的了解，我们一起进步</strong>。</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#iterable" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#iterable</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.liuxuan.site/blog/20180720/async_logo.jpeg?imageView2/1/w/1000/h/400&quot; alt=&quot;JavaScript异步编程&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;从我们一开始学习JavaScript的时候就听到过一段话：&lt;strong&gt;JS是单线程的，天生异步，适合IO密集型，不适合CPU密集型&lt;/strong&gt;。但是，多数JavaScript开发者从来没有认真思考过自己程序中的异步到底是怎么出现的，以及为什么会出现，也没有探索过处理异步的其他方法。到目前为止，还有很多人坚持认为回调函数就完全够用了。&lt;/p&gt;
&lt;p&gt;但是，随着JavaScript面临的需求越来越多，它可以运行在浏览器、服务器、甚至是嵌入式设备上，为了满足这些需求，JavaScript的规模和复杂性也在持续增长，使用回调函数来管理异步也越来越让人痛苦，这一切，都需要更强大、更合理的异步方法，通过这篇文章，我想对目前已有JavaScript异步的处理方式做一个总结，同时试着去解释为什么会出现这些技术，让大家对JavaScript异步编程有一个更宏观的理解，让知识变得更体系化一些。&lt;/p&gt;
&lt;p&gt;本文也会同步到我的&lt;a href=&quot;http://blog.liuxuan.site&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;个人网站&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="异步编程" scheme="//blog.liuxuan.site/categories/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Javascript" scheme="//blog.liuxuan.site/tags/Javascript/"/>
    
      <category term="异步编程" scheme="//blog.liuxuan.site/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Promise" scheme="//blog.liuxuan.site/tags/Promise/"/>
    
      <category term="Generator" scheme="//blog.liuxuan.site/tags/Generator/"/>
    
      <category term="Async/Await" scheme="//blog.liuxuan.site/tags/Async-Await/"/>
    
  </entry>
  
  <entry>
    <title>看图学HTTPS</title>
    <link href="//blog.liuxuan.site/2018/05/21/learn_https_through_photos/"/>
    <id>//blog.liuxuan.site/2018/05/21/learn_https_through_photos/</id>
    <published>2018-05-21T13:36:00.000Z</published>
    <updated>2018-05-21T13:13:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://image.liuxuan.site/blog/20180521/https-logo.jpg?imageView2/1/w/1000/h/400" alt="https"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前说到HTTPS，在我的概念中就是更安全，需要服务器配置证书，但是到底什么是HTTPS，为什么会更安全，整套流程又是如何实现的，在脑子里没有具体的概念。所以，我花了几天的时间，通过参考一些文章，学习了HTTPS整套机制的实现，想要通过一篇文章把我学习到的东西总结出来，让更多之前不清楚HTTPS到底是什么的同学有一个入门的理解。</p><p>我看过的很多文章都是通过大量的文字和协议图来解释，但往往会让人感觉有点枯燥，这篇文章我会通过一幅幅流程图，形象的说明从HTTP到HTTPS的演变过程，让大家可以更容易理解一些。当然，这个只是入门级，如果想要学习更深入的HTTPS的知识，还是要深入到一个个协议里面，看一些大部头，才可以达到完全理解的效果。</p><p>本文也会同步到我的<a href="http://blog.liuxuan.site" target="_blank" rel="noopener">个人网站</a>。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="HTTP是什么样的？"><a href="#HTTP是什么样的？" class="headerlink" title="HTTP是什么样的？"></a>HTTP是什么样的？</h2><p>HTTP是属于应用层的协议，它是基于TCP/IP的，所以它只是规定一些要传输的内容，以及头部信息，然后通过TCP协议进行传输，依靠IP协议进行寻址，通过一幅最简单的图来描述：</p><p><img src="http://p54fus2hp.bkt.clouddn.com/blog/20180521/https-1.png" alt="http-1"></p><p>客户端发出请求，服务端进行响应，就是这么简单。在整个过程中，没有任何加密的东西，所以它是不安全的，中间人可以进行拦截，获取传输和响应的数据，造成数据泄露。</p><a id="more"></a><h2 id="加个密呢？"><a href="#加个密呢？" class="headerlink" title="加个密呢？"></a>加个密呢？</h2><p>因为上图中数据是明文传输的，我们能想到最简单的提高安全性的方法就是在传输前对数据进行加密，如下图：</p><p><img src="http://p54fus2hp.bkt.clouddn.com/blog/20180521/https-2.png" alt="http-2"></p><p>这种加密方式叫做：<strong>对称加密</strong>。<br>加密和解密用同一个秘钥的加密方式叫做对称加密。</p><p>好了，我们对数据进行加密了，问题解决了吗？</p><h2 id="多个客户端怎么办？"><a href="#多个客户端怎么办？" class="headerlink" title="多个客户端怎么办？"></a>多个客户端怎么办？</h2><p>这是一个客户端，但是在WWW上，是成千上万的客户端，情况会怎样呢？</p><p><img src="http://p54fus2hp.bkt.clouddn.com/blog/20180521/https-3.png" alt="http-3"></p><p>为所有的客户端都应用同一个秘钥A，这种方式很显然是不合理的，破解了一个用户，所有的用户信息都会被盗取。</p><p>想一想，是不是还有别的办法呢？</p><p>相信大家都可以想到，如果对每一个客户端都用不同的秘钥进行传输是不是就解决这个问题了：</p><p><img src="http://p54fus2hp.bkt.clouddn.com/blog/20180521/https-4.png" alt="http-4"></p><h2 id="对称加密秘钥如何传输？"><a href="#对称加密秘钥如何传输？" class="headerlink" title="对称加密秘钥如何传输？"></a>对称加密秘钥如何传输？</h2><p>我们对每个客户端应用不同的对称加密秘钥，那么这个秘钥客户端或者服务端是如何知道的呢，只能是在一端生成一个秘钥，然后通过HTTP传输给另一端：</p><p><img src="http://p54fus2hp.bkt.clouddn.com/blog/20180521/https-5.png" alt="http-5"></p><p>那么这个传输秘钥的过程，又如何保证加密？如果被中间人拦截，秘钥也会被获取。也许你会说，对秘钥再进行加密，那又如何保证对秘钥加密的过程，是加密的呢？</p><p>好像我们走入了 <strong>while(1)</strong>，出不来了。</p><h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><p>在对称加密的路上走不通了，我们换个思路，还有一种加密方式叫非对称加密，比如RSA。<br>非对称加密会有一对秘钥：<strong>公钥</strong>和<strong>私钥</strong>。<br>公钥加密的内容，只有私钥可以解开，私钥加密的内容，所有的公钥都可以解开（当然是指和秘钥是一对的公钥）。</p><p><img src="http://p54fus2hp.bkt.clouddn.com/blog/20180521/https-6.png" alt="http-6"></p><p>私钥只保存在服务器端，公钥可以发送给所有的客户端。</p><p>在传输公钥的过程中，肯定也会有被中间人获取的风险，但在目前的情况下，至少可以保证客户端通过公钥加密的内容，中间人是无法破解的，因为私钥只保存在服务器端，只有私钥可以破解公钥加密的内容。</p><p>现在我们还存在一个问题，如果公钥被中间人拿到篡改呢：</p><p><strong>MITM</strong>：Man-in-the-MiddleAttack</p><p><img src="http://p54fus2hp.bkt.clouddn.com/blog/20180521/https-7.png" alt="http-7"></p><p>客户端拿到的公钥是假的，如何解决这个问题？</p><h2 id="第三方认证"><a href="#第三方认证" class="headerlink" title="第三方认证"></a>第三方认证</h2><p>公钥被掉包，是因为客户端无法分辨传回公钥的到底是中间人，还是服务器，这也是密码学中的身份验证问题。</p><p>在HTTPS中，使用 <strong>证书 + 数字签名</strong> 来解决这个问题。</p><p><img src="http://p54fus2hp.bkt.clouddn.com/blog/20180521/https-9.png" alt="http-9"></p><p>这里假设加密方式是MD5，将网站的信息加密后通过第三方机构的私钥再次进行加密，生成数字签名。</p><p><strong>数字证书 = 网站信息 + 数字签名</strong></p><p>假如中间人拦截后把服务器的公钥替换为自己的公钥，因为数字签名的存在，会导致客户端验证签名不匹配，这样就防止了中间人替换公钥的问题。</p><p><img src="http://p54fus2hp.bkt.clouddn.com/blog/20180521/https-10.png" alt="http-10"></p><p>浏览器安装后会内置一些权威第三方认证机构的公钥，比如VeriSign、Symantec以及GlobalSign等等，验证签名的时候直接就从本地拿到相应第三方机构的公钥，对私钥加密后的数字签名进行解密得到真正的签名，然后客户端利用签名生成规则进行签名生成，看两个签名是否匹配，如果匹配认证通过，不匹配则获取证书失败。</p><h2 id="为什么要有签名？"><a href="#为什么要有签名？" class="headerlink" title="为什么要有签名？"></a>为什么要有签名？</h2><p>大家可以想一下，为什么要有数字签名这个东西呢？</p><p>第三方认证机构是一个开放的平台，我们可以去申请，中间人也可以去申请呀：</p><p><img src="http://p54fus2hp.bkt.clouddn.com/blog/20180521/https-11.png" alt="http-11"></p><p>如果没有签名，只对网站信息进行第三方机构私钥加密的话，会存在下面的问题：</p><p><img src="http://p54fus2hp.bkt.clouddn.com/blog/20180521/https-12.png" alt="http-12"></p><p>因为没有认证，所以中间人也向第三方认证机构进行申请，然后拦截后把所有的信息都替换成自己的，客户端仍然可以解密，并且无法判断这是服务器的还是中间人的，最后造成数据泄露。</p><h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><p>在安全的拿到服务器的公钥之后，客户端会随机生成一个对称秘钥，使用服务器公钥加密，传输给服务端，此后，相关的 <strong>Application Data</strong> 就通过这个随机生成的对称秘钥进行加密/解密，服务器也通过该对称秘钥进行解密/加密：</p><p><img src="http://p54fus2hp.bkt.clouddn.com/blog/20180521/https-13.png" alt="http-13"></p><h2 id="整体流程图"><a href="#整体流程图" class="headerlink" title="整体流程图"></a>整体流程图</h2><p>HTTPS = HTTP + TLS/SSL</p><p><img src="http://p54fus2hp.bkt.clouddn.com/blog/20180521/https-15.png" alt="http-15"></p><p>HTTPS中具体的内容还有很多，可以通过下图做一个参考：</p><p><img src="http://p54fus2hp.bkt.clouddn.com/blog/20180521/https-14.gif" alt="http-14"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>HTTPS就是使用SSL/TLS协议进行加密传输，让客户端拿到服务器的公钥，然后客户端随机生成一个对称加密的秘钥，使用公钥加密，传输给服务端，后续的所有信息都通过该对称秘钥进行加密解密，完成整个HTTPS的流程。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://en.wikipedia.org/wiki/HTTPS" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/HTTPS</a><br><a href="https://www.instantssl.com/https-tutorials/what-is-https.html" target="_blank" rel="noopener">https://www.instantssl.com/https-tutorials/what-is-https.html</a><br><a href="https://tasaid.com/blog/20161003001126.html" target="_blank" rel="noopener">https://tasaid.com/blog/20161003001126.html</a><br><a href="https://www.west.cn/faq/list.asp?unid=1346" target="_blank" rel="noopener">https://www.west.cn/faq/list.asp?unid=1346</a><br><a href="https://www.cnblogs.com/zhangshitong/p/6478721.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhangshitong/p/6478721.html</a><br><a href="https://www.wired.com/2016/04/hacker-lexicon-what-is-https-encryption/" target="_blank" rel="noopener">https://www.wired.com/2016/04/hacker-lexicon-what-is-https-encryption/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.liuxuan.site/blog/20180521/https-logo.jpg?imageView2/1/w/1000/h/400&quot; alt=&quot;https&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前说到HTTPS，在我的概念中就是更安全，需要服务器配置证书，但是到底什么是HTTPS，为什么会更安全，整套流程又是如何实现的，在脑子里没有具体的概念。所以，我花了几天的时间，通过参考一些文章，学习了HTTPS整套机制的实现，想要通过一篇文章把我学习到的东西总结出来，让更多之前不清楚HTTPS到底是什么的同学有一个入门的理解。&lt;/p&gt;
&lt;p&gt;我看过的很多文章都是通过大量的文字和协议图来解释，但往往会让人感觉有点枯燥，这篇文章我会通过一幅幅流程图，形象的说明从HTTP到HTTPS的演变过程，让大家可以更容易理解一些。当然，这个只是入门级，如果想要学习更深入的HTTPS的知识，还是要深入到一个个协议里面，看一些大部头，才可以达到完全理解的效果。&lt;/p&gt;
&lt;p&gt;本文也会同步到我的&lt;a href=&quot;http://blog.liuxuan.site&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;个人网站&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;&lt;h2 id=&quot;HTTP是什么样的？&quot;&gt;&lt;a href=&quot;#HTTP是什么样的？&quot; class=&quot;headerlink&quot; title=&quot;HTTP是什么样的？&quot;&gt;&lt;/a&gt;HTTP是什么样的？&lt;/h2&gt;&lt;p&gt;HTTP是属于应用层的协议，它是基于TCP/IP的，所以它只是规定一些要传输的内容，以及头部信息，然后通过TCP协议进行传输，依靠IP协议进行寻址，通过一幅最简单的图来描述：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p54fus2hp.bkt.clouddn.com/blog/20180521/https-1.png&quot; alt=&quot;http-1&quot;&gt;&lt;/p&gt;
&lt;p&gt;客户端发出请求，服务端进行响应，就是这么简单。在整个过程中，没有任何加密的东西，所以它是不安全的，中间人可以进行拦截，获取传输和响应的数据，造成数据泄露。&lt;/p&gt;
    
    </summary>
    
      <category term="HTTP" scheme="//blog.liuxuan.site/categories/HTTP/"/>
    
    
      <category term="Javascript" scheme="//blog.liuxuan.site/tags/Javascript/"/>
    
      <category term="HTTPS" scheme="//blog.liuxuan.site/tags/HTTPS/"/>
    
      <category term="SSL/TLS" scheme="//blog.liuxuan.site/tags/SSL-TLS/"/>
    
      <category term="非对称加密" scheme="//blog.liuxuan.site/tags/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    
      <category term="对称加密" scheme="//blog.liuxuan.site/tags/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>聊聊V8引擎的垃圾回收</title>
    <link href="//blog.liuxuan.site/2018/04/14/v8_garbage_collection/"/>
    <id>//blog.liuxuan.site/2018/04/14/v8_garbage_collection/</id>
    <published>2018-04-14T08:36:00.000Z</published>
    <updated>2018-04-21T15:17:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://image.liuxuan.site/blog/20180414/garbage_collection.jpeg?imageView2/1/w/1000/h/400" alt="label-statement"></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我们知道，JavaScript之所以能在浏览器环境和NodeJS环境运行，都是因为有V8引擎在幕后保驾护航。从编译、内存分配、运行以及垃圾回收等整个过程，都离不开它。</p><p>在写这篇文章之前，我也在网上看了很多博客，包括一些英文原版的内容，于是想通过这篇文章来做一个归纳整理，文中加入了我自己的思考，以及纯手工制作流程图~~</p><p>希望这篇文章能帮到你，同时本文也会收录到我自己的<a href="http://blog.liuxuan.site" target="_blank" rel="noopener">个人网站</a>。</p><h3 id="为什么要有垃圾回收"><a href="#为什么要有垃圾回收" class="headerlink" title="为什么要有垃圾回收"></a>为什么要有垃圾回收</h3><p>在C语言和C++语言中，我们如果想要开辟一块堆内存的话，需要先计算需要内存的大小，然后自己通过<strong>malloc</strong>函数去手动分配，在用完之后，还要时刻记得用<strong>free</strong>函数去清理释放，否则这块内存就会被永久占用，造成内存泄露。</p><p>但是我们在写JavaScript的时候，却没有这个过程，因为人家已经替我们封装好了，V8引擎会根据你当前定义对象的大小去自动申请分配内存。</p><p>不需要我们去手动管理内存了，所以自然要有<strong>垃圾回收</strong>，否则的话只分配不回收，岂不是没多长时间内存就被占满了吗，导致应用崩溃。</p><p>垃圾回收的好处是不需要我们去管理内存，把更多的精力放在实现复杂应用上，但坏处也来自于此，不用管理了，就有可能在写代码的时候不注意，造成循环引用等情况，导致内存泄露。</p><a id="more"></a><h3 id="内存结构分配"><a href="#内存结构分配" class="headerlink" title="内存结构分配"></a>内存结构分配</h3><p>由于V8最开始就是为JavaScript在浏览器执行而打造的，不太可能遇到使用大量内存的场景，所以它可以申请的最大内存就没有设置太大，在64位系统下大约为1.4GB，在32位系统下大约为700MB。</p><p>在NodeJS环境中，我们可以通过<strong>process.memoryUsage()</strong>来查看内存分配。</p><p><img src="http://image.liuxuan.site/blog/20180413/node_heap.png?imageView2/1/w/800" alt="node环境v8内存"></p><p><strong>process.memoryUsage</strong>返回一个对象，包含了 Node 进程的内存占用信息。该对象包含四个字段，含义如下：</p><p><img src="http://image.liuxuan.site/blog/20180413/node_memory.png?imageView2/1/w/800" alt="node环境v8内存"></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">rss</span>（resident set size）：所有内存占用，包括指令区和堆栈</span><br><span class="line"></span><br><span class="line"><span class="symbol">heapTotal</span>：<span class="built_in">V8</span>引擎可以分配的最大堆内存，包含下面的 heapUsed</span><br><span class="line"></span><br><span class="line"><span class="symbol">heapUsed</span>：<span class="built_in">V8</span>引擎已经分配使用的堆内存</span><br><span class="line"></span><br><span class="line"><span class="symbol">external</span>： <span class="built_in">V8</span>管理C++对象绑定到JavaScript对象上的内存</span><br></pre></td></tr></table></figure><p>以上所有内存单位均为字节（Byte）。</p><p>如果说想要扩大Node可用的内存空间，可以使用<strong>Buffer</strong>等堆外内存内存，这里不详细说明了，大家有兴趣可以去看一些资料。</p><p>下面是Node的整体架构图，有助于大家理解上面的内容：</p><p><img src="http://image.liuxuan.site/blog/20180413/node_architecture.jpeg?imageView2/1/w/800" alt="node环境v8内存"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Node</span> <span class="title">Standard</span> Library: 是我们每天都在用的标准库，如Http, Buffer 模块</span><br><span class="line"></span><br><span class="line"><span class="keyword">Node</span> Bindings:<span class="title"> 是沟通JS</span> 和 C++的桥梁，封装V8和Libuv的细节，向上层提供基础API服务</span><br><span class="line"></span><br><span class="line">第三层是支撑 <span class="keyword">Node</span>.<span class="title">js</span> 运行的关键，由 C/C++ 实现：</span><br><span class="line"><span class="number">1</span>. V8 是Google开发的JavaScript引擎，提供JavaScript运行环境，可以说它就是 <span class="keyword">Node</span>.<span class="title">js</span> 的发动机</span><br><span class="line"><span class="number">2</span>. Libuv 是专门为<span class="keyword">Node</span>.<span class="title">js</span>开发的一个封装库，提供跨平台的异步I/O能力</span><br><span class="line"><span class="number">3</span>. C-ares：提供了异步处理 DNS 相关的能力</span><br><span class="line"><span class="number">4</span>. http_parser、OpenSSL、zlib 等：提供包括 http 解析、SSL、数据压缩等其他的能力</span><br></pre></td></tr></table></figure><h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><h4 id="1-如何判断是否可以回收"><a href="#1-如何判断是否可以回收" class="headerlink" title="1. 如何判断是否可以回收"></a>1. 如何判断是否可以回收</h4><h5 id="1-1-标记清除"><a href="#1-1-标记清除" class="headerlink" title="1.1 标记清除"></a>1.1 标记清除</h5><p>当变量进入环境（例如，在函数中声明一个变量）时，就将这个变量标记为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为“离开环境”。</p><p>可以使用任何方式来标记变量。比如，可以通过翻转某个特殊的位来记录一个变量何时进入环境，或者使用一个“进入环境的”变量列表及一个“离开环境的”变量列表来跟踪哪个变量发生了变化。如何标记变量并不重要，关键在于采取什么策略。</p><ul><li>（1）垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记（当然，可以使用任何标记方式）。</li><li>（2）然后，它会去掉运行环境中的变量以及被环境中变量所引用的变量的标记</li><li>（3）此后，依然有标记的变量就被视为准备删除的变量，原因是在运行环境中已经无法访问到这些变量了。</li><li>（4）最后，垃圾收集器完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间。</li></ul><p>目前，IE、Firefox、Opera、Chrome和Safari的JavaScript实现使用的都是标记清除式的垃圾回收策略（或类似的策略），只不过垃圾收集的时间间隔互有不同。</p><p><img src="http://p54fus2hp.bkt.clouddn.com/blog/20180413/gc_object.png?imageView2/1/w/800" alt="标记清除"></p><p><strong>活动对象</strong>就是上面的root，如果不清楚活动对象的可以先查一下资料，当一个对象和其关联对象不再通过引用关系被当前root引用了，这个对象就会被垃圾回收。</p><h5 id="1-2-引用计数"><a href="#1-2-引用计数" class="headerlink" title="1.2 引用计数"></a>1.2 引用计数</h5><p>引用计数的垃圾收集策略不太常见。含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是1。</p><p>如果同一个值又被赋给另一个变量，则该值的引用次数加1。相反，如果包含对这个值引用的变量改变了引用对象，则该值引用次数减1。</p><p>当这个值的引用次数变成0时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。</p><p>这样，当垃圾收集器下次再运行时，它就会释放那些引用次数为0的值所占用的内存。</p><p>Netscape Navigator 3.0是最早使用引用计数策略的浏览器，但很快它就遇到了一个严重的问题：<strong>循环引用</strong>。</p><p>循环引用是指对象A中包含一个指向对象B的指针，而对象B中也包含一个指向对象A的引用，看个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> objA = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    <span class="keyword">var</span> objB = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    </span><br><span class="line">    objA.otherObj = objB;</span><br><span class="line">    objB.anotherObj = objA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个例子中，objA和objB通过各自的属性相互引用，也就是说，这两个对象的引用次数都是2。</p><p>在采用标记清除策略的实现中，由于函数执行后，这两个对象都离开了作用域，因此这种相互引用不是问题。</p><p>但在采用引用次数策略的实现中，当函数执行完毕后，objA和objB还将继续存在，因为它们的引用次数永远不会是0。</p><p>加入这个函数被重复多次调用，就会导致大量内存无法回收。为此，Netscape在Navigator 4.0中也放弃了引用计数方式，转而采用标记清除来实现其垃圾回收机制。</p><p>还要注意的是，我们大部分人时刻都在写着循环引用的代码，看下面这个例子，相信大家都这样写过：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">'#el'</span>);</span><br><span class="line">el.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'element was clicked'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们为一个元素的点击事件绑定了一个匿名函数，我们通过<strong>event</strong>参数是可以拿到相应元素<strong>el</strong>的信息的。</p><p>大家想想，这是不是就是一个循环引用呢？<br><strong>el</strong>有一个属性<strong>onclick</strong>引用了一个函数（其实也是个对象），函数里面的参数又引用了<strong>el</strong>，这样<strong>el</strong>的引用次数一直是2，即使当前这个页面关闭了，也无法进行垃圾回收。</p><p>如果这样的写法很多很多，就会造成内存泄露。我们可以通过在页面卸载时清除事件引用，这样就可以被回收了：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">'#el'</span>);</span><br><span class="line">el.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'element was clicked'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 页面卸载时将绑定的事件清空</span></span><br><span class="line"><span class="built_in">window</span>.onbeforeunload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    el.onclick = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="V8垃圾回收策略"><a href="#V8垃圾回收策略" class="headerlink" title="V8垃圾回收策略"></a>V8垃圾回收策略</h3><p>自动垃圾回收有很多算法，由于不同对象的生存周期不同，所以无法只用一种回收策略来解决问题，这样效率会很低。</p><p>所以，V8采用了一种代回收的策略，将内存分为两个生代：<strong>新生代（new generation）</strong>和<strong>老生代（old generation）</strong>。</p><p>新生代中的对象为存活时间较短的对象，老生代中的对象为存活时间较长或常驻内存的对象，分别对新老生代采用不同的垃圾回收算法来提高效率，对象最开始都会先被分配到新生代（如果新生代内存空间不够，直接分配到老生代），新生代中的对象会在满足某些条件后，被移动到老生代，这个过程也叫晋升，后面我会详细说明。</p><h3 id="分代内存"><a href="#分代内存" class="headerlink" title="分代内存"></a>分代内存</h3><p>默认情况下，32位系统新生代内存大小为16MB，老生代内存大小为700MB，64位系统下，新生代内存大小为32MB，老生代内存大小为1.4GB。</p><p>新生代平均分成两块相等的内存空间，叫做semispace，每块内存大小8MB（32位）或16MB（64位）。</p><h3 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h3><h4 id="1-分配方式"><a href="#1-分配方式" class="headerlink" title="1. 分配方式"></a>1. 分配方式</h4><p>新生代存的都是生存周期短的对象，分配内存也很容易，只保存一个指向内存空间的指针，根据分配对象的大小递增指针就可以了，当存储空间快要满时，就进行一次垃圾回收。</p><h4 id="2-算法"><a href="#2-算法" class="headerlink" title="2. 算法"></a>2. 算法</h4><p>新生代采用<strong>Scavenge</strong>垃圾回收算法，在算法实现时主要采用<strong>Cheney</strong>算法。</p><p>Cheney算法将内存一分为二，叫做semispace，一块处于使用状态，一块处于闲置状态。</p><p><img src="http://p54fus2hp.bkt.clouddn.com/blog/20180413/new_old_generation.png?imageView2/1/w/800" alt="新老生代"></p><p>处于使用状态的semispace称为<strong>From空间</strong>，处于闲置状态的semispace称为<strong>To空间</strong>。</p><p>我画了一套详细的流程图，接下来我会结合流程图来详细说明Cheney算法是怎么工作的。<br>垃圾回收在下面我统称为 <strong>GC（Garbage Collection）</strong>。</p><p><strong>step1</strong>. 在From空间中分配了3个对象A、B、C</p><p><img src="http://image.liuxuan.site/cheney_step1.png?imageView2/1/w/800" alt="cheney-step1"></p><p><strong>step2</strong>. GC进来判断对象B没有其他引用，可以回收，对象A和C依然为活跃对象</p><p><img src="http://image.liuxuan.site/cheney_step2.png?imageView2/1/w/800" alt="cheney-step1"></p><p><strong>step3</strong>. 将活跃对象A、C从From空间复制到To空间</p><p><img src="http://image.liuxuan.site/cheney_step3.png?imageView2/1/w/800" alt="cheney-step1"></p><p><strong>step4</strong>. 清空From空间的全部内存</p><p><img src="http://image.liuxuan.site/cheney_step4.png?imageView2/1/w/800" alt="cheney-step1"></p><p><strong>step5</strong>. 交换From空间和To空间</p><p><img src="http://image.liuxuan.site/cheney_step5.png?imageView2/1/w/800" alt="cheney-step1"></p><p><strong>step6</strong>. 在From空间中又新增了2个对象D、E</p><p><img src="http://image.liuxuan.site/cheney_step6.png?imageView2/1/w/800" alt="cheney-step1"></p><p><strong>step7</strong>. 下一轮GC进来发现对象D没有引用了，做标记</p><p><img src="http://image.liuxuan.site/cheney_step7.png?imageView2/1/w/800" alt="cheney-step1"></p><p><strong>step8</strong>. 将活跃对象A、C、E从From空间复制到To空间</p><p><img src="http://image.liuxuan.site/cheney_step8.png?imageView2/1/w/800" alt="cheney-step1"></p><p><strong>step9</strong>. 清空From空间全部内存</p><p><img src="http://image.liuxuan.site/cheney_step9.png?imageView2/1/w/800" alt="cheney-step1"></p><p><strong>step10</strong>. 继续交换From空间和To空间，开始下一轮</p><p><img src="http://image.liuxuan.site/cheney_step10.png?imageView2/1/w/800" alt="cheney-step1"></p><p>通过上面的流程图，我们可以很清楚的看到，进行From和To交换，就是为了让活跃对象始终保持在一块semispace中，另一块semispace始终保持空闲的状态。</p><p>Scavenge由于只复制存活的对象，并且对于生命周期短的场景存活对象只占少部分，所以它在时间效率上有优异的体现。Scavenge的缺点是只能使用堆内存的一半，这是由划分空间和复制机制所决定的。</p><p>由于Scavenge是典型的牺牲空间换取时间的算法，所以无法大规模的应用到所有的垃圾回收中。但我们可以看到，Scavenge非常适合应用在新生代中，因为新生代中对象的生命周期较短，恰恰适合这个算法。</p><h4 id="3-晋升"><a href="#3-晋升" class="headerlink" title="3. 晋升"></a>3. 晋升</h4><p>当一个对象经过多次复制仍然存活时，它就会被认为是生命周期较长的对象。这种较长生命周期的对象随后会被移动到老生代中，采用新的算法进行管理。</p><p><strong>对象从新生代移动到老生代的过程叫作晋升</strong>。</p><p>对象晋升的条件主要有两个：</p><ol><li><p>对象从From空间复制到To空间时，会检查它的内存地址来判断这个对象是否已经经历过一次Scavenge回收。如果已经经历过了，会将该对象从From空间移动到老生代空间中，如果没有，则复制到To空间。<strong>总结来说，如果一个对象是第二次经历从From空间复制到To空间，那么这个对象会被移动到老生代中</strong>。</p></li><li><p>当要从From空间复制一个对象到To空间时，如果To空间已经使用了超过25%，则这个对象直接晋升到老生代中。设置25%这个阈值的原因是当这次Scavenge回收完成后，这个To空间会变为From空间，接下来的内存分配将在这个空间中进行。如果占比过高，会影响后续的内存分配。</p></li></ol><h3 id="老生代"><a href="#老生代" class="headerlink" title="老生代"></a>老生代</h3><h4 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h4><p>在老生代中，存活对象占较大比重，如果继续采用Scavenge算法进行管理，就会存在两个问题：</p><ol><li>由于存活对象较多，复制存活对象的效率会很低。</li><li>采用Scavenge算法会浪费一半内存，由于老生代所占堆内存远大于新生代，所以浪费会很严重。</li></ol><p>所以，V8在老生代中主要采用了<strong>Mark-Sweep</strong>和<strong>Mark-Sweep</strong>相结合的方式进行垃圾回收。</p><h4 id="2-Mark-Sweep"><a href="#2-Mark-Sweep" class="headerlink" title="2. Mark-Sweep"></a>2. Mark-Sweep</h4><p>Mark-Sweep是标记清除的意思，它分为标记和清除两个阶段。</p><p>与Scavenge不同，Mark-Sweep并不会将内存分为两份，所以不存在浪费一半空间的行为。Mark-Sweep在标记阶段遍历堆内存中的所有对象，并标记活着的对象，在随后的清除阶段，只清除没有被标记的对象。</p><p>也就是说，Scavenge只复制活着的对象，而Mark-Sweep只清除死了的对象。活对象在新生代中只占较少部分，死对象在老生代中只占较少部分，这就是两种回收方式都能高效处理的原因。</p><p>我们还是通过流程图来看一下：</p><p><strong>step1</strong>. 老生代中有对象A、B、C、D、E、F</p><p><img src="http://image.liuxuan.site/blog/20180414/mark_sweep_step1?imageView2/1/w/800" alt="mark-sweep-step1"></p><p><strong>step2</strong>. GC进入标记阶段，将A、C、E标记为存活对象</p><p><img src="http://image.liuxuan.site/blog/20180414/mark_sweep_step2?imageView2/1/w/801" alt="mark-sweep-step1"></p><p><strong>step3</strong>. GC进入清除阶段，回收掉死亡的B、D、F对象所占用的内存空间</p><p><img src="http://image.liuxuan.site/blog/20180414/mark_sweep_step3?imageView2/1/w/801" alt="mark-sweep-step1"></p><p>可以看到，Mark-Sweep最大的问题就是，在进行一次清除回收以后，内存空间会出现不连续的状态。这种内存碎片会对后续的内存分配造成问题。</p><p>如果出现需要分配一个大内存的情况，由于剩余的碎片空间不足以完成此次分配，就会提前触发垃圾回收，而这次回收是不必要的。</p><h4 id="2-Mark-Compact"><a href="#2-Mark-Compact" class="headerlink" title="2. Mark-Compact"></a>2. Mark-Compact</h4><p>为了解决Mark-Sweep的内存碎片问题，Mark-Compact就被提出来了。</p><p><strong>Mark-Compact是标记整理的意思，</strong>是在Mark-Sweep的基础上演变而来的。Mark-Compact在标记完存活对象以后，会将活着的对象向内存空间的一端移动，移动完成后，直接清理掉边界外的所有内存。如下图所示：</p><p><strong>step1</strong>. 老生代中有对象A、B、C、D、E、F（和Mark—Sweep一样）</p><p><img src="http://image.liuxuan.site/blog/20180414/mark_sweep_step1?imageView2/1/w/801" alt="mark-sweep-step1"></p><p><strong>step2</strong>. GC进入标记阶段，将A、C、E标记为存活对象（和Mark—Sweep一样）<br><img src="http://image.liuxuan.site/blog/20180414/mark_sweep_step2?imageView2/1/w/801" alt="mark-sweep-step1"></p><p><strong>step3</strong>. GC进入整理阶段，将所有存活对象向内存空间的一侧移动，灰色部分为移动后空出来的空间</p><p><img src="http://p54fus2hp.bkt.clouddn.com/blog/20180414/mark_compact_step3?imageView2/1/w/850" alt="mark-sweep-step1"></p><p><strong>step4</strong>. GC进入清除阶段，将边界另一侧的内存一次性全部回收</p><p><img src="http://p54fus2hp.bkt.clouddn.com/blog/20180414/mark_compact_step4?imageView2/1/w/850" alt="mark-sweep-step1"></p><h4 id="3-两者结合"><a href="#3-两者结合" class="headerlink" title="3. 两者结合"></a>3. 两者结合</h4><p>在V8的回收策略中，Mark-Sweep和Mark-Conpact两者是结合使用的。</p><p>由于Mark-Conpact需要移动对象，所以它的执行速度不可能很快，在取舍上，V8主要使用Mark-Sweep，在空间不足以对从新生代中晋升过来的对象进行分配时，才使用Mark-Compact。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>V8的垃圾回收机制分为新生代和老生代。</p><p>新生代主要使用Scavenge进行管理，主要实现是Cheney算法，将内存平均分为两块，使用空间叫From，闲置空间叫To，新对象都先分配到From空间中，在空间快要占满时将存活对象复制到To空间中，然后清空From的内存空间，此时，调换From空间和To空间，继续进行内存分配，当满足那两个条件时对象会从新生代晋升到老生代。</p><p>老生代主要采用Mark-Sweep和Mark-Compact算法，一个是标记清除，一个是标记整理。两者不同的地方是，Mark-Sweep在垃圾回收后会产生碎片内存，而Mark-Compact在清除前会进行一步整理，将存活对象向一侧移动，随后清空边界的另一侧内存，这样空闲的内存都是连续的，但是带来的问题就是速度会慢一些。在V8中，老生代是Mark-Sweep和Mark-Compact两者共同进行管理的。</p><p>以上就是本文的全部内容，书写过程中参考了很多中外文章，参考书籍包括朴大大的《深入浅出NodeJS》以及《JavaScript高级程序设计》等。我们这里并没有对具体的算法实现进行探讨，感兴趣的朋友可以继续深入研究一下。</p><p>最后，谢谢大家能够读到这里，如果文中有任何不明确或错误的地方，欢迎给我留言~~</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://medium.com/@_lrlna/garbage-collection-in-v8-an-illustrated-guide-d24a952ee3b8" target="_blank" rel="noopener">https://medium.com/@_lrlna/garbage-collection-in-v8-an-illustrated-guide-d24a952ee3b8</a><br><a href="http://alinode.aliyun.com/blog/14" target="_blank" rel="noopener">http://alinode.aliyun.com/blog/14</a><br><a href="http://www.ruanyifeng.com/blog/2017/04/memory-leak.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2017/04/memory-leak.html</a><br><a href="https://segmentfault.com/a/1190000000440270" target="_blank" rel="noopener">https://segmentfault.com/a/1190000000440270</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.liuxuan.site/blog/20180414/garbage_collection.jpeg?imageView2/1/w/1000/h/400&quot; alt=&quot;label-statement&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;我们知道，JavaScript之所以能在浏览器环境和NodeJS环境运行，都是因为有V8引擎在幕后保驾护航。从编译、内存分配、运行以及垃圾回收等整个过程，都离不开它。&lt;/p&gt;
&lt;p&gt;在写这篇文章之前，我也在网上看了很多博客，包括一些英文原版的内容，于是想通过这篇文章来做一个归纳整理，文中加入了我自己的思考，以及纯手工制作流程图~~&lt;/p&gt;
&lt;p&gt;希望这篇文章能帮到你，同时本文也会收录到我自己的&lt;a href=&quot;http://blog.liuxuan.site&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;个人网站&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;为什么要有垃圾回收&quot;&gt;&lt;a href=&quot;#为什么要有垃圾回收&quot; class=&quot;headerlink&quot; title=&quot;为什么要有垃圾回收&quot;&gt;&lt;/a&gt;为什么要有垃圾回收&lt;/h3&gt;&lt;p&gt;在C语言和C++语言中，我们如果想要开辟一块堆内存的话，需要先计算需要内存的大小，然后自己通过&lt;strong&gt;malloc&lt;/strong&gt;函数去手动分配，在用完之后，还要时刻记得用&lt;strong&gt;free&lt;/strong&gt;函数去清理释放，否则这块内存就会被永久占用，造成内存泄露。&lt;/p&gt;
&lt;p&gt;但是我们在写JavaScript的时候，却没有这个过程，因为人家已经替我们封装好了，V8引擎会根据你当前定义对象的大小去自动申请分配内存。&lt;/p&gt;
&lt;p&gt;不需要我们去手动管理内存了，所以自然要有&lt;strong&gt;垃圾回收&lt;/strong&gt;，否则的话只分配不回收，岂不是没多长时间内存就被占满了吗，导致应用崩溃。&lt;/p&gt;
&lt;p&gt;垃圾回收的好处是不需要我们去管理内存，把更多的精力放在实现复杂应用上，但坏处也来自于此，不用管理了，就有可能在写代码的时候不注意，造成循环引用等情况，导致内存泄露。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="//blog.liuxuan.site/categories/JavaScript/"/>
    
    
      <category term="Javascript" scheme="//blog.liuxuan.site/tags/Javascript/"/>
    
      <category term="V8" scheme="//blog.liuxuan.site/tags/V8/"/>
    
      <category term="垃圾回收" scheme="//blog.liuxuan.site/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    
      <category term="Scavenge" scheme="//blog.liuxuan.site/tags/Scavenge/"/>
    
      <category term="Mark-Sweep" scheme="//blog.liuxuan.site/tags/Mark-Sweep/"/>
    
  </entry>
  
  <entry>
    <title>尾调用和尾递归</title>
    <link href="//blog.liuxuan.site/2018/04/10/tail_call/"/>
    <id>//blog.liuxuan.site/2018/04/10/tail_call/</id>
    <published>2018-04-10T13:36:00.000Z</published>
    <updated>2018-04-21T15:17:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://image.liuxuan.site/blog/20180410/tail_call.jpg?imageView2/1/w/1000/h/400" alt="label-statement"></p><h3 id="尾调用"><a href="#尾调用" class="headerlink" title="尾调用"></a>尾调用</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>尾调用是函数式编程中一个很重要的概念，当一个函数执行时的最后一个步骤是返回另一个函数的调用，这就叫做尾调用。</p><p>注意这里函数的调用方式是无所谓的，以下方式均可：<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">函数调用:     <span class="function"><span class="keyword">func</span><span class="params">(···)</span></span></span><br><span class="line">方法调用:     obj.method(···)</span><br><span class="line"><span class="built_in">call</span>调用:     <span class="function"><span class="keyword">func</span>.<span class="title">call</span><span class="params">(···)</span></span></span><br><span class="line">apply调用:    <span class="function"><span class="keyword">func</span>.<span class="title">apply</span><span class="params">(···)</span></span></span><br></pre></td></tr></table></figure></p><p>并且只有下列表达式会包含尾调用：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">条件操作符:      ? :</span></span><br><span class="line"><span class="section">逻辑或:         ||</span></span><br><span class="line"><span class="section">逻辑与:         &amp;&amp;</span></span><br><span class="line"><span class="section">逗号:           ,</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>依次举例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="function"><span class="params">x</span> =&gt;</span> x ? f() : g();</span><br><span class="line"></span><br><span class="line"><span class="comment">// f() 和 g() 都在尾部。</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="function"><span class="params">()</span> =&gt;</span> f() || g();</span><br><span class="line"></span><br><span class="line"><span class="comment">// g()有可能是尾调用，f()不是</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为上述写法和下面的写法等效：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fResult = f(); <span class="comment">// not a tail call</span></span><br><span class="line">    <span class="keyword">if</span> (fResult) &#123;</span><br><span class="line">        <span class="keyword">return</span> fResult;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> g(); <span class="comment">// tail call</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只有当f()的结果为falsey的时候，g()才是尾调用</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="function"><span class="params">()</span> =&gt;</span> f() &amp;&amp; g();</span><br><span class="line"></span><br><span class="line"><span class="comment">// g()有可能是尾调用，f()不是</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为上述写法和下面的写法等效：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fResult = f(); <span class="comment">// not a tail call</span></span><br><span class="line">    <span class="keyword">if</span> (fResult) &#123;</span><br><span class="line">        <span class="keyword">return</span> g(); <span class="comment">// tail call</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只有当f()的结果为truthy的时候，g()才是尾调用</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="function"><span class="params">()</span> =&gt;</span> (f() , g());</span><br><span class="line"></span><br><span class="line"><span class="comment">// g()是尾调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为上述写法和下面的写法等效：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    f();</span><br><span class="line">    <span class="keyword">return</span> g();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-尾调用优化"><a href="#2-尾调用优化" class="headerlink" title="2. 尾调用优化"></a>2. 尾调用优化</h4><p>函数在调用的时候会在调用栈（call stack）中存有记录，每一条记录叫做一个调用帧（call frame），每调用一个函数，就向栈中push一条记录，函数执行结束后依次向外弹出，直到清空调用栈，参考下图：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> <span class="params">()</span> &#123; <span class="title">console</span>.<span class="title">log</span><span class="params">(111)</span>; &#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span> <span class="params">()</span> &#123; <span class="title">foo</span><span class="params">()</span>; &#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span> <span class="params">()</span> &#123; <span class="title">bar</span><span class="params">()</span>; &#125;</span></span><br><span class="line"></span><br><span class="line">baz();</span><br></pre></td></tr></table></figure></p><p><img src="http://image.liuxuan.site/blog/20180409/call_stack.png" alt="call stack"></p><p>造成这种结果是因为每个函数在调用另一个函数的时候，并没有 <strong>return</strong> 该调用，所以JS引擎会认为你还没有执行完，会保留你的调用帧。</p><p><strong>baz()</strong> 里面调用了 <strong>bar()</strong> 函数，并没有 <strong>return</strong> 该调用，所以在调用栈中保持自己的调用帧，同时 <strong>bar()</strong> 函数的调用帧在调用栈中生成，同理，<strong>bar()</strong> 函数又调用了 <strong>foo()</strong> 函数，最后执行到 <strong>foo()</strong> 函数的时候，没有再调用其他函数，这里没有显示声明 <strong>return</strong>，所以这里默认 <strong>return undefined</strong>。</p><p><strong>foo()</strong> 执行完了，销毁调用栈中自己的记录，依次销毁 <strong>bar()</strong> 和 <strong>baz()</strong> 的调用帧，最后完成整个流程。</p><p>如果对上面的例子做如下修改：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">foo</span> () &#123; console.log(111); &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title">bar</span> () &#123; <span class="keyword">return</span> <span class="type">foo()</span>; &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title">baz</span> () &#123; <span class="keyword">return</span> <span class="type">bar()</span>; &#125;</span><br><span class="line"></span><br><span class="line">baz();</span><br></pre></td></tr></table></figure></p><p>这里要注意：<strong>尾调用优化只在严格模式下有效。</strong></p><p>在非严格模式下，大多数引擎会包含下面两个属性，以便开发者检查调用栈：</p><ul><li>func.arguments: 表示对 func最近一次调用所包含的参数</li><li>func.caller: 引用对 func最近一次调用的那个函数</li></ul><p>在尾调用优化中，这些属性不再有用，因为相关的信息可能以及被移除了。因此，严格模式(strict mode)禁止这些属性，并且尾调用优化只在严格模式下有效。</p><p>如果尾调用优化生效，流程图就会变成这样：</p><p><img src="http://image.liuxuan.site/blog/20180409/call_stack_tail.png" alt="call stack"></p><p>我们可以很清楚的看到，尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用记录，只要直接用内层函数的调用记录取代外层函数的调用记录就可以了，调用栈中始终只保持了一条调用帧。</p><p>这就叫做<strong>尾调用优化</strong>，如果所有的函数都是尾调用的话，那么在调用栈中的调用帧始终只有一条，这样会节省很大一部分的内存，这也是<strong>尾调用优化的意义</strong>。</p><h3 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h3><h4 id="1-定义-1"><a href="#1-定义-1" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>先来看一下递归，当一个函数调用自身，就叫做递归。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    foo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面这个操作就叫做递归，但是注意了，这里没有结束条件，是死递归，所以会报栈溢出错误的，写代码时千万注意给递归添加结束条件。</p><p>那么什么是尾递归？<br>前面我们知道了尾调用的概念，当一个函数尾调用自身，就叫做<strong>尾递归</strong>。<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">foo</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">foo()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-作用"><a href="#2-作用" class="headerlink" title="2. 作用"></a>2. 作用</h4><p>那么尾递归相比递归而言，有哪些不同呢？<br>我们通过下面这个求<strong>阶乘</strong>的例子来看一下：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function <span class="built_in">factorial</span> (<span class="built_in">num</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">num</span> === <span class="number">1</span>) <span class="built_in">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">return</span> <span class="built_in">num</span> * <span class="built_in">factorial</span>(<span class="built_in">num</span> - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">factorial</span>(<span class="number">5</span>);            // <span class="number">120</span></span><br><span class="line"><span class="built_in">factorial</span>(<span class="number">10</span>);           // <span class="number">3628800</span></span><br><span class="line"><span class="built_in">factorial</span>(<span class="number">500000</span>);       // Uncaught RangeError: Maximum call stack size exceeded</span><br></pre></td></tr></table></figure></p><p>上面是使用递归来计算阶乘的例子，操作系统为JS引擎调用栈分配的内存是有大小限制的，如果计算的数字足够大，超出了内存最大范围，就会出现栈溢出错误。</p><p>这里500000并不是临界值，只是我用了一个足够造成栈溢出的数。</p><p>如果用尾递归来计算阶乘呢？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span> (<span class="params">num, total</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num === <span class="number">1</span>) <span class="keyword">return</span> total;</span><br><span class="line">    <span class="keyword">return</span> factorial(num - <span class="number">1</span>, num * total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">factorial(<span class="number">5</span>, <span class="number">1</span>);                <span class="comment">// 120</span></span><br><span class="line">factorial(<span class="number">10</span>, <span class="number">1</span>);               <span class="comment">// 3628800</span></span><br><span class="line">factorial(<span class="number">500000</span>, <span class="number">1</span>);           <span class="comment">// 分情况</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意，虽然说这里启用了严格模式，但是经测试，在Chrome和Firefox下，还是会报栈溢出错误，并没有进行尾调用优化</span></span><br><span class="line"><span class="comment">// Safari浏览器进行了尾调用优化，factorial(500000, 1)结果为Infinity，因为结果超出了JS可表示的数字范围</span></span><br><span class="line"><span class="comment">// 如果在node v6版本下执行，需要加--harmony_tailcalls参数，node --harmony_tailcalls test.js</span></span><br><span class="line"><span class="comment">// node最新版本已经移除了--harmony_tailcalls功能</span></span><br></pre></td></tr></table></figure></p><p>通过尾递归，我们把复杂度从O(n)降低到了O(1)，如果数据足够大的话，会节省很多的计算时间。<br>由此可见，<strong>尾调用优</strong>化对递归操作意义重大，所以一些函数式编程语言将其写入了语言规格。</p><h3 id="避免改写递归函数"><a href="#避免改写递归函数" class="headerlink" title="避免改写递归函数"></a>避免改写递归函数</h3><p>尾递归的实现，往往需要改写递归函数，确保最后一步只调用自身。<br>要做到这一点，需要把函数内部所有用到的中间变量改写为函数的参数，就像上面的factorial()函数改写一样。</p><p>这样做的缺点就是语义不明显，要计算阶乘的函数，为什么还要另外传入一个参数叫total？<br>解决这个问题的办法有两个：</p><h4 id="1-ES6参数默认值"><a href="#1-ES6参数默认值" class="headerlink" title="1. ES6参数默认值"></a>1. ES6参数默认值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span> (<span class="params">num, total = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num === <span class="number">1</span>) <span class="keyword">return</span> total;</span><br><span class="line">    <span class="keyword">return</span> factorial(num - <span class="number">1</span>, num * total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">factorial(<span class="number">5</span>);                <span class="comment">// 120</span></span><br><span class="line">factorial(<span class="number">10</span>);               <span class="comment">// 3628800</span></span><br></pre></td></tr></table></figure><h4 id="2-用一个符合语义的函数去调用改写后的尾递归函数"><a href="#2-用一个符合语义的函数去调用改写后的尾递归函数" class="headerlink" title="2. 用一个符合语义的函数去调用改写后的尾递归函数"></a>2. 用一个符合语义的函数去调用改写后的尾递归函数</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function tailFactorial (<span class="built_in">num</span>, total) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">num</span> === <span class="number">1</span>) <span class="built_in">return</span> total;</span><br><span class="line">    <span class="built_in">return</span> tailFactorial(<span class="built_in">num</span> - <span class="number">1</span>, <span class="built_in">num</span> * total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function <span class="built_in">factorial</span> (<span class="built_in">num</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> tailFactorial(<span class="built_in">num</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">factorial</span>(<span class="number">5</span>);                // <span class="number">120</span></span><br><span class="line"><span class="built_in">factorial</span>(<span class="number">10</span>);               // <span class="number">3628800</span></span><br></pre></td></tr></table></figure><p>上面这种写法其实有点类似于做了一个函数柯里化，但不完全符合柯里化的概念。<br><strong>函数柯里化</strong>是指把接受多个参数的函数转换为接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下参数且返回结果的新函数。</p><p>概念看着很绕口，我们来个例子感受一下：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通加法函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> <span class="params">(x, y, z)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);        <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 改写为柯里化加法函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> <span class="params">(x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(z)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x + y + z;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>);        <span class="comment">// 6</span></span><br></pre></td></tr></table></figure></p><p>可以看到，柯里化函数通过闭包找到父作用域里的变量，最后依次相加输出结果。<br>通过这个例子，可能看不出为什么要用柯里化，有什么好处，这个我们以后再谈，这里先引出一个概念。</p><p>是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。</p><p>如果用柯里化改写求阶乘的例子：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 柯里化函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span> <span class="params">(fn)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _fnArgLength = fn.length;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">wrap</span> <span class="params">(<span class="rest_arg">...args</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _args = args;</span><br><span class="line">        <span class="keyword">var</span> _argLength = _args.length;</span><br><span class="line">        <span class="comment">// 如果传的是所有参数，直接返回fn调用</span></span><br><span class="line">        <span class="keyword">if</span> (_fnArgLength === _argLength) &#123;</span><br><span class="line">            <span class="keyword">return</span> fn.apply(<span class="literal">null</span>, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">act</span> <span class="params">(<span class="rest_arg">...args</span>)</span> </span>&#123;</span><br><span class="line">            _args = _args.concat(args);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_args.length === _fnArgLength) &#123;</span><br><span class="line">                <span class="keyword">return</span> fn.apply(<span class="literal">null</span>, _args);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> act;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> act;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尾递归函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tailFactorial</span> <span class="params">(num, total)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num === <span class="number">1</span>) <span class="keyword">return</span> total;</span><br><span class="line">    <span class="keyword">return</span> tailFactorial(num - <span class="number">1</span>, num * total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 改写</span></span><br><span class="line"><span class="keyword">var</span> factorial = curry(tailFactorial);</span><br><span class="line"></span><br><span class="line">factorial(<span class="number">5</span>)(<span class="number">1</span>);        <span class="comment">// 120</span></span><br><span class="line">factorial(<span class="number">10</span>)(<span class="number">1</span>);       <span class="comment">// 3628800</span></span><br></pre></td></tr></table></figure></p><p>这是符合柯里化概念的写法，在阮一峰老师的文章中是这样写的：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">currying</span><span class="params">(fn, n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fn.call(<span class="keyword">this</span>, m, n);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tailFactorial</span><span class="params">(n, total)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> total;</span><br><span class="line">  <span class="keyword">return</span> tailFactorial(n - <span class="number">1</span>, n * total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> factorial = currying(tailFactorial, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">factorial(<span class="number">5</span>) <span class="comment">// 120</span></span><br></pre></td></tr></table></figure></p><p>我个人认为，这种写法其实不是柯里化，因为并没有将多参数的tailFacrotial改写为接受单参数的形式，只是换了一种写法，和下面这样写意义是一样的：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function <span class="built_in">factorial</span> (<span class="built_in">num</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> tailFactorial(<span class="built_in">num</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function tailFactorial (<span class="built_in">num</span>, total) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">num</span> === <span class="number">1</span>) <span class="built_in">return</span> total;</span><br><span class="line">    <span class="built_in">return</span> tailFactorial(<span class="built_in">num</span> - <span class="number">1</span>, <span class="built_in">num</span> * total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">factorial</span>(<span class="number">5</span>);                // <span class="number">120</span></span><br><span class="line"><span class="built_in">factorial</span>(<span class="number">10</span>);               // <span class="number">3628800</span></span><br></pre></td></tr></table></figure></p><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>这篇文章我们主要讨论了尾调用优化和柯里化。<br>要注意的是，经过测试，Chrome和Firefox并没有对尾调用进行优化，Safari对尾调用进行了优化。<br>Node高版本也已经去除了通过–harmony_tailcalls参数启用尾调用优化。</p><p>有任何问题，欢迎大家留言讨论~~</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://www.ruanyifeng.com/blog/2015/04/tail-call.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/04/tail-call.html</a><br><a href="https://juejin.im/post/5a4d898a518825698e7277d1" target="_blank" rel="noopener">https://juejin.im/post/5a4d898a518825698e7277d1</a><br><a href="https://github.com/lamdu/lamdu/issues/90" target="_blank" rel="noopener">https://github.com/lamdu/lamdu/issues/90</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.liuxuan.site/blog/20180410/tail_call.jpg?imageView2/1/w/1000/h/400&quot; alt=&quot;label-statement&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;尾调用&quot;&gt;&lt;a href=&quot;#尾调用&quot; class=&quot;headerlink&quot; title=&quot;尾调用&quot;&gt;&lt;/a&gt;尾调用&lt;/h3&gt;&lt;h4 id=&quot;1-定义&quot;&gt;&lt;a href=&quot;#1-定义&quot; class=&quot;headerlink&quot; title=&quot;1. 定义&quot;&gt;&lt;/a&gt;1. 定义&lt;/h4&gt;&lt;p&gt;尾调用是函数式编程中一个很重要的概念，当一个函数执行时的最后一个步骤是返回另一个函数的调用，这就叫做尾调用。&lt;/p&gt;
&lt;p&gt;注意这里函数的调用方式是无所谓的，以下方式均可：&lt;br&gt;&lt;figure class=&quot;highlight autoit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;函数调用:     &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(···)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;方法调用:     obj.method(···)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;call&lt;/span&gt;调用:     &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(···)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apply调用:    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(···)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;并且只有下列表达式会包含尾调用：&lt;br&gt;&lt;figure class=&quot;highlight makefile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;条件操作符:      ? :&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;逻辑或:         ||&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;逻辑与:         &amp;amp;&amp;amp;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;逗号:           ,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="//blog.liuxuan.site/categories/JavaScript/"/>
    
    
      <category term="Javascript" scheme="//blog.liuxuan.site/tags/Javascript/"/>
    
      <category term="尾调用" scheme="//blog.liuxuan.site/tags/%E5%B0%BE%E8%B0%83%E7%94%A8/"/>
    
      <category term="尾递归" scheme="//blog.liuxuan.site/tags/%E5%B0%BE%E9%80%92%E5%BD%92/"/>
    
      <category term="函数式" scheme="//blog.liuxuan.site/tags/%E5%87%BD%E6%95%B0%E5%BC%8F/"/>
    
      <category term="柯里化" scheme="//blog.liuxuan.site/tags/%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>搭建 karma + jasmine 测试环境</title>
    <link href="//blog.liuxuan.site/2018/04/03/front_end_test_karma_jasmine/"/>
    <id>//blog.liuxuan.site/2018/04/03/front_end_test_karma_jasmine/</id>
    <published>2018-04-03T02:36:00.000Z</published>
    <updated>2018-04-06T19:06:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://image.liuxuan.site/blog/20180407/test_karma.jpg?imageView2/1/w/1000/h/400" alt="test-karma"></p><p>在前端开发的过程中，我们会写很多的功能函数，这样就会涉及到对这些功能函数进行单元测试，而karma就是一个很好用的可以在浏览器环境中进行测试的集成工具。</p><h3 id="什么是-karma"><a href="#什么是-karma" class="headerlink" title="什么是 karma"></a>什么是 karma</h3><p>karma 是由Angular团队开发的一款测试工具，帮助开发者更好更快速地在多种环境下执行测试代码，拿到测试结果。在运行的时候，它会自动启动配置好的浏览器，同时也会启动一个 node 服务器，然后在启动好的浏览器中执行测试代码，并将测试代码执行结果传回给 node 服务器，然后 node 服务器在打印出收到的执行结果。</p><h3 id="安装-karma"><a href="#安装-karma" class="headerlink" title="安装 karma"></a>安装 karma</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm  install karma -D</span></span><br></pre></td></tr></table></figure><p>这里安装到项目路径下就可以了（-D 是 –save-dev 的简写）。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./<span class="keyword">node</span><span class="title">-modules</span>/.bin/karma init</span><br></pre></td></tr></table></figure><p>这里如果不想每次都执行本地路径下的 karma 命令，可以在全局安装 karma-cli<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install karma-cli -g</span></span><br></pre></td></tr></table></figure></p><p>以后就可以在任何路径执行 <strong>karma start</strong> 并且运行的 karma 都是在当前项目下安装的版本。</p><a id="more"></a><p>在 init 时会让你选择一些配置项：</p><p><strong>test framework</strong><br>我这里选择的是jasmine，它是一款JavaScript断言测试库<br><strong>use Require.js</strong><br>根据个人情况，我选择的是no<br><strong>capture any browsers automatically</strong><br>选择浏览器，我选择的是无头浏览器PhantomJS<br><strong>location of your source files</strong><br>为空<br><strong>any of files included by the previous patterns be excluted</strong><br>为空<br><strong>karma to watch all files and run the tests on change</strong><br>是否监测，我选择的是no</p><p>在选择完所有配置项后，会自动生成karma.conf.js配置文件。</p><h3 id="根据配置项的选择安装插件"><a href="#根据配置项的选择安装插件" class="headerlink" title="根据配置项的选择安装插件"></a>根据配置项的选择安装插件</h3><p><strong>（1）</strong> 测试框架选择的是jasmine，安装步骤如下：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install </span><span class="keyword">jasmine-core </span>karma-<span class="keyword">jasmine </span>-D</span><br></pre></td></tr></table></figure></p><p>这里要装两个，一个是jasmine的核心，另一个是karma对jasmine的封装。</p><p><strong>（2）</strong> 浏览器选择的是PhantomJS，安装步骤如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install karma-phantomjs-launcher -D</span></span><br></pre></td></tr></table></figure></p><p><strong>（3）</strong> 如果涉及到对以ES6编写的代码进行测试，就要安装Babel及其相关插件：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install </span><span class="keyword">babel-cli </span><span class="keyword">babel-preset-env </span><span class="keyword">babel-plugin-transform-es2015-modules-umd </span>-D</span><br><span class="line">$ npm <span class="keyword">install </span>karma-<span class="keyword">babel-preprocessor </span>-D</span><br></pre></td></tr></table></figure></p><p><strong>（4）</strong> 安装生成代码覆盖率报告的插件：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install karma-coverage -D</span></span><br></pre></td></tr></table></figure></p><h3 id="修改karma配置文件"><a href="#修改karma配置文件" class="headerlink" title="修改karma配置文件"></a>修改karma配置文件</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// karma.<span class="keyword">conf</span>.js</span><br><span class="line"></span><br><span class="line">module.exports = <span class="function"><span class="keyword">function</span><span class="params">(config)</span> &#123;</span></span><br><span class="line">  config.<span class="keyword">set</span>(&#123;</span><br><span class="line">    basePath: <span class="string">''</span>,</span><br><span class="line">    framework<span class="variable">s:</span> [<span class="string">'jasmine'</span>],</span><br><span class="line">    <span class="keyword">file</span><span class="variable">s:</span> [</span><br><span class="line">      <span class="string">'./src/**/*.js'</span>,</span><br><span class="line">      <span class="string">'./test/**/*.spec.js'</span></span><br><span class="line">    ],</span><br><span class="line">    exclude: [</span><br><span class="line">    ],</span><br><span class="line">    preprocessor<span class="variable">s:</span> &#123;</span><br><span class="line">      <span class="string">'./src/**/*.js'</span>: [<span class="string">'babel'</span>],</span><br><span class="line">      <span class="string">'./test/**/*.spec.js'</span>: [<span class="string">'babel'</span>, <span class="string">'coverage'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    reporter<span class="variable">s:</span> [<span class="string">'progress'</span>, <span class="string">'coverage'</span>],</span><br><span class="line">    coverageReporter: &#123;</span><br><span class="line">      <span class="built_in">type</span>: <span class="string">'html'</span>,</span><br><span class="line">      dir: <span class="string">'coverage/'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    por<span class="variable">t:</span> <span class="number">9876</span>,</span><br><span class="line">    color<span class="variable">s:</span> true,</span><br><span class="line">    logLeve<span class="variable">l:</span> config.LOG_INFO,</span><br><span class="line">    autoWatch: false,</span><br><span class="line">    browser<span class="variable">s:</span> [<span class="string">'PhantomJS'</span>],</span><br><span class="line">    singleRun: true,</span><br><span class="line">    concurrency: Infinity</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改Babel配置文件：<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">.babelrc</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [<span class="string">"env"</span>],</span><br><span class="line">  <span class="string">"plugins"</span>: [<span class="string">"transform-es2015-modules-umd"</span>],</span><br><span class="line">  <span class="string">"auxiliaryCommentBefore"</span>: <span class="string">"istanbul ignore next"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="写测试文件"><a href="#写测试文件" class="headerlink" title="写测试文件"></a>写测试文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PraiseButton.spec.js</span></span><br><span class="line"><span class="keyword">import</span> PraiseButton <span class="keyword">from</span> <span class="string">'../src/PraiseButton.js'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'测试点赞组件'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  it(<span class="string">'addOne() 函数'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> testPraiseButton = <span class="keyword">new</span> PraiseButton();</span><br><span class="line">    testPraiseButton.addOne();</span><br><span class="line"></span><br><span class="line">    expect(testPraiseButton.countNum).toBe(<span class="number">1</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> karma start</span></span><br></pre></td></tr></table></figure><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>按照上述步骤，大家应该可以配置好自己的 karma + jasmine 测试环境，如果遇到问题或者文中有写错的地方，欢迎大家来讨论。文章末尾是需要安装模块的链接，大家可以一键直达。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>karma官网<br><a href="https://karma-runner.github.io/2.0/intro/installation.html" target="_blank" rel="noopener">https://karma-runner.github.io/2.0/intro/installation.html</a><br>karma-cli<br><a href="https://www.npmjs.com/package/karma-cli" target="_blank" rel="noopener">https://www.npmjs.com/package/karma-cli</a><br>karma-jasmine<br><a href="https://www.npmjs.com/package/karma-jasmine" target="_blank" rel="noopener">https://www.npmjs.com/package/karma-jasmine</a><br>jasmine-core<br><a href="https://www.npmjs.com/package/jasmine-core" target="_blank" rel="noopener">https://www.npmjs.com/package/jasmine-core</a><br>karma-coverage<br><a href="https://www.npmjs.com/package/karma-coverage" target="_blank" rel="noopener">https://www.npmjs.com/package/karma-coverage</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.liuxuan.site/blog/20180407/test_karma.jpg?imageView2/1/w/1000/h/400&quot; alt=&quot;test-karma&quot;&gt;&lt;/p&gt;
&lt;p&gt;在前端开发的过程中，我们会写很多的功能函数，这样就会涉及到对这些功能函数进行单元测试，而karma就是一个很好用的可以在浏览器环境中进行测试的集成工具。&lt;/p&gt;
&lt;h3 id=&quot;什么是-karma&quot;&gt;&lt;a href=&quot;#什么是-karma&quot; class=&quot;headerlink&quot; title=&quot;什么是 karma&quot;&gt;&lt;/a&gt;什么是 karma&lt;/h3&gt;&lt;p&gt;karma 是由Angular团队开发的一款测试工具，帮助开发者更好更快速地在多种环境下执行测试代码，拿到测试结果。在运行的时候，它会自动启动配置好的浏览器，同时也会启动一个 node 服务器，然后在启动好的浏览器中执行测试代码，并将测试代码执行结果传回给 node 服务器，然后 node 服务器在打印出收到的执行结果。&lt;/p&gt;
&lt;h3 id=&quot;安装-karma&quot;&gt;&lt;a href=&quot;#安装-karma&quot; class=&quot;headerlink&quot; title=&quot;安装 karma&quot;&gt;&lt;/a&gt;安装 karma&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; npm  install karma -D&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里安装到项目路径下就可以了（-D 是 –save-dev 的简写）。&lt;/p&gt;
&lt;h3 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h3&gt;&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ./&lt;span class=&quot;keyword&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;-modules&lt;/span&gt;/.bin/karma init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里如果不想每次都执行本地路径下的 karma 命令，可以在全局安装 karma-cli&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; npm install karma-cli -g&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以后就可以在任何路径执行 &lt;strong&gt;karma start&lt;/strong&gt; 并且运行的 karma 都是在当前项目下安装的版本。&lt;/p&gt;
    
    </summary>
    
      <category term="前端测试" scheme="//blog.liuxuan.site/categories/%E5%89%8D%E7%AB%AF%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试" scheme="//blog.liuxuan.site/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="karma" scheme="//blog.liuxuan.site/tags/karma/"/>
    
      <category term="jasmine" scheme="//blog.liuxuan.site/tags/jasmine/"/>
    
      <category term="phantomJS" scheme="//blog.liuxuan.site/tags/phantomJS/"/>
    
      <category term="Babel" scheme="//blog.liuxuan.site/tags/Babel/"/>
    
      <category term="ES6" scheme="//blog.liuxuan.site/tags/ES6/"/>
    
      <category term="System" scheme="//blog.liuxuan.site/tags/System/"/>
    
      <category term="node" scheme="//blog.liuxuan.site/tags/node/"/>
    
      <category term="npm" scheme="//blog.liuxuan.site/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>JS学习系列 07 - 标签声明（Label Statement）</title>
    <link href="//blog.liuxuan.site/2018/03/10/javascript_07_label_statement/"/>
    <id>//blog.liuxuan.site/2018/03/10/javascript_07_label_statement/</id>
    <published>2018-03-10T02:36:00.000Z</published>
    <updated>2018-04-21T15:17:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://image.liuxuan.site/blog/20180407/label_statement.jpg?imageView2/1/w/1000/h/400" alt="label-statement"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>假设有这么一道题：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'done'</span>);</span><br></pre></td></tr></table></figure></p><p>我想要当 j = 2 的时候就退出所有的for语句，打印最后的 done ，你会怎么做？</p><p>可能有的同学会想到这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(j);</span><br><span class="line">            <span class="keyword">if</span> (j === <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'done'</span>);</span><br></pre></td></tr></table></figure></p><p>这样可以实现，但是又多写了一个函数，那么有没有别的办法呢？</p><a id="more"></a><p>再看一个例子，你也一定见到过这样的写法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设str是你通过ajax接收到的JSON串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'&#123;"name": "liu", "age": 20&#125;'</span>;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">eval</span>(<span class="string">'('</span> + str + <span class="string">')'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure></p><p>那么，你有没有想过 eval 里面为什么要加上括号呢？如果不加又是什么情况？（<em>提前剧透，不加括号这里会报错哦</em>）。</p><p><strong>接着往下看，当你读完这篇文章的时候，心中的疑惑会完全解开。</strong></p><h3 id="Label-Statement"><a href="#Label-Statement" class="headerlink" title="Label Statement"></a>Label Statement</h3><p>学过C语言的同学知道，C的语法中有一个语句叫：goto，同时老师也多次强调不让我们使用goto语句，因为会大大影响程序的<strong>可读性</strong>和<strong>可维护性</strong>。</p><p>我们先来看一段C语言的goto代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">2</span>, b=<span class="number">3</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(a&gt;b) &#123;</span><br><span class="line">        <span class="keyword">goto</span> aa;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello"</span>);</span><br><span class="line">    </span><br><span class="line">    aa: <span class="built_in">printf</span>(<span class="string">"s"</span>); </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当 a &lt; b 的时候，这里会打印字符串 “hello”，然后结束。<br>当 a &gt; b 的时候，由于goto语句的作用，就会跳过 print(“hello”)，直接跳到 aa 标签声明的代码块中，打印字符 “s”，然后结束。</p><p>这就是goto语句的作用，通过标签声明一个代码块，然后在任何地方都可以执行 goto ‘labe’ 来进行程序跳转。</p><p>显而易见，这样的写法，违背了程序顺序执行的原则，会跳来跳去，最后导致根本无法维护，所以，记住老师的话，<strong>不要使用 goto 语句</strong>。</p><p>那么，看完了C语言中的 goto 语句，和我们的 JavaScript 又有什么关系呢？<br>这就引出了今天的主题：Label Statement，它就是 JS 中的 goto 语句。</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>首先明确一个原则，<strong>在JavaScript中，语句优先</strong>。<br>也就是说，如果一段代码既能够以语句的方式解析，也能用语法的方式解析，在JS中，会优先按语句来解析。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attribute">a </span>: <span class="number">1</span> &#125;</span><br></pre></td></tr></table></figure><p>上面这段代码，在JS中的执行结果是什么呢？<br><strong>大家思考2分钟….</strong></p><hr><hr><p>好，2分钟已过，大家有结果了吗？<br>千万不要在浏览器的控制台中去写这段代码，虽然结果和你开始想的结果一样，<br><strong>但是，它是错误的。</strong></p><p>这是在console控制台中执行的结果：</p><p><img src="http://p54fus2hp.bkt.clouddn.com/blog/20180402/label_console.png?imageView2/1/w/400" alt="label-console图片"></p><p>这是在watch中的执行结果：</p><p><img src="http://p54fus2hp.bkt.clouddn.com/blog/20180402/label_watch.png?imageView2/1/w/400" alt="clipboard.png"></p><p>可以看到两个结果是不一样的。<br>console是经过处理的这里不能相信，watch是直接JS的运行环境执行后的结果，是正确的。</p><p>为什么 { a : 1 } 结果会是 1 呢？</p><p>我换一个写法：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">a </span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>相信有的同学已经明白了，在JS中，{}既可以代表代码块，又可以作为Object的语法标志。<br>那么我们前面说过，<strong>JS是语句优先的，当一段代码既可以按照语句解析，又可以按照语法解析的时候，会优先按语句解析。</strong></p><p>当把{}当做是代码块的时候，里面的 a : 1，是不是很像C语言goto语句的标签声明呢？<br>开头我们提出的第一个问题，如果用这种方式来解决，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">aa : &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(j);</span><br><span class="line">            <span class="keyword">if</span> (j === <span class="number">2</span>) <span class="keyword">break</span> aa;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'done'</span>);</span><br></pre></td></tr></table></figure></p><p>aa是标签声明，包裹一个代码块，break 的作用是跳出当前的循环，本来是无法跳出外面那层for循环的，但是 break aa，这里跳出了整个代码块。</p><p><strong>当然，这种写法是完全不提倡的，这里只是用来说明JS中的Label Statement这个特性，大家千万不要这样写代码。</strong></p><p>再来看开头提出的第二个问题：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设str是你通过ajax接收到的JSON串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'&#123;"name": "liu", "age": 20&#125;'</span>;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">eval</span>(<span class="string">'('</span> + str + <span class="string">')'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure></p><p>我们知道，eval(str)会把接收到的字符串在当前上下文中执行，如果不加括号：<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">eval</span><span class="params">('&#123;<span class="string">"name"</span>: <span class="string">"liu"</span>, <span class="string">"age"</span>: <span class="number">20</span>&#125;&#125;')</span></span></span><br></pre></td></tr></table></figure></p><p>这里的执行语句就会变成：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span> : <span class="string">"liu"</span>, <span class="attr">"age"</span> : <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>{}按照语句解析，执行里面的逗号表达式，我们知道逗号表达式要求每一项都必须是表达式，输出最后一项的结果，而这里不满足要求，所以会报错。</p><p><img src="http://p54fus2hp.bkt.clouddn.com/blog/20180402/label_watch2.png?imageView2/1/w/400" alt="label-watch2"></p><p>但是加上括号就变成了这样：<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(&#123;</span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"liu"</span>, <span class="string">"age"</span> : <span class="number">20</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>小括号可以把里面的内容当做表达式来解析，那么里面的内容就是一个对象了。</p><p><img src="http://p54fus2hp.bkt.clouddn.com/blog/20180402/label_watch3.png?imageView2/1/w/400" alt="label-watch2"></p><p>这也是立即执行函数的原理：<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">function</span> () &#123;</span><br><span class="line">    console.log(<span class="name">'IIFE'</span>)<span class="comment">;</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><p>小括号把函数声明变成了函数表达式，后面再跟一个小括号表示调用。</p><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>这里通过几个例子，引出了 JavaScript 的标签声明语句（Label Statement），从而解释了一些我们常用写法的原理。</p><p><strong>以后万一有人问你为什么 eval() 解析JSON要加括号呢？</strong><br><strong>这回知道怎么说了吧。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.liuxuan.site/blog/20180407/label_statement.jpg?imageView2/1/w/1000/h/400&quot; alt=&quot;label-statement&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;假设有这么一道题：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(j);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;done&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我想要当 j = 2 的时候就退出所有的for语句，打印最后的 done ，你会怎么做？&lt;/p&gt;
&lt;p&gt;可能有的同学会想到这样：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(j);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (j === &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;done&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样可以实现，但是又多写了一个函数，那么有没有别的办法呢？&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="//blog.liuxuan.site/categories/JavaScript/"/>
    
    
      <category term="Javascript" scheme="//blog.liuxuan.site/tags/Javascript/"/>
    
      <category term="Label Statement" scheme="//blog.liuxuan.site/tags/Label-Statement/"/>
    
      <category term="C语言" scheme="//blog.liuxuan.site/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Goto语句" scheme="//blog.liuxuan.site/tags/Goto%E8%AF%AD%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>HTML - 移动端 meta viewport</title>
    <link href="//blog.liuxuan.site/2017/12/10/html_meta_viewport/"/>
    <id>//blog.liuxuan.site/2017/12/10/html_meta_viewport/</id>
    <published>2017-12-10T02:36:00.000Z</published>
    <updated>2018-04-06T19:05:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://image.liuxuan.site/blog/20180407/meta_viewport.jpg?imageView2/1/w/1000/h/400" alt="meta-viewport"></p><p>我们在做响应式布局的时候，肯定要考虑到适配移动端的屏幕，大多数同学也一定复制粘贴过下面这段代码：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta <span class="attr">name="viewport"</span> <span class="attr">content="width=device-width,</span> <span class="attr">initial-scale=1.0,</span> <span class="attr">maximum-scale=1.0,</span> <span class="attr">user-scalable=0"&gt;</span></span><br></pre></td></tr></table></figure></p><p>添加了这段代码以后，我们在移动端看到的显示效果就非常好，整个页面不会缩成一团。但是很多时候我们只是拿来用了，没有去理解这段代码究竟干了什么，为什么会影响移动端页面的布局效果，它又是怎么起作用的。今天我们就花点时间来彻底搞明白 <strong>viewport 到底是什么</strong>。</p><h3 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h3><p>在讨论 viewport 之前，我们需要理解一些单位的概念：</p><ul><li><strong>设备像素 / 物理像素（physical pixels）</strong><br>是指屏幕的实际物理像素点，比如 iPhone6 Plus 是 1920*1080 的像素分辨率，那么代表它纵向有 1920 个物理像素点，横向有 1080 个物理像素点。</li></ul><a id="more"></a><ul><li><p><strong>CSS 像素（css pixel） / 密度独立像素（density independent pixels - dip）</strong><br>CSS 像素是 web 编程中的概念，是抽象的，不是实际存在的。它是独立于设备用于逻辑上衡量像素的单位，所以又叫密度独立像素。dip 有时候也缩写为 dp 。</p></li><li><p><strong>屏幕尺寸</strong><br>指屏幕的对角线长度，单位是英寸（inch），1 英寸 = 2.54 厘米。常见屏幕尺寸有 5.0、5.5 和 6.0 等。</p></li><li><p><strong>屏幕像素密度（pixels per inch - ppi）</strong><br>指屏幕上每英寸可以显示的物理像素点的数量。比如 iPhone6 Plus 是 5.5 英寸，分辨率（也就是物理像素）是 1920*1080 像素，那么它的 ppi = √(1920^2+1080^2) / 5.5 ≈ 401ppi 。也就是说它每英寸可以显示 440 个物理像素点。</p></li><li><p><strong>设备像素比</strong><br>指物理像素和密度独立像素的比值。<br>window.devicePixelRatio = 物理像素 / dip。<br>可以通过 window.devicePixelRatio 获得，该属性被所有WebKit浏览器以及Opera所支持。</p></li></ul><h3 id="viewport"><a href="#viewport" class="headerlink" title="viewport"></a>viewport</h3><p>viewport 是指 web 页面上用户的可见区域。</p><p>viewport 的大小是和设备相关的，在移动端例如手机上，viewport 的大小是比 PC 端要小的，一般无论手机还是平板，默认的 viewport 大小都是 980px 。<br>刚开始 web 页面仅仅是在 PC 端进行查看的，但是后来随着移动互联网的发展，越来越多的 web 访问是通过移动端进行的，但是因为 PC 的 viewport 要比移动端大，所以为了快速修复这个问题，移动端的浏览器默认只是把整个页面等比例缩小到移动端的 viewport 大小。</p><p>这样做的后果就是，用户看到的是一个缩小版的整个页面，字体、图标和内容等等都非常小，想要点击或者查看都需要去放大页面进行操作，放大页面之后就会出现横向滚动条，这对用户体验来说是非常不好的。</p><p>那么回到我们最开始写的 meta 标签：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta <span class="attr">name="viewport"</span> <span class="attr">content="width=device-width,</span> <span class="attr">initial-scale=1.0,</span> <span class="attr">maximum-scale=1.0,</span> <span class="attr">user-scalable=0"&gt;</span></span><br></pre></td></tr></table></figure></p><p>device-width 是指这个设备最理想的 viewport 宽度。iPhone6 之前的 device-width 都是 320px ，iPhone6 是 375px ，iPhone6 Plus 是 414px ，<strong>而这个 device-width 是和 CSS像素（也叫密度独立像素 dip）是相同的</strong>。也就是说，web 页面中的 CSS像素的值等于 device-width 时，对应到手机上就是占满全屏的宽度。</p><p>安卓手机的 device-width 有320px、360px 和 384px 等等，不同的设备 device-width 是不一样的。</p><p>initial-scale=1.0 是指初始化的时候缩放大小是1，也就是不缩放。</p><p>user-scalable=0 是指禁止用户进行缩放。</p><p>maximum-scale=1.0 是指用户最大缩放大小是1，其实在禁止用户缩放以后，这一句可以省略。</p><p><strong>在设计人员为移动端设计页面的时候经常可以听到2倍图和3倍图这些词语，这又是什么意思呢，我们以 iPhone6 举例</strong>：</p><p>iPhone6 的分辨率（也就是物理像素）是 1334*750 像素，它的 device-width 是 375px 。</p><p>如果我们将屏幕横向分成 375 份，CSS 中 1px 占用的1份，因为屏幕就那么大，CSS中 width 等于 375px 时横向就会占满全屏，但是实际上<strong>存在的物理像素点横向是750个</strong> ，所以在我们写 CSS 时 1px 对应到屏幕上是占用了2个物理像素点。</p><p>如果我们不写 <strong><em>width=device-width</em></strong> 这一句的话，默认 viewport 宽是 980px 。那么把 iPhone6 的屏幕横向分成980份，CSS 中 1px 占用1份，但是真正的像素点横向只有750个，这就意味着，实际上渲染出来的宽度是 75/98 个像素大小（只是理论上）。</p><p>设计人员在设计原型图的时候以 750px 的宽度为基准，我们在写 CSS的时候缩写一半来使用，但是在渲染的时候 1px 等于 2px 的物理像素，所以整个图片还是按 750px 的宽度来显示的，不会失真。</p><p>如果设计人员以 375px 的宽度为基准，那么我们在使用的时候直接把设计图中的像素宽度用在 CSS 中，那么在渲染的时候，1px 等于 2px 的物理像素，相当于图片会放大2倍，就会产生失真。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在添加 <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">  之后，移动端的 viewport 宽度会从默认的 980px 变成各个设备的 device-width 。</p><p>CSS 中的 100% 就等于 device-width 。 </p><p>知道了这些，我们就可以结合别的知识，为页面进行响应式布局了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.liuxuan.site/blog/20180407/meta_viewport.jpg?imageView2/1/w/1000/h/400&quot; alt=&quot;meta-viewport&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们在做响应式布局的时候，肯定要考虑到适配移动端的屏幕，大多数同学也一定复制粘贴过下面这段代码：&lt;br&gt;&lt;figure class=&quot;highlight nix&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;meta &lt;span class=&quot;attr&quot;&gt;name=&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content=&quot;width=device-width,&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;initial-scale=1.0,&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;maximum-scale=1.0,&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;user-scalable=0&quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;添加了这段代码以后，我们在移动端看到的显示效果就非常好，整个页面不会缩成一团。但是很多时候我们只是拿来用了，没有去理解这段代码究竟干了什么，为什么会影响移动端页面的布局效果，它又是怎么起作用的。今天我们就花点时间来彻底搞明白 &lt;strong&gt;viewport 到底是什么&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;单位&quot;&gt;&lt;a href=&quot;#单位&quot; class=&quot;headerlink&quot; title=&quot;单位&quot;&gt;&lt;/a&gt;单位&lt;/h3&gt;&lt;p&gt;在讨论 viewport 之前，我们需要理解一些单位的概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;设备像素 / 物理像素（physical pixels）&lt;/strong&gt;&lt;br&gt;是指屏幕的实际物理像素点，比如 iPhone6 Plus 是 1920*1080 的像素分辨率，那么代表它纵向有 1920 个物理像素点，横向有 1080 个物理像素点。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="HTML" scheme="//blog.liuxuan.site/categories/HTML/"/>
    
    
      <category term="HTML" scheme="//blog.liuxuan.site/tags/HTML/"/>
    
      <category term="meta" scheme="//blog.liuxuan.site/tags/meta/"/>
    
      <category term="viewport" scheme="//blog.liuxuan.site/tags/viewport/"/>
    
      <category term="pt" scheme="//blog.liuxuan.site/tags/pt/"/>
    
      <category term="dip" scheme="//blog.liuxuan.site/tags/dip/"/>
    
      <category term="ppi" scheme="//blog.liuxuan.site/tags/ppi/"/>
    
  </entry>
  
  <entry>
    <title>JS学习系列 06 - 变量对象</title>
    <link href="//blog.liuxuan.site/2017/08/10/javascript_06_variable_object/"/>
    <id>//blog.liuxuan.site/2017/08/10/javascript_06_variable_object/</id>
    <published>2017-08-10T02:36:00.000Z</published>
    <updated>2018-04-21T15:17:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://image.liuxuan.site/blog/20180407/variable_object.jpg?imageView2/1/w/1000/h/400" alt="variable-object"></p><p>上一节我们讨论了<a href="http://www.jianshu.com/p/05641baa5134" target="_blank" rel="noopener">执行上下文</a>，那么在上下文中到底有什么内容，为什么它会和作用域链扯上关系，JS 解释器又是怎么找到我们声明的函数和变量，看完这一节，相信大家就不会再迷惑了。</p><p><strong>变量对象</strong>就是<strong>执行上下文</strong>和<strong>作用域链</strong>中间的桥梁。<br>剧透一下，神秘的 <strong>this</strong> 就存在于执行上下文环境之中！<br>当然，之后我会单独用几节来彻底讲明白 <strong>this 到底是什么</strong>（其实 this 很简单）。</p><p>接下来，我们进入正文。</p><h3 id="执行上下文包含什么"><a href="#执行上下文包含什么" class="headerlink" title="执行上下文包含什么"></a>执行上下文包含什么</h3><p>一个执行上下文我们可以抽象的理解为对象（object）。<br>每一个执行上下文都有一些属性（又称为上下文状态），它们用来追踪关联代码的执行进度。</p><p>我用一个结构图来说明：</p><p><img src="http://image.liuxuan.site/blog/20180324/variable_object.png" alt="执行上下文环境 object"></p><a id="more"></a><p><strong>Variable Object</strong> 就代表变量对象。<br><strong>Scope Chain</strong> 代表作用域链。<br><strong>thisValue</strong> 代表神秘的 this 。</p><p>作用域链和 this 留到后面再讲，今天我们先来弄明白<strong>变量对象</strong>。</p><h3 id="变量对象"><a href="#变量对象" class="headerlink" title="变量对象"></a>变量对象</h3><blockquote><p>A variable object is a scope of data related with the execution context. It’s a special object associated with the context and which stores variables and function declarations are being defined within the context.</p></blockquote><blockquote><p>变量对象(variable object) 是与执行上下文相关的数据作用域(scope of data) 。它是与上下文关联的特殊对象，用于存储被定义在上下文中的 变量(variables) 和 函数声明(function declarations) 。</p></blockquote><p><strong>变量对象</strong>（Variable Object – 简写 VO）是一个抽象的概念，指代与执行上下文相关的特殊对象，它存储着在上下文中声明的：</p><ul><li><strong>变量</strong>（var）</li><li><strong>函数声明</strong> （function declaration，简写 FD）</li><li><strong>函数的形参</strong>（arguments）</li></ul><p>我们假设变量对象为一个普通 ECMAScript 对象：<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">VO</span> = &#123;&#125;<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>就像前面讲过的，VO 是执行上下文的一个属性：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">activeExecutionContext = &#123;</span><br><span class="line"><span class="symbol">  VO:</span> &#123;</span><br><span class="line">    <span class="comment">// 上下文数据 （vars, FD, arguments）</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因为变量对象是一个抽象的概念，所以并不能通过变量对象的名称直接访问，但是却可以通过别的方法来间接访问变量对象，例如在全局上下文环境的变量对象会有一个属性 window (DOM 中) 可以引用变量对象自身，全局上下文环境的另一个属性 this 也指向全局上下文环境的变量对象。</p><p>举个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> b = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">exp</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="number">111</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">10</span>);</span><br></pre></td></tr></table></figure></p><p>这里对应的变量对象是：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局上下文环境的变量对象</span></span><br><span class="line">VO(globalContext) = &#123;</span><br><span class="line">   <span class="comment">// 一些全局环境初始化时系统自动创建的属性： Math、String、Date、parseInt等等</span></span><br><span class="line">   ···</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 全局上下文的变量对象中有一个属性可以访问到自身，在浏览器中这个属性是 window ，在 node 中这个属性是 global</span></span><br><span class="line"><span class="symbol">   window:</span> global</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 自己定义的属性</span></span><br><span class="line"><span class="symbol">   a:</span> <span class="number">10</span>,</span><br><span class="line"><span class="symbol">   foo:</span> <span class="params">&lt;reference to function&gt;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// foo 函数上下文的变量对象</span></span><br><span class="line">VO(foo functionContext) = &#123;</span><br><span class="line"><span class="symbol">   num:</span> <span class="number">10</span>,</span><br><span class="line"><span class="symbol">   b:</span> <span class="number">5</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>注意：函数表达式并不包括在变量对象中。</strong></p><h3 id="不同执行上下文中的变量对象"><a href="#不同执行上下文中的变量对象" class="headerlink" title="不同执行上下文中的变量对象"></a>不同执行上下文中的变量对象</h3><p>执行上下文包括：<strong>全局上下文、函数上下文和 eval() 上下文。</strong></p><h4 id="全局上下文中的变量对象"><a href="#全局上下文中的变量对象" class="headerlink" title="全局上下文中的变量对象"></a>全局上下文中的变量对象</h4><p>这里我们先来了解一下什么是全局对象：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">全局对象（<span class="keyword">global</span> <span class="keyword">object</span>）是指在进入任何执行上下文之前就已经创建了的对象。</span><br><span class="line">这个对象只有一份，它的属性在程序中的任何地方都可以访问，全局对象的生命周期终止于程序退出的那一刻。</span><br></pre></td></tr></table></figure></p><p>全局对象初始化时系统将创建并初始化一系列原始属性，例如：Math、String、Date、parseInt、window等等，之后是我们在全局上下文中自己定义的全局变量。在 DOM 中，全局对象的 window 属性可以引用全局对象自身，全局上下文环境的 this 属性也可以引用全局对象。<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局执行上下文环境</span></span><br><span class="line">EC(globalContext) = &#123;</span><br><span class="line">   <span class="comment">// 全局对象（全局上下文环境的变量对象） </span></span><br><span class="line">   <span class="built_in">global</span>: &#123;</span><br><span class="line">      Math: &lt;<span class="params">...</span>&gt;,</span><br><span class="line">      <span class="built_in">String</span>: &lt;<span class="params">...</span>&gt;,</span><br><span class="line">      <span class="params">...</span></span><br><span class="line">      <span class="params">...</span></span><br><span class="line">      window: <span class="built_in">global</span>     <span class="comment">// 引用全局对象自身</span></span><br><span class="line">   &#125;,</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// this 属性</span></span><br><span class="line">   this: <span class="built_in">global</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 作用域链</span></span><br><span class="line">   <span class="params">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>举个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);               <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a);        <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.a);          <span class="comment">// 10</span></span><br></pre></td></tr></table></figure></p><p>因此，在全局上下文环境中，变量对象用全局对象来表示。</p><h4 id="函数上下文中的变量对象"><a href="#函数上下文中的变量对象" class="headerlink" title="函数上下文中的变量对象"></a>函数上下文中的变量对象</h4><p>在函数上下文中，变量对象用活动对象 AO（Active Object）来表示。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">VO</span><span class="params">(functionContext)</span></span> = AO</span><br></pre></td></tr></table></figure></p><p>活动对象是在进入函数上下文时刻被创建的，它是通过函数的 arguments 属性进行初始化。arguments 也是一个对象。<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AO = &#123;</span><br><span class="line">   arguments: &#123;</span><br><span class="line">      ...</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>arguments 是活动对象的一个属性，它也是一个对象，包括以下属性：</p><ol><li>callee - 指向当前函数的引用</li><li>length - 真正传递的参数个数</li><li>properties-indexes - index 是字符串类型的整数，例如”1”: “aa”，类似于数组类型，也可以通过arguments[1]来访问，但是不能用数组的方法（push, pop等等）。另外，properties-indexes 的值和实际传递进来的参数之间是共享的，一个改变，另一个也随之改变。</li></ol><p>举个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">// 声明的函数参数数量</span></span><br><span class="line">   <span class="built_in">console</span>.log(foo.length);      <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 实际传递进来的参数数量</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);      <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// arguments 的 callee 属性指向当前函数</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee === foo)   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 参数共享</span></span><br><span class="line">   <span class="built_in">console</span>.log(x === <span class="built_in">arguments</span>[<span class="number">0</span>]);      <span class="comment">// true</span></span><br><span class="line">   <span class="built_in">console</span>.log(x);      <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="number">20</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(x);   <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line">   x = <span class="number">30</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]);    <span class="comment">// 30</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 但是注意，没有传递进来的参数 z ，和第3个索引值是不共享的</span></span><br><span class="line">   z = <span class="number">40</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">2</span>]);      <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">arguments</span>[<span class="number">2</span>] = <span class="number">50</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(z);      <span class="comment">// 40</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">10</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure></p><h3 id="代码是如何被处理的"><a href="#代码是如何被处理的" class="headerlink" title="代码是如何被处理的"></a>代码是如何被处理的</h3><p>在第1节中我们讲过<a href="http://www.jianshu.com/p/04fe77235dac" target="_blank" rel="noopener">js 代码的编译过程</a>，其中有一步叫作<strong>预编译</strong>，是说在代码执行前的几微秒会首先对代码进行编译，形成词法作用域，然后执行。</p><p>那么执行上下文的代码就就可以分成两个阶段来处理：</p><ol><li>进入执行上下文（预编译）</li><li>执行代码</li></ol><p>而变量对象的修改变化和这两个阶段是紧密相关的。<br>并且所有类型的执行上下文都会有这2个阶段。</p><h4 id="进入执行上下文"><a href="#进入执行上下文" class="headerlink" title="进入执行上下文"></a>进入执行上下文</h4><p>当引擎进入执行上下文时（代码还未执行），VO 里已经包含了一些属性：</p><ol><li><p><strong>函数的所有形参（如果是函数执行上下文）</strong><br>由名称和对应值组成的一个变量对象的属性被创建，如果没有传递对应的实参，那么由名称和 undefined 组成的一种变量对象的属性也会被创建。</p></li><li><p><strong>所有的函数声明（Function Declaration - FD）</strong><br>由名称和对应值（函数对象 function object）组成的一个变量对象的属性被创建，如果变量对象已经存在相同名称函数的属性，则完全替换这个属性。</p></li><li><p><strong>所有的变量声明（Variable Declaration - var）</strong><br>由名称和对应值（在预编译阶段所有变量值都是 undefined）组成的一个变量对象的属性被创建，如果变量名和已经声明的形参或者函数相同，则变量名不会干扰已经存在的这类属性，如果已经存在相同的变量名，则跳过当前声明的变量名。</p></li></ol><p><strong>注意：变量碰到相同名称的变量是忽略，函数碰到相同名称的函数是覆盖。</strong></p><p>举个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> c = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">bar</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> d = <span class="function"><span class="keyword">function</span> <span class="title">_d</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">   (<span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params"></span>) </span>&#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">10</span>);</span><br></pre></td></tr></table></figure></p><p>当进入带有实参10的 foo 函数上下文时（预编译时，此时代码还没有执行），AO 结构如下：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">AO(foo) = &#123;</span><br><span class="line"><span class="symbol">   a:</span> <span class="number">10</span>,</span><br><span class="line"><span class="symbol">   b:</span> undefined,</span><br><span class="line"></span><br><span class="line"><span class="symbol">   c:</span> undefined,</span><br><span class="line"><span class="symbol">   bar:</span> <span class="params">&lt;reference to FunctionDelcaration "bar"&gt;</span>,</span><br><span class="line"><span class="symbol">   d:</span> undefined </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>注意，函数表达式 f 并不包含在活动对象 AO 内。<br>也就是说，只有函数声明会被包含在变量对象 VO 里面，函数表达式并不会影响变量对象。</p><p>行内函数表达式 _d 则只能在该函数内部可以使用， 也不会包含在 VO 内。</p><p>这之后，就会进入第2个阶段，代码执行阶段。</p><h4 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h4><p>在这个阶段，AO/VO 已经有了属性（并不是所有的属性都有值，大部分属性的值还是系统默认的初始值 undefined）。</p><p>AO 在代码执行阶段被修改如下：<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">AO</span>[<span class="string">'c'</span>] = <span class="number">5</span>;</span><br><span class="line"><span class="symbol">AO</span>[<span class="string">'d'</span>] = &lt;reference to <span class="symbol">FunctionDelcaration</span> <span class="string">"_d"</span>&gt;</span><br></pre></td></tr></table></figure></p><p>再次要提醒大家，因为函数表达式 _d 已经保存到了声明的变量 d 上面，所以变量 d 仍然存在于 VO/AO 中。我们可以通 d() 来执行函数。但是函数表达式 f 却不存在于 VO/AO 中，也就是说，如果我们想尝试调用 f 函数，不管在函数定义前还是定义后，都会出现一个错误”f is not defined”，未保存的函数表达式只有在它自己的定义或递归中才能被调用。</p><p>再来一个经典例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(x);      <span class="comment">// function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x);      <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x);      <span class="comment">// 20</span></span><br></pre></td></tr></table></figure></p><p>这里为什么是这样的结果呢？</p><p>上边我们说过，在代码执行之前的预编译，会为变量对象生成一些属性，先是形参，再是函数声明，最后是变量，并且变量并不会影响同名的函数声明。</p><p>所以，在进入执行上下文时，AO/VO 结构如下：<br><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AO = &#123;</span><br><span class="line">   <span class="keyword">x</span>: &lt;reference <span class="keyword">to</span> FunctionDeclaration <span class="string">"x"</span>&gt;</span><br><span class="line"></span><br><span class="line">   // 在碰到变量声明 <span class="keyword">x</span> 时，因为已经存在了函数声明 <span class="keyword">x</span> ，所以会忽略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>紧接着，在代码执行阶段，AO/VO 被修改如下：<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">AO</span>[<span class="string">'x'</span>] = <span class="number">10</span>;</span><br><span class="line"><span class="symbol">AO</span>[<span class="string">'x'</span>] = <span class="number">20</span>;</span><br></pre></td></tr></table></figure></p><p>希望大家可以好好理解变量对象，对于理解我们后边要讲的作用域链有很大的帮助。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>有一些文章说过：</p><blockquote><p>不管是使用 var 关键字（在全局上下文）还是不使用 var 关键字（在任何地方），都可以声明一个变量。</p></blockquote><p><strong>请记住，这是错误的观念。</strong></p><p><strong>任何时候，变量都只能通过使用 var 关键字来声明（ES6 之前）</strong>。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">a</span> = <span class="number">10</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><p>上面的赋值语句，仅仅是给全局对象创建了一个新属性（在在非严格模式，严格模式下会报错），但注意，它不是变量。“不是变量”并不是说它不能被改变，而是指它不符合ECMAScript 规范中变量的概念。</p><p>让我们通过一个例子来看一下两者的区别：<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">console.log(a)<span class="comment">;        // undefined</span></span><br><span class="line">console.log(b)<span class="comment">;        // 报错，b is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">b</span> = <span class="number">10</span><span class="comment">;</span></span><br><span class="line">var a = <span class="number">20</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>只要我们很好的理解了：变量对象、预编译阶段和执行代码阶段，就可以迅速的给出答案。</p><p>预编译（进入上下文）阶段：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">VO = &#123;</span><br><span class="line">   a: undefined</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可以看到，因为 b 不是通过 var 声明的，所以这个阶段根本就没有 b ，b 只有在代码执行阶段才会出现。但是在这个例子中，还没有执行到 b 那就已经报错了。</p><p>我们稍微更改一下示例代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);      <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b);             <span class="comment">// 10 代码执行阶段被创建</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.b);      <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.b);        <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);      <span class="comment">// 20 代码执行阶段被修改</span></span><br></pre></td></tr></table></figure></p><p>关于变量，还有一个很重要的知识点。</p><p><strong>变量不能用 delete 操作符来删除。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a);    <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">delete</span> a);    <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a);    <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.b);    <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">delete</span> b);    <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.b);    <span class="comment">// 20</span></span><br></pre></td></tr></table></figure></p><p><strong>注意：这个规则在 eval() 上下文中不起作用。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">'var a = 10;'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a);    <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">delete</span> a);    <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a);    <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这一节中我们讲了变量对象，下一节就是我们的重头戏 - <strong>作用域链</strong>。希望大家可以持续关注我，我们一起进步。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.liuxuan.site/blog/20180407/variable_object.jpg?imageView2/1/w/1000/h/400&quot; alt=&quot;variable-object&quot;&gt;&lt;/p&gt;
&lt;p&gt;上一节我们讨论了&lt;a href=&quot;http://www.jianshu.com/p/05641baa5134&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;执行上下文&lt;/a&gt;，那么在上下文中到底有什么内容，为什么它会和作用域链扯上关系，JS 解释器又是怎么找到我们声明的函数和变量，看完这一节，相信大家就不会再迷惑了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;变量对象&lt;/strong&gt;就是&lt;strong&gt;执行上下文&lt;/strong&gt;和&lt;strong&gt;作用域链&lt;/strong&gt;中间的桥梁。&lt;br&gt;剧透一下，神秘的 &lt;strong&gt;this&lt;/strong&gt; 就存在于执行上下文环境之中！&lt;br&gt;当然，之后我会单独用几节来彻底讲明白 &lt;strong&gt;this 到底是什么&lt;/strong&gt;（其实 this 很简单）。&lt;/p&gt;
&lt;p&gt;接下来，我们进入正文。&lt;/p&gt;
&lt;h3 id=&quot;执行上下文包含什么&quot;&gt;&lt;a href=&quot;#执行上下文包含什么&quot; class=&quot;headerlink&quot; title=&quot;执行上下文包含什么&quot;&gt;&lt;/a&gt;执行上下文包含什么&lt;/h3&gt;&lt;p&gt;一个执行上下文我们可以抽象的理解为对象（object）。&lt;br&gt;每一个执行上下文都有一些属性（又称为上下文状态），它们用来追踪关联代码的执行进度。&lt;/p&gt;
&lt;p&gt;我用一个结构图来说明：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.liuxuan.site/blog/20180324/variable_object.png&quot; alt=&quot;执行上下文环境 object&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="//blog.liuxuan.site/categories/JavaScript/"/>
    
    
      <category term="Javascript" scheme="//blog.liuxuan.site/tags/Javascript/"/>
    
      <category term="执行上下文" scheme="//blog.liuxuan.site/tags/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    
      <category term="变量对象" scheme="//blog.liuxuan.site/tags/%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="Execution Context" scheme="//blog.liuxuan.site/tags/Execution-Context/"/>
    
  </entry>
  
  <entry>
    <title>JS学习系列 05 - 执行上下文</title>
    <link href="//blog.liuxuan.site/2017/06/03/javascript_05_execution_context/"/>
    <id>//blog.liuxuan.site/2017/06/03/javascript_05_execution_context/</id>
    <published>2017-06-03T02:36:00.000Z</published>
    <updated>2018-04-21T15:17:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://image.liuxuan.site/blog/20180407/execution_context.jpeg?imageView2/1/w/1000/h/400" alt="execution-context"></p><p>在我们前面理解了作用域之后，“作用域链”这个概念就产生了。那么作用域链是什么意思，它又是怎么形成的，跟哪些概念有关系，这就是我接下来几章想和大家探讨的内容：<strong>执行上下文、变量对象和作用域链</strong>。根据顺序我们也可以看出来，想要理解作用域链，执行上下文是我们碰到的第一个坎。</p><p>这一章我们就来讨论一下到底什么是<strong>执行上下文</strong>。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>当 JS 引擎开始执行预编译生成的代码时，就会进入到一个<strong>执行上下文</strong>（Executable Code - 简称 <strong>EC</strong>）。</p><p>在 ECMA 标准规范里并没有从技术角度去定义 EC 的具体类型和结构，这个是在实现 ECMAScript 引擎时需要考虑的问题。</p><p>但是在逻辑上，我们可以将活动的执行上下文看成一个<strong>栈结构</strong>。栈底部永远是<strong>全局上下文（global context）</strong>，而顶部就是当前活动的执行上下文。执行到当前代码时，上下文入栈，执行完毕后，上下文出栈。</p><a id="more"></a><h3 id="可执行代码有几种"><a href="#可执行代码有几种" class="headerlink" title="可执行代码有几种"></a>可执行代码有几种</h3><p>前面说到当引擎执行到可执行代码的时候，就会将当前上下文压入上下文栈中。那么可执行的代码又分为几种？</p><p>在这里，我们先假设定义执行上下文栈是一个数组：<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">EC</span> = []<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p><strong>第一种可执行代码 – 全局代码：</strong><br>全局类型代码是在加载外部的 js 文件或者本地 <script></script> 标签中的代码。<br><strong>注意，在全局代码中，并不包含定义在全局环境 function 内的代码</strong>。</p><p>程序启动后进入初始化全局环境：<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">EC</span> = [</span><br><span class="line">    globalContext</span><br><span class="line">]<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p><strong>第二种可执行代码 – 函数代码：</strong><br>当定义的函数被执行时，就进入了函数代码，当前函数上下文被压入 EC 栈中。<br><strong>注意，在函数代码中，也不包含定义在该函数内部环境 function 内的代码。</strong></p><p>例如：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">20</span>;</span><br><span class="line">  </span><br><span class="line">  foo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br></pre></td></tr></table></figure></p><p>这个例子中的 EC 是什么样子的呢？</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">EC = [</span><br><span class="line">  globalContext</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一次调用 foo 函数</span></span><br><span class="line">EC = [</span><br><span class="line">  <span class="params">&lt;foo&gt;</span> functionContext,</span><br><span class="line">  globalContext</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 foo 内递归调用自己</span></span><br><span class="line">EC = [</span><br><span class="line">  <span class="params">&lt;foo&gt;</span> functionContext - recursively,</span><br><span class="line">  <span class="params">&lt;foo&gt;</span> functionContext,</span><br><span class="line">  globalContext</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继续递归调用自己</span></span><br><span class="line">EC = [</span><br><span class="line">  ......</span><br><span class="line">  <span class="params">&lt;foo&gt;</span> functionContext - recursively2,</span><br><span class="line">  <span class="params">&lt;foo&gt;</span> functionContext - recursively,</span><br><span class="line">  <span class="params">&lt;foo&gt;</span> functionContext,</span><br><span class="line">  globalContext</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归会不断调用下去，因为没有结束条件，所以这是一个死循环</span></span><br><span class="line"><span class="comment">// 所以，EC 只会不断增加新的上下文，但是却不会退出</span></span><br></pre></td></tr></table></figure><p>只有每次 <strong>return</strong> 的时候，才会退出当前执行上下文，相应上下文会从栈中弹出，栈指针会自动移动位置。</p><p><strong>注意，当函数没有明确指明 return 什么的时候，默认 return undefined</strong> 。 </p><p>如果有抛出的异常没有被截获的话，也有可能从一个或多个执行上下文中退出。当所有代码执行完以后，EC 中只会包含全局上下文（global context），当程序退出以后，全局上下文也会退出。</p><p><strong>第三种可执行代码 – eval 代码：</strong><br>eval 函数在调用的时候会产生上下文。<br>例如：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">eval('var a = <span class="number">10</span>')<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">(<span class="name">function</span> foo () &#123;</span><br><span class="line">  eval('var b = <span class="number">20</span>')<span class="comment">;</span></span><br><span class="line">&#125;())<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">alert(<span class="name">a</span>)<span class="comment">;    // 10</span></span><br><span class="line">alert(<span class="name">b</span>)<span class="comment">;    // ReferenceError，b is not defined</span></span><br></pre></td></tr></table></figure></p><p>这个例子中 EC 的变化如下：<br><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">EC = [</span><br><span class="line">  globalContext</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// eval('var a = 10');</span></span><br><span class="line">EC = [</span><br><span class="line">  evalContext,</span><br><span class="line">  globalContext</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// eval 执行完毕</span></span><br><span class="line">EC = [</span><br><span class="line">  globalContext</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 立即执行函数 foo</span></span><br><span class="line">EC = [</span><br><span class="line">  &lt;foo&gt; functionContext,</span><br><span class="line">  globalContext</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// eval('var b = 20');</span></span><br><span class="line">EC = [</span><br><span class="line">  evalContext,</span><br><span class="line">  &lt;foo&gt; functionContext,</span><br><span class="line">  globalContext</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// eval 执行完毕</span></span><br><span class="line">EC = [</span><br><span class="line">  &lt;foo&gt; functionContext,</span><br><span class="line">  globalContext</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// foo 执行完毕</span></span><br><span class="line">EC = [</span><br><span class="line">  globalContext</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><p>这就是一个典型的<strong>逻辑调用上下文栈</strong>。</p><p>在 setTimeout 和 setInterval 函数中的第一个参数也可以传入代码字符串，但是这个一般不会这么去用，所以这里也就不讨论了。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p><strong>执行上下文环境</strong>是我们了解<strong>变量对象</strong>和<strong>作用域链</strong>的基础，大家一定要好好理解（其实也并不难），下一节我们来讨论变量对象，相信会让大家有一定的收获。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.liuxuan.site/blog/20180407/execution_context.jpeg?imageView2/1/w/1000/h/400&quot; alt=&quot;execution-context&quot;&gt;&lt;/p&gt;
&lt;p&gt;在我们前面理解了作用域之后，“作用域链”这个概念就产生了。那么作用域链是什么意思，它又是怎么形成的，跟哪些概念有关系，这就是我接下来几章想和大家探讨的内容：&lt;strong&gt;执行上下文、变量对象和作用域链&lt;/strong&gt;。根据顺序我们也可以看出来，想要理解作用域链，执行上下文是我们碰到的第一个坎。&lt;/p&gt;
&lt;p&gt;这一章我们就来讨论一下到底什么是&lt;strong&gt;执行上下文&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;当 JS 引擎开始执行预编译生成的代码时，就会进入到一个&lt;strong&gt;执行上下文&lt;/strong&gt;（Executable Code - 简称 &lt;strong&gt;EC&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;在 ECMA 标准规范里并没有从技术角度去定义 EC 的具体类型和结构，这个是在实现 ECMAScript 引擎时需要考虑的问题。&lt;/p&gt;
&lt;p&gt;但是在逻辑上，我们可以将活动的执行上下文看成一个&lt;strong&gt;栈结构&lt;/strong&gt;。栈底部永远是&lt;strong&gt;全局上下文（global context）&lt;/strong&gt;，而顶部就是当前活动的执行上下文。执行到当前代码时，上下文入栈，执行完毕后，上下文出栈。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="//blog.liuxuan.site/categories/JavaScript/"/>
    
    
      <category term="Javascript" scheme="//blog.liuxuan.site/tags/Javascript/"/>
    
      <category term="执行上下文" scheme="//blog.liuxuan.site/tags/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>JS学习系列 04 - 提升</title>
    <link href="//blog.liuxuan.site/2017/05/10/javascript_04__variable_lifting/"/>
    <id>//blog.liuxuan.site/2017/05/10/javascript_04__variable_lifting/</id>
    <published>2017-05-10T02:36:00.000Z</published>
    <updated>2018-04-21T15:17:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://image.liuxuan.site/blog/20180407/variable_lifting.jpg?imageView2/1/w/1000/h/400" alt="variable-lifting"></p><p>到目前为止，大家应该很熟悉作用域的概念了，以及根据声明的位置和方式将变量分配给作用域的相关原理了。函数作用域和块作用域的行为是一样的，可以总结为：任何声明在某个作用域内的变量，都将属于这个作用域。</p><p>但是作用域同其中的变量声明出现的位置有某种微妙的关系，而这个细节就是我们这节要探讨的内容。</p><a id="more"></a><h3 id="声明提升"><a href="#声明提升" class="headerlink" title="声明提升"></a>声明提升</h3><p>先看代码：<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">a</span> = <span class="number">2</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">var a<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">console.log(a)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>大家认为这里会输出什么？</p><p>有一些人认为是 undefined ，因为 <strong><em>var a;</em></strong> 是在 <strong><em>a = 2;</em></strong> 之后，所以会觉得 undefined 覆盖了 a 的值。但是，真正的结果是 2 。</p><p>再看一段代码：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">console.log(a)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">var a = <span class="number">2</span><span class="comment">;</span></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">鉴于上一个例子，有些人会认为这里会输出 <span class="number">2</span> ，也有人认为由于 a 在使用前并没有声明，所以这里会报错。但是，这里的结果是 undefined 。</span><br><span class="line"></span><br><span class="line">之前讨论编译器的时候，我们知道 <span class="keyword">JS </span>引擎会在解释代码之前首先对其进行编译。编译阶段的第一部分工作就是找到所有的声明，并用合适的作用域将它们关联起来。</span><br><span class="line"></span><br><span class="line">因此，正确的思路是，包括变量和函数在内的所有声明都会在任何代码执行前首先被处理。</span><br><span class="line"></span><br><span class="line">当你看到 ***var a = <span class="number">2</span><span class="comment">;*** 时，JavaScript 实际上会将其看成两个声明：***var a;*** 和 ***a = 2;*** 。第一个定义声明是在编译阶段进行的。第二个赋值声明会被留在原地等待执行阶段。</span></span><br><span class="line"></span><br><span class="line">所以，在第一个例子中，代码的等价形式是这样的：</span><br></pre></td></tr></table></figure></p><p>var a;</p><p>a = 2;</p><p>console.log(a);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第二个例子中，代码的等价形式是这样的：</span><br></pre></td></tr></table></figure></p><p>var a;</p><p>console.log(a);</p><p>a = 2;<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这个过程就好像是变量和函数声明从它们的代码中出现的位置被“移动”到了最上面。这个过程就叫作“提升”。</span><br><span class="line"></span><br><span class="line">*<span class="strong">*注意*</span><span class="strong">*，只有声明本身会被提升，而赋值操作和其他运行逻辑都会停留在原地，想象一下，如果提升会改变代码的执行顺序，那么会造成非常严重的破坏。</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">还有一点，函数声明会被提升，但是函数表达式不会被提升。</span></span><br></pre></td></tr></table></figure></p><p>foo();      // 报错，TypeError: foo is not a function，因为这里 foo 是 undefined，并不是一个函数</p><p>var foo = function foo() {<br>    // something else<br>}<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这段程序中的变量标识符 foo 被提升并分配给所在的作用域（在这里是全局作用域），因此 foo() 不会导致 <span class="built_in">ReferenceError</span> 。但是，foo 此时并没有赋值（如果它是一个函数声明而不是函数表达式，那么就会被赋值）。foo() 由于对 <span class="literal">undefined</span> 值进行函数调用而导致非法操作，所以会抛出 <span class="built_in">TypeError</span> 异常。</span><br><span class="line"></span><br><span class="line">同时，即使是具名函数表达式，名称标识符在赋值之前也无法在所在作用域中使用：</span><br></pre></td></tr></table></figure></p><p>foo();<br>bar();</p><p>var foo = function bar () {<br>    // something else<br>};<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这段代码经过提升后，实际上等价于：</span><br></pre></td></tr></table></figure></p><p>var foo;</p><p>foo();<br>bar();</p><p>foo = function () {<br>    var bar = …self…<br>    // something else<br>};<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 函数优先</span><br><span class="line">函数声明和变量声明都会被提升。但是一个值得注意的细节是，**函数声明会首先被提升，然后才是变量。**</span><br><span class="line"></span><br><span class="line">考虑如下代码：</span><br></pre></td></tr></table></figure></p><p>foo();      // 1</p><p>var foo;</p><p>function foo () {<br>   console.log(1);<br>}</p><p>foo = function () {<br>   console.log(2);<br>};<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里会输出 <span class="number">1</span> 而不是 <span class="number">2</span> 。这段代码其实等价于：</span><br></pre></td></tr></table></figure></p><p>function foo () {<br>   console.log(1);<br>}</p><p>foo();      // 1</p><p>foo = function () {<br>   console.log(2);<br>};<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">***<span class="keyword">var</span> foo;*** 尽管出现在 function foo() <span class="meta">&#123;...&#125;</span> 声明之前，但是它是重复声明，所以会被编译器忽略，因为函数声明会被提升到变量声明之前。</span><br><span class="line"></span><br><span class="line">注意，尽管重复的 <span class="keyword">var</span> 声明会被忽略，但重复的函数声明却会覆盖前一个同名函数。</span><br></pre></td></tr></table></figure></p><p>foo();      // 3</p><p>function foo () {<br>   console.log(1);<br>}</p><p>var foo = function () {<br>   console.log(2);<br>};      </p><p>foo();        // 2</p><p>function foo () {<br>   cosole.log(3);<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个例子充分说明了在同一个作用域中进行重复定义是非常糟糕的，而且经常会导致各种奇怪的问题。上面那个例子，等价于：</span><br></pre></td></tr></table></figure></p><p>function foo () {<br>   cosole.log(3);<br>}</p><p>foo();      // 3</p><p>foo = function () {<br>   console.log(2);<br>};      </p><p>foo();        // 2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">还有一些人会犯如下错误：</span><br></pre></td></tr></table></figure></p><p>foo();      // 2</p><p>var a = true;</p><p>if (a) {<br>   function foo () {<br>      console.log(1);<br>   }<br>} else {<br>   function foo () {<br>      console.log(2);<br>   }<br>}<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">因为 <span class="keyword">if</span> 并没有块作用域，所以这里的函数声明会提升到其作用域最前边，而后一个 <span class="keyword">function</span> <span class="title">声明会覆盖前一个，所以这里结果是</span> 2 。这里代码等价如下：</span><br></pre></td></tr></table></figure></p><p>function foo () {<br>   console.log(2);<br>}</p><p>var a;</p><p>foo();      // 2</p><p>a = true;</p><p>if (a) {</p><p>} else {</p><p>}<br><code>`</code></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我们习惯将 <strong><em>var a = 2;</em></strong> 看作一个声明，而实际上 JavaScript 引擎并不这么认为。它将 <strong><em>var a;</em></strong> 和 <strong><em>a = 2;</em></strong> 当作两个单独的声明，第一个是编译阶段的任务，而第二个则是执行阶段的任务。</p><p>这意味着无论作用域中的声明出现在什么地方，都将在代码本身被执行前首先被处理（预编译）。可以将这个过程想象成所有的声明（变量和函数）都会被“移动”到各自的作用域的最顶端，这个过程叫作<strong>提升</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.liuxuan.site/blog/20180407/variable_lifting.jpg?imageView2/1/w/1000/h/400&quot; alt=&quot;variable-lifting&quot;&gt;&lt;/p&gt;
&lt;p&gt;到目前为止，大家应该很熟悉作用域的概念了，以及根据声明的位置和方式将变量分配给作用域的相关原理了。函数作用域和块作用域的行为是一样的，可以总结为：任何声明在某个作用域内的变量，都将属于这个作用域。&lt;/p&gt;
&lt;p&gt;但是作用域同其中的变量声明出现的位置有某种微妙的关系，而这个细节就是我们这节要探讨的内容。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="//blog.liuxuan.site/categories/JavaScript/"/>
    
    
      <category term="Javascript" scheme="//blog.liuxuan.site/tags/Javascript/"/>
    
      <category term="作用域" scheme="//blog.liuxuan.site/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>JS学习系列 03 - 函数作用域和块作用域</title>
    <link href="//blog.liuxuan.site/2017/04/10/javascript_03__function_scope/"/>
    <id>//blog.liuxuan.site/2017/04/10/javascript_03__function_scope/</id>
    <published>2017-04-10T02:36:00.000Z</published>
    <updated>2018-04-21T15:17:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://image.liuxuan.site/blog/20180407/function_scope.png?imageView2/1/w/1000/h/400" alt="function-scope"></p><p>在 ES5 及之前版本，JavaScript 只拥有函数作用域，没有块作用域（with 和 try…catch 除外）。在 ES6 中，JS 引入了块作用域，{ } 内是单独的一个作用域。采用 let 或者 const 声明的变量会挟持所在块的作用域，也就是说，这声明关键字会将变量绑定到所在的任意作用域中（通常是 {…} 内部）。</p><p>今天，我们就来深入研究一下<strong>函数作用域</strong>和<strong>块作用域</strong>。</p><h3 id="函数中的作用域"><a href="#函数中的作用域" class="headerlink" title="函数中的作用域"></a>函数中的作用域</h3><p>函数作用域的含义是指，属于这个函数的任何声明（变量或函数）都可以在这个函数的范围内使用及复用（包括这个函数嵌套内的作用域）。</p><p>举个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// something else</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">bar</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// something else   </span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> c = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar();      <span class="comment">// 报错，ReferenceError: bar is not defined</span></span><br><span class="line"><span class="built_in">console</span>.log(a, b, c);        <span class="comment">// 报错，原因同上</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>在这段代码中，函数 foo 的作用域包含了标识符a、b、c 和 bar ，函数 bar 的作用域中又包含别的标识符。</p><p>由于标识符 a、b、c 和 bar都属于函数 foo 的作用域，所以在全局作用域中访问会报错，因为它们都没有定义，但是在函数 foo 内部，这些标识符都是可以访问的，这就是函数作用域。</p><h4 id="为什么要有这些作用域"><a href="#为什么要有这些作用域" class="headerlink" title="为什么要有这些作用域"></a>为什么要有这些作用域</h4><p>当我们用作用域把代码包起来的时候，其实就是对它们进行了“隐藏”，让我们对其有控制权，想让谁访问就可以让谁访问，想禁止访问也很容易。</p><p>想像一下，如果所有的变量和函数都在全局作用域中，当然我们可以在内部的嵌套作用域中访问它们，但是因为暴露了太多的变量或函数，它们可能被有意或者无意的篡改，以非预期的方式使用，这就导致我们的程序会出现各种各样的问题，严重会导致数据泄露，造成无法挽回的后果。</p><p>例如：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">   a: <span class="number">2</span>,</span><br><span class="line">   getA: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.a;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.a = <span class="number">4</span>;</span><br><span class="line">obj.getA();      <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></p><p>这个例子中，我们可以任意修改对象 obj 内部的值，在某种情况下这并不是我们所期望的，采用函数作用域就可以解决这个问题，私有化变量 a 。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">     getA: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">     &#125;,</span><br><span class="line">     setA: <span class="function"><span class="keyword">function</span> <span class="params">(val)</span> </span>&#123;</span><br><span class="line">        a = val;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line">obj.a = <span class="number">4</span>;</span><br><span class="line">obj.getA();      <span class="comment">// 2</span></span><br><span class="line">obj.setA(<span class="number">8</span>);</span><br><span class="line">obj.getA();      <span class="comment">// 8</span></span><br></pre></td></tr></table></figure></p><p>这里通过立即执行函数（IIFE）返回一个对象，只能通过对象内的方法对变量 a 进行操作，其实这里有<strong>闭包</strong>的存在，这个我们在以后会深入讨论。</p><p>“隐藏”作用域中的变量和函数所带来的另一个好处，是可以避免同名标识符之间的冲突，冲突会导致变量的值被意外覆盖。</p><p>例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">bar</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">      i = <span class="number">3</span>;        <span class="comment">// 修改了 for 循环所属作用域中的 i</span></span><br><span class="line">      <span class="built_in">console</span>.log(a + i);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      bar(i * <span class="number">2</span>);      <span class="comment">// 这里因为 i 总会被设置为 3 ，导致无限循环</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br></pre></td></tr></table></figure></p><p>bar(…) 内部的赋值表达式 i = 3 意外的覆盖了声明在 foo(…) 内部 for 循环中的 i ，在这个例子中因为 i 始终被设置为 3 ，永远满足小于 10 这个条件，导致无限循环。</p><p>bar(…) 内部的赋值操作需要声明一个本地变量来使用，采用任何名字都可以，<strong><em>var i = 3;</em></strong> 就可以满足这个要求。另外一种方法是采用一个完全不同的标识符名称，比如 <strong><em>var j = 3;</em></strong> 。但是软件设计在某种情况下可能自然而然的要求使用同样的标识符名称，因此在这种情况下使用作用域来“隐藏”内部声明是唯一的最佳选择。</p><p>总结来说，作用域可以起到两个作用：</p><ul><li><strong>私有化变量或函数</strong></li><li><strong>规避同名冲突</strong></li></ul><h4 id="函数声明和函数表达式"><a href="#函数声明和函数表达式" class="headerlink" title="函数声明和函数表达式"></a>函数声明和函数表达式</h4><p>如果 function 是声明中的第一个词，那么就是一个函数声明，否则就是一个函数表达式。</p><p>函数声明举个例子：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">// something else</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这就是一个函数声明。</p><p>函数表达式分为匿名函数表达式和具名函数表达式。</p><p>对于函数表达式来说，最熟悉的场景可能就是回调参数了，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"I wait for one second."</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></p><p>这个叫作匿名函数表达式，因为 function ()… 没有名称标识符。函数表达式可以是匿名的，但是函数声明不可以省略函数名，在 javascript 中这是非法的。</p><p>匿名函数表达式书写简便，但是它也有几个缺点需要注意：</p><ol><li>匿名函数在浏览器栈追踪中不会显示出有意义的函数名，这会加大调试难度。</li><li>如果没有函数名，当函数需要引用自身的时候就只能使用已经不是标准的 arguments.callee 来引用，比如递归。在事件触发后的事件监听器中也有可能需要通过函数名来解绑自身。</li><li>匿名函数对代码的可读性和可理解性有一定的影响。一个有意义的函数名可以让代码不言自明。</li></ol><p>具名函数表达式又叫行内函数表达式，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timerHandler</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"I wait for one second."</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></p><p>这样，在函数内部需要引用自身的时候就可以通过函数名来引用，当然要注意，这个函数名只能在这个函数内部使用，在函数外使用时未定义的。</p><h4 id="立即执行函数表达式（IIFE）"><a href="#立即执行函数表达式（IIFE）" class="headerlink" title="立即执行函数表达式（IIFE）"></a>立即执行函数表达式（IIFE）</h4><p>IIFE 全写是 Immediately Invoked Function Expression，立即执行函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(a);      <span class="comment">// 3</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);      <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p><p>由于函数被包含在一对 ( ) 括号内部，因此成为了一个函数表达式，通过在末尾加上另一对 ( ) 括号可以立即执行这个函数，比如 (function () {})() 。第一个 ( ) 将函数变成函数表达式，第二个 ( ) 执行了这个函数。</p><p>也有另外一种立即执行函数的写法，(function () {}()) 也可以立即执行这个函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(a);      <span class="comment">// 3</span></span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);      <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p><p>这两种写法功能是完全一样的，具体看大家使用。</p><p>IIFE 的另一种普遍的进阶用法是把它们当做函数调用并传递参数进去。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(a);      <span class="comment">// 3</span></span><br><span class="line">   <span class="built_in">console</span>.log(global.a)      <span class="comment">// 2</span></span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);      <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p><p>我们将 window 对象的引用传递进去，但将参数命名为 global，因此在代码风格上对全局对象的引用变得比引用一个没有“全局”字样的变量更加清晰。当然可以从外部作用域传递你需要的任何东西，并将变量命名为任何你觉得合适的文字。这对于改进代码风格是非常有帮助的。</p><p>这个模式的另外一个应用场景是解决 undefined 标识符的默认值被错误覆盖的异常（这并不常见）。将一个参数命名为 undefined ，但是并不传入任何值，这样就可以保证在代码块中 undefined 的标识符的值就是 undefined 。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">undefined</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">IIFE</span> (<span class="params">undefined</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> a;</span><br><span class="line">   <span class="keyword">if</span> (a === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Undefined is safe here."</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure></p><h3 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h3><p>ES5 及以前 JavaScript 中具有块作用域的只有 with 和 try…catch 语句，在 ES6 及以后的版本添加了具有块作用域的变量标识符 let 和 const 。</p><h4 id="with"><a href="#with" class="headerlink" title="with"></a>with</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">   a: <span class="number">2</span>,</span><br><span class="line">   b: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> (obj) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(a);      <span class="comment">// 2</span></span><br><span class="line">   <span class="built_in">console</span>.log(b);      <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);      <span class="comment">// 报错，a is not defined</span></span><br><span class="line"><span class="built_in">console</span>.log(b);      <span class="comment">// 报错，a is not defined</span></span><br></pre></td></tr></table></figure><p>用 with 从对象中创建出的作用域仅在 with 声明中而非外部作用域中有效。</p><h4 id="try…catch"><a href="#try…catch" class="headerlink" title="try…catch"></a>try…catch</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="literal">undefined</span>();      <span class="comment">// 非法操作</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);      <span class="comment">// 正常执行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(err);      <span class="comment">// 报错，err is not defined</span></span><br></pre></td></tr></table></figure><p>try/catch 中的 catch 分句会创建一个块作用域，其中的变量声明仅在 catch 内部有效。</p><h4 id="let"><a href="#let" class="headerlink" title="let"></a>let</h4><p>let 关键字可以将变量绑定到任意作用域中（通常是 {…} 内部）。换句话说，let 为其声明的变量隐式的劫持了所在的块作用域。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">   <span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line">   <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(a);      <span class="comment">// 2</span></span><br><span class="line">   <span class="built_in">console</span>.log(b);      <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b);      <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(a);      <span class="comment">// 报错，a is not defined</span></span><br></pre></td></tr></table></figure></p><p>用 let 将变量附加在一个已经存在的块作用域上的行为是隐式的。在开发和修改代码的过程中，如果没有密切关注哪些代码块作用域中有绑定的变量，并且习惯性的移动这些块或者将其包含到其他块中，就会导致代码混乱。</p><p>为块作用域显示的创建块可以部分解决这个问题，使变量的附属关系变得更加清晰。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(a);      <span class="comment">// 2</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在代码的任意位置都可以使用 {…} 括号来为 let 创建一个用于绑定的块。</p><p>还有一点要注意的是，在使用 var 进行变量声明的时候会存在<strong>变量提升</strong>，提升是指声明会被视为存在于其所出现的作用域的整个范围内。但是使用 let 进行的声明不会存在作用域提升，声明的变量在被运行之前，并不存在。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);      <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(b);      <span class="comment">// 报错， b is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在浏览器中运行这段代码时，因为前面报错了，所以不会看到接下来打印的结果，但是理论上就是这样的结果</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);      <span class="comment">// 2 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b);      <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></p><p><strong>2.3.1</strong> 垃圾收集<br>另一个块作用域非常有用的原因和闭包及垃圾内存的回收机制有关。<br>举个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processData</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bigData = &#123;...&#125;;</span><br><span class="line"></span><br><span class="line">processData(bigData);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'my_button'</span>);</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'button clicked'</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></p><p>这个按钮点击事件的回调函数中并不需要 bigData 这个非常占内存的数据，理论上来说，当 processData 函数处理完之后，这个占有大量空间的数据结构就可以被垃圾回收了。但是，由于这个事件回调函数形成了一个覆盖当前作用域的<strong>闭包</strong>，JavaScript 引擎极有可能依然保存着这个数据结构（取决于具体实现）。</p><p>使用块作用域可以解决这个问题，可以让引擎清楚的知道没有必要继续保存这个 bigData 。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processData</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">let</span> bigData = &#123;...&#125;;</span><br><span class="line"></span><br><span class="line">   processData(bigData);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'my_button'</span>);</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'button clicked'</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></p><p><strong>2.3.2 let 循环</strong><br>一个 let 可以发挥优势的典型例子就是 for 循环。<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> lists = document.getElementsByTagName('<span class="built_in">li</span>');</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">let</span> i = <span class="number">0</span>, <span class="built_in">length</span> = lists.<span class="built_in">length</span>; i &lt; <span class="built_in">length</span>; i++) &#123;</span><br><span class="line">   console.<span class="built_in">log</span>(i);</span><br><span class="line">   lists[i].onclick = function () &#123;</span><br><span class="line">     console.<span class="built_in">log</span>(i);      // 点击每个 <span class="built_in">li</span> 元素的时候，都是相对应的 i 值，而不像用 <span class="built_in">var</span> 声明 i 的时候，因为没有块作用域，所以在回调函数通过闭包查找 i 的时候找到的都是最后的 i 值</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(i);      // 报错，i <span class="built_in">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure></p><p>for 循环头部的 let 不仅将 i 绑定到 fir 循环的块中，事实上它将其重新绑定到了循环的每一个迭代中，确保上一个循环迭代结束时的值重新进行赋值。</p><p>当然，我们在 for 循环中使用 var 时也可以通过立即执行函数形成一个新的闭包来解决这个问题。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lists = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, length = lists.length; i &lt; length; i++) &#123;</span><br><span class="line">   lists[i].onclick = (<span class="function"><span class="keyword">function</span> (<span class="params">j</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(j);</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lists = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, length = lists.length; i &lt; length; i++) &#123;</span><br><span class="line">   (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">      lists[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(i);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其实原理无非就是，为每个迭代创建新的闭包，立即执行函数执行完后本来应该销毁变量，释放内存，但是因为这里有回调函数的存在，所以形成了闭包，然后通过形参进行同名变量覆盖，所以找到的 i 值就是每个迭代新闭包中的形参 i 。</p><h4 id="const"><a href="#const" class="headerlink" title="const"></a>const</h4><p>除了 let 以外，ES6 还引入了 const ，同样可以用来创建作用域变量，但其值是固定的（常亮）。之后任何试图修改值的操作都会引起错误。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">   <span class="keyword">const</span> b = <span class="number">3</span>;      <span class="comment">// 包含在 if 中的块作用域常亮</span></span><br><span class="line"></span><br><span class="line">   a = <span class="number">3</span>;      <span class="comment">// 正常</span></span><br><span class="line">   b = <span class="number">4</span>;      <span class="comment">// 报错，TypeError: Assignment to constant variable</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);      <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(b);      <span class="comment">// 报错， b is not defined</span></span><br></pre></td></tr></table></figure></p><p>和 let 一样，const 声明的变量也不存在“<strong>变量提升</strong>”。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>函数是 JavaScript 中最常见的作用域单元。块作用域指的是变量和函数不仅可以属于所处的函数作用域，也可以属于某个代码块。</p><p>本质上，声明在一个函数内部的变量或函数会在所处的作用域中“隐藏”起来，这是有意为之的良好软件的设计原则。</p><p>有些人认为块作用域不应该完全作为函数作用域的替代方案。两种功能应该同时存在，开发者可以并且也应该根据需要选择使用哪种作用域，创造可读、可维护的优良代码。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.liuxuan.site/blog/20180407/function_scope.png?imageView2/1/w/1000/h/400&quot; alt=&quot;function-scope&quot;&gt;&lt;/p&gt;
&lt;p&gt;在 ES5 及之前版本，JavaScript 只拥有函数作用域，没有块作用域（with 和 try…catch 除外）。在 ES6 中，JS 引入了块作用域，{ } 内是单独的一个作用域。采用 let 或者 const 声明的变量会挟持所在块的作用域，也就是说，这声明关键字会将变量绑定到所在的任意作用域中（通常是 {…} 内部）。&lt;/p&gt;
&lt;p&gt;今天，我们就来深入研究一下&lt;strong&gt;函数作用域&lt;/strong&gt;和&lt;strong&gt;块作用域&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;函数中的作用域&quot;&gt;&lt;a href=&quot;#函数中的作用域&quot; class=&quot;headerlink&quot; title=&quot;函数中的作用域&quot;&gt;&lt;/a&gt;函数中的作用域&lt;/h3&gt;&lt;p&gt;函数作用域的含义是指，属于这个函数的任何声明（变量或函数）都可以在这个函数的范围内使用及复用（包括这个函数嵌套内的作用域）。&lt;/p&gt;
&lt;p&gt;举个例子：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;a&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// something else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// something else   &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bar();      &lt;span class=&quot;comment&quot;&gt;// 报错，ReferenceError: bar is not defined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a, b, c);        &lt;span class=&quot;comment&quot;&gt;// 报错，原因同上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="//blog.liuxuan.site/categories/JavaScript/"/>
    
    
      <category term="Javascript" scheme="//blog.liuxuan.site/tags/Javascript/"/>
    
      <category term="作用域" scheme="//blog.liuxuan.site/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>JS学习系列 02 - 词法作用域</title>
    <link href="//blog.liuxuan.site/2017/03/05/javascript_02_static_scope/"/>
    <id>//blog.liuxuan.site/2017/03/05/javascript_02_static_scope/</id>
    <published>2017-03-05T02:36:00.000Z</published>
    <updated>2018-04-21T15:17:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://image.liuxuan.site/blog/20180407/static_scope.jpg?imageView2/1/w/1000/h/400" alt="static-scope"></p><h3 id="两种作用域"><a href="#两种作用域" class="headerlink" title="两种作用域"></a>两种作用域</h3><p>“作用域”我们知道是一套规则，用来管理引擎如何在当前作用域以及嵌套的子作用域中根据标识符名称进行变量查找。</p><p>作用域有两种主要工作模型：<strong>词法作用域</strong>和<strong>动态作用域</strong>。</p><p>大多数语言采用的都是词法作用域，少数语言采用动态作用域（例如 Bash 脚本），这里我们主要讨论词法作用域。</p><h3 id="词法"><a href="#词法" class="headerlink" title="词法"></a>词法</h3><p>大部分标准语言编译器的第一个工作阶段叫作<strong>词法化</strong>。<br>简单地说，词法作用域是由你在写代码时将变量和函数（块）作用域写在哪里来决定的。当然，也会有一些方法来动态修改作用域，后边我会介绍。</p><a id="more"></a><p>举个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">   foo1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo2();</span><br></pre></td></tr></table></figure></p><p>这里输出结果是多少呢？</p><p><strong>注意，这里结果打印的是 2</strong>。</p><p>可能会有一些同学认为是 10，那就是没有搞清楚<strong>词法作用域</strong>的概念。<br>前边介绍了，词法作用域只取决于代码书写时的位置，那么在这个例子中，函数 foo1 定义时的位置决定了它的作用域，通过下图理解：</p><p><img src="http://upload-images.jianshu.io/upload_images/2944582-d5f58c050ff5af04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="词法作用域"></p><p>foo1 和 foo2 都是分别定义在全局作用域中的函数，它们是并列的，所以在 foo1 的作用域链中并不包含 foo2 的作用域，虽然在 foo2 中调用了 foo1，但是 foo1 对变量 a 进行 RHS 查询时，在自己的作用域没有找到，引擎会去 foo1 的上级作用域（也就是全局作用域）中查找，而并不会去 foo2 的作用域中查找，最终在全局作用域中找到 a 的值为 2。</p><p><strong>总结来说，无论函数在哪里被调用，也无论它如何被调用，它的词法作用域都只由函数被声明时所处的位置决定。</strong></p><h3 id="欺骗词法"><a href="#欺骗词法" class="headerlink" title="欺骗词法"></a>欺骗词法</h3><p>JavaScript 中有 3 种方式可以用来“欺骗词法”，动态改变作用域。</p><p><strong>第一种： eval</strong></p><p>JavaScript 中 eval(…) 函数可以接受一个字符串作为参数，并将其中的内容视为好像在书写时就存在于程序中这个位置的代码。</p><p>在执行 eval(…) 之后的代码时，引擎并不知道或在意前面的代码是以动态形式插入进来并对词法作用域环境进行修改的，引擎只会像往常一样正常进行词法作用域的查找。</p><p>举个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">eval</span>(str);        <span class="comment">// "欺骗"词法</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">foo(<span class="string">"var a = 10;"</span>);</span><br></pre></td></tr></table></figure></p><p><strong>如大家所想，输出结果为 10。</strong><br>因为 eval(“var a = 10;”) 在 foo 的作用域中新创建了一个同名变量 a，引擎在 foo 作用域中对 a 进行 RHS 查询，找到了新定义的 a，值为 10，所以不再向上查找全局作用域中的 a，所以导致输出结果为 10，这就是 eval(…) 的作用。</p><p>在<strong>严格模式</strong>下，eval(…) 在运行时有自己的词法作用域，意味着其中的声明无法修改所在的作用域。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict;'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">eval</span>(str);        <span class="comment">// eval() 有自己的作用域，所以并不会修改 foo 的词法作用域</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">foo(<span class="string">"var a = 10;"</span>);</span><br></pre></td></tr></table></figure><p>这里输出结果为 2。</p><p>JavaScript 中还有一些功能和 eval(…) 类似的函数，例如 setTimeout(…) 和 setInterval(…) 的第一个参数可以是一个字符串，字符串的内容可以解释为一段动态生成的代码。这些功能已经过时并且不被提倡，最好不要使用它们。new Function(…) 函数的最后一个参数也可以接受代码字符串，并将其转化为动态生成的函数，也尽量避免使用。</p><p>在程序中动态生成代码的使用场景非常罕见，因为它所带来的好处无法抵消性能上的损失。</p><p><strong>第二种： with</strong><br>with 通常被当做重复引用同一个对象中的多个属性的快捷方式，可以不需要重复引用对象本身。</p><p>举个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">   a: <span class="number">2</span>,</span><br><span class="line">   b: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> (obj) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(a);      <span class="comment">// 2</span></span><br><span class="line">   <span class="built_in">console</span>.log(b);      <span class="comment">// 3</span></span><br><span class="line">   c = <span class="number">4</span>;         </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(c);          <span class="comment">// 4, c 被泄露到全局作用域上</span></span><br></pre></td></tr></table></figure></p><p>如上所示，我们对 c 进行 LHS 查询，因为在 with 引入的新作用域中没有找到 c，所以向上一级作用域（这里是全局作用域）查找，也没有找到，在非严格模式下，在全局对象中新建了一个属性 c 并赋值为 4。</p><p>with 可以将一个没有或有多个属性的对象处理为一个完全隔离的词法作用域，因此这个对象的属性也会被处理为定义在这个作用域中的词法标识符。</p><p><strong>尽管 with 块可以将一个对象处理为词法作用域，但是这个块内部正常的 var 声明并不会限制在这个块作用域中，而是被添加到 with 所处的函数作用域中。</strong></p><p>严格模式下，with 被完全禁止使用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">   a: <span class="number">2</span>,</span><br><span class="line">   b: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> (obj) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(a);     </span><br><span class="line">   <span class="built_in">console</span>.log(b);      </span><br><span class="line">   c = <span class="number">4</span>;         </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br></pre></td></tr></table></figure></p><p><img src="http://image.liuxuan.site/blog/20180324/global_scope.png" alt="严格模式下禁止使用with"></p><p><strong>第三种： try…catch</strong><br>try…catch 可以测试代码中的错误。try 部分包含需要运行的代码，而 catch 部分包含错误发生时运行的代码。</p><p>举个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   foo();</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(err);   </span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">2</span>; </span><br><span class="line"><span class="comment">// 打印出 "ReferenceError: foo is not defined at &lt;anonymous&gt;:2:4"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);      <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p><p>当 try 中的代码出现错误时，就会进入 catch 块，此时会把异常对象添加到作用域链的最前端，类似于 with 一样，catch 中定义的局部变量也都会添加到包含 try…catch 的函数作用域（或全局作用域）中。</p><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>JavaScript 引擎会在编译阶段进行数项性能优化。其中有些优化依赖于能够根据代码的词法进行静态分析，并预先确定所有变量和函数定义的位置，才能在执行过程中快速找到标识符。</p><p>但如果引擎在代码中发现了 eval(…)、with 和 try…catch ，它只能简单的假设关于标识符位置的判断都是无效的，因为无法在词法分析阶段明确知道 eval(…) 会接受到什么代码，这些代码会如何对作用域进行修改，也无法知道传递给 with 用来创建新词法作用域的对象的内容到底是什么。</p><p>最悲观的情况是如果出现了这些动态添加作用域的代码，所有的优化可能都是无意义的，因此最简单的做法就是完全不进行任何优化。</p><p>如果代码中大量使用 eval(…) 和 with，那么运行起来一定会变得非常缓慢。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>很多时候我们对代码的分析出错，就是源于对词法作用域的忽略，所以让我们重新审视代码，继续努力！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.liuxuan.site/blog/20180407/static_scope.jpg?imageView2/1/w/1000/h/400&quot; alt=&quot;static-scope&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;两种作用域&quot;&gt;&lt;a href=&quot;#两种作用域&quot; class=&quot;headerlink&quot; title=&quot;两种作用域&quot;&gt;&lt;/a&gt;两种作用域&lt;/h3&gt;&lt;p&gt;“作用域”我们知道是一套规则，用来管理引擎如何在当前作用域以及嵌套的子作用域中根据标识符名称进行变量查找。&lt;/p&gt;
&lt;p&gt;作用域有两种主要工作模型：&lt;strong&gt;词法作用域&lt;/strong&gt;和&lt;strong&gt;动态作用域&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;大多数语言采用的都是词法作用域，少数语言采用动态作用域（例如 Bash 脚本），这里我们主要讨论词法作用域。&lt;/p&gt;
&lt;h3 id=&quot;词法&quot;&gt;&lt;a href=&quot;#词法&quot; class=&quot;headerlink&quot; title=&quot;词法&quot;&gt;&lt;/a&gt;词法&lt;/h3&gt;&lt;p&gt;大部分标准语言编译器的第一个工作阶段叫作&lt;strong&gt;词法化&lt;/strong&gt;。&lt;br&gt;简单地说，词法作用域是由你在写代码时将变量和函数（块）作用域写在哪里来决定的。当然，也会有一些方法来动态修改作用域，后边我会介绍。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="//blog.liuxuan.site/categories/JavaScript/"/>
    
    
      <category term="Javascript" scheme="//blog.liuxuan.site/tags/Javascript/"/>
    
      <category term="作用域" scheme="//blog.liuxuan.site/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>JS学习系列 01 - 编译原理和作用域</title>
    <link href="//blog.liuxuan.site/2017/02/10/javascript_01_principles_of_compiler/"/>
    <id>//blog.liuxuan.site/2017/02/10/javascript_01_principles_of_compiler/</id>
    <published>2017-02-10T02:36:00.000Z</published>
    <updated>2018-04-06T19:05:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://image.liuxuan.site/blog/20180407/complie.jpg?imageView2/1/w/1000/h/400" alt="complie"></p><p>在学习 javascript 的过程中，我们第一步最应该了解和掌握的就是作用域，与之相关还有程序是怎么编译的，变量是怎么查找的，js 引擎是什么，引擎和作用域的关系又是什么，这些是 javascript 这门语言最基础的地基，至于对象、函数、闭包、原型链、作用域链以及设计模式等等都是地基以上的建筑，只有地基打牢了，建筑才会稳。同样只有先把最基础的部分掌握了，之后的扩展学习才会更容易。</p><p>这一节我要说的，就是作用域和编译原理，从这里开始，我会一点点的把深入学习 javascript 的过程中总结的知识点以及遇到的问题，一篇一篇的梳理出来，如果有志同道合的朋友，可以关注我这个系列，我们一起玩转 javascript。</p><a id="more"></a><h3 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h3><p>大家通常把 javascript 归类为一种“动态”或“解释执行”的语言，但事实上，它是一门编译语言，但和传统的编译语言不同，它不是提前编译的，编译结果也不能进行移植。</p><p>在传统编译语言中，程序在执行之前会经历三个步骤，统称为“编译”：</p><ul><li><strong>分词/词法分析</strong><br>这个过程会把字符串分解成有意义的代码块，这些代码块被称为<strong>词法单元</strong>。<br>例如 <strong><em>var a = 5;</em></strong> 这段程序通常会被分解成下面这些词法单元： var、a、=、5、; 。空格是否会被当成词法单元取决于空格在这门语言中是否有意义。 </li><li><strong>解析/语法分析</strong><br>这个过程是将词法单元流（数组）转换成一个由元素逐级嵌套所组成的代表了程序语法结构的树。这个树被称为“抽象语法树”（Abstract Syntax Tree，AST）。<br><strong><em>var a = 5;</em></strong> 的抽象语法树中可能如下图所示：<br><img src="http://image.liuxuan.site/blog/20180324/abstract_tree.png" alt="抽象语法树"></li><li><strong>代码生成</strong><br>将 AST 转换为可执行代码的过程被称为代码生成。这个过程与语言、目标平台等息息相关。简单来说，就是通过某种方法可以将 <strong><em>var a = 5;</em></strong> 的 AST 转化为一组机器指令，用来创建一个叫做 a 的变量（包括分配内存等），并将一个值 5 存储在 a 中。</li></ul><p>比起那些编译过程只有三个步骤的语言的编译器来说，<strong>javascript 引擎要复杂的多</strong>。<br>例如，在词法分析和代码生成阶段有特定的步骤来对<strong>运行性能进行优化</strong>，包括对<strong>冗余元素进行优化</strong>等。</p><p>首先我们要清楚，javaScript 引擎不会有太多的时间来进行优化（相对于其它语言的编译器来说），因为与其它语言不同，javascript 的编译过程<strong>不是发生在构建之前的</strong>。</p><p>对于 javascript 来说，大部分情况下编译发生在<strong>代码执行前的几微秒（甚至更短）的时间</strong>内。在我们将要讨论的作用域背后，javascript 引擎用尽了各种办法（比如 JIT，可以延迟编译甚至重新编译）来保证性能最佳。</p><p>总结来说，任何 javascript 代码片段在执行前都要进行编译（<strong>预编译</strong>）。因此，javascript 编译器首先会对 <strong><em>var a = 5;</em></strong> 这段程序进行编译，然后做好执行它的准备，并且通常马上就会执行它。 </p><h3 id="三位好友"><a href="#三位好友" class="headerlink" title="三位好友"></a>三位好友</h3><p>要真正理解作用域，我们首先要知道 javascript 中有三位好朋友：</p><ul><li><strong>引擎</strong><br>从头到尾负责整个 javascript 程序的编译及执行过程。</li><li><strong>编译器</strong><br>负责语法分析及代码生成。</li><li><strong>作用域</strong><br>负责收集并维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。</li></ul><p>当遇见 <strong><em>var a = 5;</em></strong> 这一段代码时，其实执行了两个步骤：</p><p>（1）<strong><em>var a;</em></strong> 编译器会询问作用域是否已经有一个该名称的变量存在于同一作用域的集合中。如果是，编译器会忽略该声明，继续进行编译，否则它会要求在当前作用域的集合中声明一个新的变量，并命名为 a 。<br>（2）<strong><em>a = 5;</em></strong> 编译器会为引擎生成运行时所需的代码，这些代码用来处理 <strong><em>a = 5;</em></strong> 这个赋值操作。引擎运行时会首先询问作用域，在当前作用域的集合中是否存在一个叫作 a 的变量，如果是，引擎就会使用这个变量。如果否，引擎会继续向父级作用域中查找，直到找到全局作用域，如果在全局作用域中仍没有找到 a ，那么在<strong>非严格模式</strong>下，引擎会为全局对象新建一个属性 a ，并将其赋值为5，在<strong>严格模式</strong>下，引擎会报错误 <strong>ReferenceError: a is not defined</strong>。</p><p><strong>总结来说</strong>，变量的赋值会执行两个操作，<strong>首先</strong>编译器会在当前作用域声明一个变量（如果之前没有声明过），<strong>然后</strong>在运行时引擎会在当前作用域中查找该变量（找不到就向上一级作用域查找），如果能够找到就会对它赋值。</p><h3 id="LHS-和-RHS"><a href="#LHS-和-RHS" class="headerlink" title="LHS 和 RHS"></a>LHS 和 RHS</h3><p>前面说到引擎在为变量赋值的时候会在作用域中查找变量，但是执行怎样的查找，用什么方式，会对最终的查找结果造成影响。</p><p>在 <strong><em>var a = 5;</em></strong> 这个例子中，引擎会对 a 进行 LHS 查询，当然，另外一个查找类型叫作 RHS。</p><p><strong>对变量进行赋值所执行的查询叫 LHS。</strong><br><strong>找到并使用变量值所执行的查询叫 RHS。</strong></p><p>举个例子：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(a)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 这里隐式包含了 a = 2 这个赋值，所以对 a 进行了 LHS 查询</span></span><br><span class="line">   <span class="keyword">var</span> b = a;</span><br><span class="line">   <span class="comment">// 这里对 a 进行了 RHS 查询，找到 a 的值，然后对 b 进行 LHS 查询，把 2 赋值给 b</span></span><br><span class="line">   <span class="keyword">return</span> a + b; </span><br><span class="line">   <span class="comment">// 这里包含了对 a 和 b 进行的 RHS 查询</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = foo(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 这里首先对 foo 进行 RHS 查询，找到它是一个函数，然后对 c 进行 LHS 查询把 foo 赋值给 c</span></span><br></pre></td></tr></table></figure></p><p><strong>所以上面的例子共包含 3 个 LHS 查询和 4 个 RHS 查询，你们都找对了吗？</strong></p><h3 id="作用域嵌套"><a href="#作用域嵌套" class="headerlink" title="作用域嵌套"></a>作用域嵌套</h3><p>当一个块或函数嵌套在另一个块或函数中时，就发生了作用域嵌套。因此，在当前作用域中无法找到某个变量时，引擎就会在外层嵌套的作用域中继续查找，直到找到该变量，或抵达最外层的作用域（也就是全局作用域）为止。</p><p>举个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(a + b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">2</span>);    <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></p><p>这里对 b 进行的 RHS 查询在 foo 作用域中无法找到，但可以在上一级作用域（这个例子中就是全局作用域）中找到。</p><p>总结来说，遍历嵌套作用域链的规则很简单：引擎从当前执行的作用域中开始查找变量，如果都找不到，就向上一级继续查找。当抵达最外层的全局作用域时，无论找到还是没找到，查找过程都会停止。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>编译器、引擎和作用域是 javascript 代码执行的基础，掌握好这些会对我们深入学习 javascript 起到事半功倍的效果，我们的学习之路才刚刚开始，大家加油！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.liuxuan.site/blog/20180407/complie.jpg?imageView2/1/w/1000/h/400&quot; alt=&quot;complie&quot;&gt;&lt;/p&gt;
&lt;p&gt;在学习 javascript 的过程中，我们第一步最应该了解和掌握的就是作用域，与之相关还有程序是怎么编译的，变量是怎么查找的，js 引擎是什么，引擎和作用域的关系又是什么，这些是 javascript 这门语言最基础的地基，至于对象、函数、闭包、原型链、作用域链以及设计模式等等都是地基以上的建筑，只有地基打牢了，建筑才会稳。同样只有先把最基础的部分掌握了，之后的扩展学习才会更容易。&lt;/p&gt;
&lt;p&gt;这一节我要说的，就是作用域和编译原理，从这里开始，我会一点点的把深入学习 javascript 的过程中总结的知识点以及遇到的问题，一篇一篇的梳理出来，如果有志同道合的朋友，可以关注我这个系列，我们一起玩转 javascript。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="//blog.liuxuan.site/categories/JavaScript/"/>
    
    
      <category term="Javascript" scheme="//blog.liuxuan.site/tags/Javascript/"/>
    
      <category term="编译原理" scheme="//blog.liuxuan.site/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
</feed>
